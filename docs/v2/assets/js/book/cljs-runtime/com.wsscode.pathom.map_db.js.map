{"version":3,"sources":["com/wsscode/pathom/map_db.cljc"],"mappings":"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","names":["com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/maybe-impl","cljs.spec.alpha/or-spec-impl","p__49005","map__49006","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.map-db/map-db-ident-reader","ast","refs","path","env","k","com.wsscode.pathom.core/ident?","vec__49020","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","v","path'","temp__5720__auto__","res","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.core.join.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__49026","map__49028","cljs.core/count","cljs.core/first","p__49059","map__49061","com.wsscode.pathom.map-db/map-db-reader","query","ident-track","entity","com.wsscode.pathom.core.entity.cljs$core$IFn$_invoke$arity$1","temp__5718__auto__","vec__49069","and__4120__auto__","cljs.core/map?","cljs.core/find","cljs.core/contains?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/constantly","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","cljs.core/sequential?","p1__49056#","p2__49057#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.range.cljs$core$IFn$_invoke$arity$0","com.wsscode.pathom.map-db/readers","p1__49091#","p2__49090#","com.wsscode.pathom.map-db/direction-compare","cljs.core/compare","com.wsscode.pathom.map-db/sort-results","sort","items","c","cljs.spec.alpha/conform","vec__49124","type","cljs.core/vec","G__49129","cljs.core/Keyword","js/Error","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__49136","com.wsscode.pathom.map-db/sort-plugin","reader","G__49190","com.wsscode.pathom.map-db/prepare-input","parser","p__49203","map__49204","state","tx","env'","G__49210","cljs.core/deref","com.wsscode.pathom.map-db/parser-config","com.wsscode.pathom.core/env-plugin","com.wsscode.pathom.core/post-process-parser-plugin","com.wsscode.pathom.core/elide-not-found","com.wsscode.pathom.map-db/parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.map-db/db->tree","data","G__49221","G__49222","com.wsscode.pathom.core/remove-query-wildcard","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/nilable-impl"],"sourcesContent":["(ns com.wsscode.pathom.map-db\n  (:require [clojure.spec.alpha :as s]\n            [com.wsscode.pathom.misc :as p.misc]\n            [com.wsscode.pathom.core :as p]\n            [edn-query-language.core :as eql]))\n\n(when p.misc/INCLUDE_SPECS\n  (s/def ::sort-by-expr\n    (s/cat :attr keyword? :direction (s/? #{::asc ::desc})))\n\n  (s/def ::sort-by\n    (s/or :single keyword?\n          :directed ::sort-by-expr)))\n\n(defn map-db-ident-reader\n  [{:keys    [ast]\n    ::keys   [refs]\n    ::p/keys [path]\n    :as      env}]\n  (let [k (:key ast)]\n    (if (p/ident? k)\n      (let [[_ v] k\n            path' path]\n        (when-let [res (get-in refs (if (= '_ v) (take 1 k) k))]\n          (p/join res (assoc env ::p/union-path (fn [{::p/keys [path]}]\n                                                  (if (= (count path') (count path))\n                                                    (first k)))))))\n      ::p/continue)))\n\n(defn map-db-reader\n  [{:keys  [ast query]\n    ::keys [refs ident-track]\n    :as    env}]\n  (let [entity (p/entity env)]\n    (if-let [[_ v] (and (map? entity) (find entity (:key ast)))]\n      (cond\n        (p/ident? v)\n        (if (contains? ident-track v)\n          v\n          (p/join (get-in refs v) (assoc env ::p/union-path (constantly (first v))\n                                             ::ident-track (conj (or ident-track #{}) v))))\n\n        (sequential? v)\n        (mapv #(if (p/ident? %)\n                 (if (contains? ident-track %)\n                   %\n                   (p/join (get-in refs %)\n                     (-> env\n                         (assoc ::ident-track (conj (or ident-track #{}) v)\n                                ::p/union-path (constantly (first %)))\n                         (update ::p/path conj %2))))\n                 (p/join % env))\n          v (range))\n\n        (and (map? v) query)\n        (p/join v env)\n\n        :else\n        v)\n      ::p/continue)))\n\n(def readers [map-db-ident-reader map-db-reader])\n\n(def direction-compare\n  {::asc  compare\n   ::desc #(compare %2 %)})\n\n(defn sort-results [sort items]\n  (let [c (s/conform ::sort-by sort)]\n    (if (= ::s/invalid c)\n      items\n      (let [[type sort] c]\n        (vec\n          (case type\n            :single\n            (sort-by sort items)\n\n            :directed\n            (sort-by (:attr sort) (direction-compare (:direction sort)) items)))))))\n\n(defn sort-plugin []\n  {::p/wrap-read\n   (fn sorting-plugin-external [reader]\n     (fn sorting-plugin-internal [env]\n       (let [sort (get-in env [:ast :params ::sort-by])]\n         (cond->> (reader env)\n           sort (sort-results sort)))))})\n\n(def prepare-input\n  {::p/wrap-parser\n   (fn [parser]\n     (fn [{:keys [state] :as env} tx]\n       (let [env' (cond-> env\n                    state\n                    (assoc ::p/entity @state ::refs @state))]\n         (parser env' tx))))})\n\n(def parser-config\n  {::p/plugins [prepare-input\n                (p/env-plugin\n                  {::p/reader     readers\n                   ::p/union-path (fn [_] nil)})\n                (p/post-process-parser-plugin p/elide-not-found)]})\n\n(def parser\n  (p/parser parser-config))\n\n(defn db->tree [query data refs]\n  (parser {::p/entity data ::refs refs} (p/remove-query-wildcard query)))\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef db->tree\n    :args (s/cat :query ::eql/query :data map? :refs (s/nilable map?))\n    :ret map?))\n"]}