{"version":3,"sources":["com/wsscode/pathom/map_db.cljc"],"mappings":";;;;;AAMA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACeC;AAEf,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgBD;AAGhB,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAIaS;AAJb,AAAAL,AAAAJ,AAAA,AACcM;AADd,AAAAF,AAAAJ,AAAA,AAEcO;AAFd,AAAAH,AAAAJ,AAAA,AAGcQ;AAHd,AAKE,AAAME,AAAE,AAAA,AAAMJ;AAAd,AACE,AAAI,AAACK,AAASD;AACZ,AAAAE,AAAYF;AAAZ,AAAAG,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASG;AACHC,AAAMR;AADZ,AAEE,AAAAS,AAAe,AAACE,AAAOZ,AAAK,AAAI,AAAA,AAAA,AAACa,AAAKL,AAAG,AAAA,AAACM,AAAOX,AAAGA;AAApD,AAAA,AAAAO;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACI,AAAOJ,AAAI,AAAA,AAACK,AAAMd,AAAmB;AAAAe;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAA,AAAArB,AAAAqB,AAAA,AAAgBjB;AAAhB,AACE,AAAI,AAACY,AAAE,AAACM,AAAMV,AAAO,AAACU,AAAMlB;AAC1B,AAACmB,AAAMjB;;AADT;;;;;AAF1C;;;AAHJ;;;AASJ,AAAA,AAAAkB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAA0B,AAAAA;AAAAA,AAGWpB;AAHX,AAAAL,AAAAyB,AAAA,AACYvB;AADZ,AAAAF,AAAAyB,AAAA,AACgBE;AADhB,AAAA3B,AAAAyB,AAAA,AAEYtB;AAFZ,AAAAH,AAAAyB,AAAA,AAEiBG;AAFjB,AAIE,AAAMC,AAAO,AAACC,AAASzB;AAAvB,AACE,AAAA0B,AAAe,AAAAE,AAAK,AAACC,AAAKL;AAAX,AAAA,AAAAI;AAAmB,AAACE,AAAKN,AAAO,AAAA,AAAM3B;;AAAtC+B;;;AAAf,AAAA,AAAAF;AAAA,AAAAC,AAAAD;AAAA,AAAAtB,AAAAuB,AAAA,AAAA,AAAUtB;AAAV,AAAAD,AAAAuB,AAAA,AAAA,AAAYrB;AAAZ,AACE,AACE,AAACJ,AAASI;AACV,AAAI,AAACyB,AAAUR,AAAYjB;AACzBA;;AACA,AAACO,AAAO,AAACH,AAAOZ,AAAKQ,AAAG,AAAA,AAAA,AAACQ,AAAMd,AAAmB,AAACgC,AAAW,AAACd,AAAMZ,AAC7B,AAAC2B,AAAK,AAAAC,AAAIX;AAAJ,AAAA,AAAAW;AAAAA;;AAAA;;AAAqB5B;;;AALvE,AAOE,AAAC6B,AAAY7B;AACb,AAAA,AAACgC;AAADF,AAAAC;AAAA,AAAO,AAAI,AAAAD,AAAClC;AACH,AAAI,AAAAkC,AAACL,AAAUR;AAAfa;;AAEE,AAACvB,AAAO,AAAAuB,AAAC1B,AAAOZ,AACJE,AACA,AAAA,AAACc,AAAoB,AAACmB,AAAK,AAAAC,AAAIX,AAE/B,AAACgB;AAF0B,AAAA,AAAAL;AAAAA;;AAAA;;AAA3B,AAAgD5B,AAC/B,AAAC0B,AAAW,AAAAI,AAAClB,AAC9B,AAAAmB,AAAiBG;;;AAC/B,AAAAJ,AAACvB,AAASb;;;AACjBM,AAAE,AAACmC;;AAjBP,AAmBE,AAAAb,AAAK,AAACC,AAAKvB;AAAX,AAAA,AAAAsB;AAAcN;;AAAdM;;;AACA,AAACf,AAAOP,AAAEN;;AApBZ,AAuBEM;;;;;;AAxBJ;;;AA2BJ,AAAA,AAAKoC,AAAS9C,AAAoByB;AAElC,AAAA,AAAA,AAAA,AAAA,AAAAsB,AAAAC,AAAKC,AACKC;AADV,AAEW,AAAAF,AAAAD,AAACG;;AAEZ,AAAA,AAAMC,AAAcC,AAAKC;AAAzB,AACE,AAAMC,AAAE,AAAA,AAACC,AAAoBH;AAA7B,AACE,AAAI,AAAA,AAACrC,AAAcuC;AACjBD;;AACA,AAAAG,AAAkBF;AAAlB,AAAA9C,AAAAgD,AAAA,AAAA,AAAOC;AAAP,AAAAjD,AAAAgD,AAAA,AAAA,AAAYJ;AAAZ,AACE,AAACM,AACC,AAAAC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAACG,AAAQV,AAAKC;;;AAFhB;AAKE,AAACS,AAAQ,AAAA,AAAOV,AAAM,AAAAW,AAAmB,AAAA,AAAYX;AAA/B,AAAA,AAAAW,AAAAA,AAACd,AAAAA,AAAAA;AAAqCI;;;;AAL9D,AAAA,AAAAQ,AAAA,AAAA,AAAAF;;;;;;AAOV,AAAA,AAAMK;AAAN,AAAA,AAAA,AAEG,AAA6BC;AAA7B,AACE,AAA6B7D;AAA7B,AACE,AAAMgD,AAAK,AAAA,AAAA,AAAA,AAAA,AAACtC,AAAOV;AAAnB,AACE,AAAA8D,AAAS,AAACD,AAAAA,AAAAA,AAAO7D,AAAAA;AAAjB,AAAA,AACEgD;AAAK,AAAAc,AAACf,AAAaC;;AADrBc;;;;;AAGT,AAAA,AAAA,AAAKC,AAEF,AAAKC;AAAL,AACE,AAAAC,AAA6BG;AAA7B,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1E,AAAA,AAAA0E,AAAA,AAAA,AAAA,AAAA,AAAAzE,AAAAC,AAAAwE,AAAAA;AAAAA,AAAwBlE;AAAxB,AAAAL,AAAAuE,AAAA,AAAaC;AAAb,AACE,AAAME,AAAK,AAAAC,AAAQtE;AAAR,AAAA,AACEmE;AACA,AAAAG,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAACzD,AAAkBqD,AAAcA;;AAFnCG;;;AAAX,AAGE,AAACN,AAAAA,AAAAA,AAAOK,AAAAA,AAAKD,AAAAA;;;AAEtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AAC0B9B,AACA,AAAKrC;AAAL,AAAA;AAF/B,AAAA,AAGgB0D,AACA,AAACU,AAA6BC;AAE9C,AAAKC,AACH,AAACC,AAASJ;AAEZ,AAAA,AAAMK,AAAUvD,AAAMwD,AAAKhF;AAA3B,AACE,AAAA,AAAA,AAAA,AAAC6E,AAAmBG,AAAYhF,AAAM,AAACiF,AAAwBzD","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/keyword?","cljs.spec.alpha/or-spec-impl","p__87775","map__87776","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.map-db/map-db-ident-reader","ast","refs","path","env","k","com.wsscode.pathom.core/ident?","vec__87779","cljs.core.nth","_","v","path'","temp__5720__auto__","res","cljs.core.get_in","cljs.core._EQ_","cljs.core.take","com.wsscode.pathom.core.join","cljs.core.assoc","p__87785","map__87786","cljs.core/count","cljs.core/first","p__87800","map__87803","com.wsscode.pathom.map-db/map-db-reader","query","ident-track","entity","com.wsscode.pathom.core.entity","temp__5718__auto__","vec__87815","and__4120__auto__","cljs.core/map?","cljs.core/find","cljs.core/contains?","cljs.core/constantly","cljs.core.conj","or__4131__auto__","cljs.core/sequential?","p1__87792#","p2__87793#","cljs.core.mapv","cljs.core.update","cljs.core/conj","cljs.core.range","com.wsscode.pathom.map-db/readers","p1__87861#","p2__87860#","com.wsscode.pathom.map-db/direction-compare","cljs.core/compare","com.wsscode.pathom.map-db/sort-results","sort","items","c","cljs.spec.alpha/conform","vec__87877","type","cljs.core/vec","G__87881","cljs.core/Keyword","js/Error","cljs.core.sort_by","G__87893","com.wsscode.pathom.map-db/sort-plugin","reader","G__87974","com.wsscode.pathom.map-db/prepare-input","parser","p__87986","map__87987","state","tx","env'","G__87994","cljs.core/deref","com.wsscode.pathom.map-db/parser-config","com.wsscode.pathom.core/post-process-parser-plugin","com.wsscode.pathom.core/elide-not-found","com.wsscode.pathom.map-db/parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.map-db/db->tree","data","com.wsscode.pathom.core/remove-query-wildcard"],"sourcesContent":["(ns com.wsscode.pathom.map-db\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [>def >defn >fdef => | <- ?]]\n    [com.wsscode.pathom.core :as p]))\n\n(>def ::sort-by-expr\n  (s/cat :attr keyword? :direction (s/? #{::asc ::desc})))\n\n(>def ::sort-by\n  (s/or :single keyword?\n        :directed ::sort-by-expr))\n\n(defn map-db-ident-reader\n  [{:keys    [ast]\n    ::keys   [refs]\n    ::p/keys [path]\n    :as      env}]\n  (let [k (:key ast)]\n    (if (p/ident? k)\n      (let [[_ v] k\n            path' path]\n        (when-let [res (get-in refs (if (= '_ v) (take 1 k) k))]\n          (p/join res (assoc env ::p/union-path (fn [{::p/keys [path]}]\n                                                  (if (= (count path') (count path))\n                                                    (first k)))))))\n      ::p/continue)))\n\n(defn map-db-reader\n  [{:keys  [ast query]\n    ::keys [refs ident-track]\n    :as    env}]\n  (let [entity (p/entity env)]\n    (if-let [[_ v] (and (map? entity) (find entity (:key ast)))]\n      (cond\n        (p/ident? v)\n        (if (contains? ident-track v)\n          v\n          (p/join (get-in refs v) (assoc env ::p/union-path (constantly (first v))\n                                    ::ident-track (conj (or ident-track #{}) v))))\n\n        (sequential? v)\n        (mapv #(if (p/ident? %)\n                 (if (contains? ident-track %)\n                   %\n                   (p/join (get-in refs %)\n                           (-> env\n                               (assoc ::ident-track (conj (or ident-track #{}) v)\n                                 ::p/union-path (constantly (first %)))\n                               (update ::p/path conj %2))))\n                 (p/join % env))\n          v (range))\n\n        (and (map? v) query)\n        (p/join v env)\n\n        :else\n        v)\n      ::p/continue)))\n\n(def readers [map-db-ident-reader map-db-reader])\n\n(def direction-compare\n  {::asc  compare\n   ::desc #(compare %2 %)})\n\n(defn sort-results [sort items]\n  (let [c (s/conform ::sort-by sort)]\n    (if (= ::s/invalid c)\n      items\n      (let [[type sort] c]\n        (vec\n          (case type\n            :single\n            (sort-by sort items)\n\n            :directed\n            (sort-by (:attr sort) (direction-compare (:direction sort)) items)))))))\n\n(defn sort-plugin []\n  {::p/wrap-read\n   (fn sorting-plugin-external [reader]\n     (fn sorting-plugin-internal [env]\n       (let [sort (get-in env [:ast :params ::sort-by])]\n         (cond->> (reader env)\n           sort (sort-results sort)))))})\n\n(def prepare-input\n  {::p/wrap-parser\n   (fn [parser]\n     (fn [{:keys [state] :as env} tx]\n       (let [env' (cond-> env\n                    state\n                    (assoc ::p/entity @state ::refs @state))]\n         (parser env' tx))))})\n\n(def parser-config\n  {::p/env     {::p/reader     readers\n                ::p/union-path (fn [_] nil)}\n   ::p/plugins [prepare-input\n                (p/post-process-parser-plugin p/elide-not-found)]})\n\n(def parser\n  (p/parser parser-config))\n\n(defn db->tree [query data refs]\n  (parser {::p/entity data ::refs refs} (p/remove-query-wildcard query)))\n"]}