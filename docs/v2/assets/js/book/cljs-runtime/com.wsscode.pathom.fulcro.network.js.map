{"version":3,"sources":["com/wsscode/pathom/fulcro/network.cljs"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k59706","else__4388__auto__","G__59712","cljs.core/Keyword","parser","cljs.core.get","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce","ret__4407__auto__","p__59713","vec__59714","k__4408__auto__","cljs.core.nth","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__59705","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","coll__4382__auto__","cljs.core/hash-unordered-coll","this59707","other59708","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__59728","cljs.core/keyword-identical?","expr__59729","cljs.core.assoc","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","p__59734","map__59735","cljs.core.apply","cljs.core/hash-map","com.wsscode.pathom.fulcro.network/PathomRemote","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__59710","extmap__4424__auto__","G__59842","cljs.core/record?","com.wsscode.pathom.fulcro.network/->PathomRemote","com.wsscode.pathom.fulcro.network/map->PathomRemote","_","this","edn","ok-handler","error-handler","progress-handler","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_59779","state_val_59780","inst_59750","inst_59757","com.wsscode.async.async-cljs/promise?","statearr-59792","statearr-59793","statearr-59795","inst_59737","inst_59738","inst_59739","inst_59740","inst_59741","cljs.core/PersistentHashMap","inst_59742","statearr-59798","statearr-59799","statearr-59802","inst_59761","inst_59762","com.wsscode.async.async-cljs/consumer-pair","statearr-59805","cljs.core.async.impl.ioc-helpers/take!","inst_59777","cljs.core.async.impl.ioc-helpers/return-chan","inst_59769","statearr-59809","statearr-59810","cljs.core/cons","inst_59748","inst_59749","inst_59751","com.wsscode.async.async-cljs/chan?","statearr-59811","statearr-59814","statearr-59815","statearr-59818","inst_59754","inst_59755","com.wsscode.async.async-cljs/throw-err","statearr-59820","statearr-59821","cljs.core/rest","ex59817","statearr-59822","statearr-59823","statearr-59824","inst_59767","statearr-59825","inst_59759","com.wsscode.async.async-cljs/promise->chan","inst_59771","inst_59772","inst_59773","inst_59774","statearr-59827","statearr-59828","statearr-59829","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","ex__48143__auto__","e59830","statearr-59831","statearr-59832","cljs.core/first","state__48841__auto__","statearr-59833","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/console.error","com.wsscode.pathom.fulcro.network/pathom-remote","k59850","G__59857","f","serialize?","p__59862","vec__59863","G__59849","this59851","other59852","pred__59881","expr__59882","com.wsscode.pathom.fulcro.network/FnNetwork","G__59855","G__59888","com.wsscode.pathom.fulcro.network/->FnNetwork","com.wsscode.pathom.fulcro.network/map->FnNetwork","ok","error","var_args","G__59890","com.wsscode.pathom.fulcro.network/fn-network","js/Error","com.wsscode.pathom.fulcro.network.fn_network","k59906","G__59917","network","options","p__59920","vec__59922","G__59905","this59907","other59908","pred__59972","expr__59973","com.wsscode.pathom.fulcro.network/TransformNetwork","G__59910","G__59979","com.wsscode.pathom.fulcro.network/->TransformNetwork","com.wsscode.pathom.fulcro.network/map->TransformNetwork","e59970","fulcro.client.network/serialize-requests?","map__59937","cljs.core/deref","transform-query","transform-response","transform-error","transform-transmission","app*","x","req-id","cljs.core/random-uuid","env","temp__5718__auto__","edn'","G__59948","G__59949","p1__59900#","p1__59902#","fulcro.client.network/send","G__59953","G__59954","p1__59903#","p1__59904#","G__59957","G__59961","fulcro.client.network/start","k59987","G__59995","p__59999","vec__60000","G__59986","this59988","other59989","pred__60019","expr__60020","p__60030","map__60031","com.wsscode.pathom.fulcro.network/TransformRemoteI","G__59991","G__60063","com.wsscode.pathom.fulcro.network/->TransformRemoteI","com.wsscode.pathom.fulcro.network/map->TransformRemoteI","e60016","map__60037","transform-progress","G__60044","G__60045","G__60046","fulcro.client.network/transmit","response","G__60047","p1__59982#","cljs.core.update","G__60050","p1__59983#","progress","G__60053","G__60055","p1__59984#","G__60056","p1__59985#","G__60057","abort-id","fulcro.client.network/abort","com.wsscode.pathom.fulcro.network/transform-remote","remote","cljs.core.atom","com.wsscode.pathom.fulcro.network/transform-remote-init","app","G__60073","cljs.core/reset!","com.wsscode.pathom.fulcro.network/trace-remote","query","cljs.core.conj","com.wsscode.pathom.fulcro.network/profile-remote","com.wsscode.pathom.fulcro.network/graphql-response-key","cljs.core.comp","cljs.core/keyword","com.wsscode.pathom.graphql/camel-case","cljs.core/name","com.wsscode.pathom.fulcro.network/graphql-response-parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.core/map-reader*","k","com.wsscode.pathom.core.entity","id-param","com.wsscode.pathom.graphql/find-id","cljs.core.get_in","fulcro.client.primitives/tempid?","G__60086","cljs.core/val","cljs.core/key","G__60090","com.wsscode.pathom.fulcro.network/graphql-network","p__60096","map__60097","url","com.wsscode.pathom.fulcro.network.graphql_network","update-http-request","_this","state_60166","state_val_60167","inst_60124","inst_60126","statearr-60168","statearr-60169","inst_60099","inst_60100","statearr-60170","inst_60147","statearr-60171","statearr-60172","inst_60134","inst_60132","inst_60133","inst_60136","inst_60137","cljs.core/not","statearr-60173","statearr-60174","statearr-60175","statearr-60179","inst_60164","inst_60150","statearr-60184","statearr-60185","inst_60112","statearr-60187","inst_60107","inst_60108","inst_60109","cljs.core/PersistentArrayMap","inst_60110","cljs.core/PersistentHashSet","inst_60111","inst_60113","inst_60114","inst_60115","inst_60116","inst_60117","inst_60119","inst_60120","inst_60121","inst_60122","inst_60123","statearr-60189","statearr-60190","statearr-60191","statearr-60194","inst_60129","inst_60130","statearr-60195","ex60193","statearr-60196","statearr-60197","statearr-60201","inst_60152","statearr-60203","inst_60139","inst_60140","inst_60141","inst_60142","inst_60143","statearr-60205","statearr-60206","inst_60155","inst_60156","inst_60157","inst_60158","inst_60159","inst_60160","inst_60161","statearr-60209","statearr-60212","statearr-60215","statearr-60217","e60220","statearr-60221","statearr-60222","statearr-60223","com.wsscode.pathom.core/query->ast","com.wsscode.pathom.core/elide-ast-nodes","com.wsscode.pathom.core/ast->query","com.wsscode.pathom.graphql.query__GT_graphql","com.wsscode.pathom.diplomat.http.fetch/request-async","com.wsscode.pathom.fulcro.network/graphql-response-parser2","simple-keyword","js/console.log","G__60227","G__60229","com.wsscode.pathom.fulcro.network/graphql-network2","com.wsscode.pathom.fulcro.network.graphql_network2","config","state_60294","state_val_60295","inst_60261","inst_60266","inst_60267","inst_60268","inst_60269","inst_60270","statearr-60302","statearr-60304","statearr-60309","inst_60232","inst_60233","statearr-60310","inst_60245","inst_60282","inst_60283","inst_60285","inst_60286","inst_60287","inst_60288","inst_60289","statearr-60313","statearr-60315","inst_60279","statearr-60318","inst_60259","inst_60260","inst_60263","inst_60264","statearr-60319","statearr-60320","statearr-60321","inst_60292","inst_60274","statearr-60322","statearr-60323","inst_60240","inst_60241","inst_60242","inst_60243","inst_60244","inst_60246","inst_60247","inst_60248","inst_60249","inst_60250","inst_60251","inst_60252","inst_60253","inst_60254","inst_60255","inst_60256","inst_60257","statearr-60324","statearr-60327","inst_60277","statearr-60329","statearr-60330","statearr-60332","ex60326","statearr-60337","statearr-60339","statearr-60344","statearr-60345","statearr-60347","statearr-60350","e60352","statearr-60353","statearr-60354","statearr-60357","cljs.core.merge","com.wsscode.pathom.fulcro.network/debounce","interval","timer","calls","args","js/clearTimeout","cljs.core.swap_BANG_","cljs.core/conj","js/setTimeout","G__60366","com.wsscode.pathom.fulcro.network/group-mergeable-requests","requests","vec__60370","seq__60371","first__60372","cljs.core/next","vec__60373","q","err","tail","groups","left","current","next-cycle","vec__60394","req","cur-group","merged","com.wsscode.pathom.core/merge-queries","cljs.core/assoc-in","cljs.core.update_in","vec__60401","seq__60402","first__60403","vec__60404","com.wsscode.pathom.fulcro.network/batch-send","delay","p1__60410#","G__60415","k60418","G__60427","send-fn","p__60428","vec__60429","G__60417","this60419","other60420","pred__60445","expr__60446","com.wsscode.pathom.fulcro.network/BatchNetwork","G__60424","G__60462","com.wsscode.pathom.fulcro.network/->BatchNetwork","com.wsscode.pathom.fulcro.network/map->BatchNetwork","G__60471","com.wsscode.pathom.fulcro.network/batch-network","com.wsscode.pathom.fulcro.network.batch_network","reqs","seq__60476","chunk__60477","count__60478","i__60479","map__60540","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__60567","p1__60465#","p1__60466#","seq__60545","chunk__60546","count__60547","i__60548","seq__60570","chunk__60571","count__60572","i__60573","seq__60558","chunk__60559","count__60560","i__60561","seq__60586","chunk__60587","count__60588","i__60589","p__60595","map__60596","com.wsscode.pathom.fulcro.network/fulcro-union-path","ast","vec__60598","component","props","type","fulcro.client.primitives.get_ident"],"sourcesContent":["(ns com.wsscode.pathom.fulcro.network\n  (:require\n    [clojure.core.async :refer [go]]\n    [com.wsscode.async.async-cljs :refer [<? <?maybe go-catch <!p]]\n    [com.wsscode.pathom.core :as p]\n    [com.wsscode.pathom.diplomat.http :as http]\n    [com.wsscode.pathom.diplomat.http.fetch :as fetch]\n    [com.wsscode.pathom.graphql :as pg]\n    [fulcro.client.network :as fulcro.network]\n    [fulcro.client.primitives :as fp]))\n\n;; EXPERIMENTAL - all features here are experimental and subject to API changes and breakages\n\n;; Local Network\n\n(defrecord PathomRemote [parser]\n  fulcro.network/NetworkBehavior\n  (serialize-requests? [_] true)\n\n  fulcro.network/FulcroRemoteI\n  (transmit [this {::fulcro.network/keys [edn ok-handler error-handler progress-handler]}]\n    (go\n      (try\n        (ok-handler {:transaction edn :body (<?maybe (parser {} edn))})\n        (catch :default e\n          (js/console.error \"PathomRemote error:\" e)\n          (error-handler {:body e}))))))\n\n(defn pathom-remote\n  \"Create a Fulcro remote that will use a Pathom async parser to process the query.\"\n  [parser]\n  (map->PathomRemote {:parser parser}))\n\n;; FN Network, create a network from a simple function\n\n(defrecord FnNetwork [f serialize?]\n  fulcro.network/NetworkBehavior\n  (serialize-requests? [_] serialize?)\n\n  fulcro.network/FulcroNetwork\n  (send [this edn ok error] (f this edn ok error))\n\n  (start [_]))\n\n(defn fn-network\n  \"Creates a simple Fulcro network out a function, the function will reeive the params:\n  [network edn ok-callback error-callback]\"\n  ([f] (fn-network f true))\n  ([f serialize?]\n   (map->FnNetwork {:f          f\n                    :serialize? serialize?})))\n\n;; Transform Network\n\n(defrecord TransformNetwork [network options]\n  fulcro.network/NetworkBehavior\n  (serialize-requests? [_]\n    (try\n      (fulcro.network/serialize-requests? network)\n      (catch :default _ true)))\n\n  fulcro.network/FulcroNetwork\n  (send [_ edn ok error]\n    (let [{::keys [transform-query transform-response transform-error transform-transmission app*]\n           :or    {transform-query    (fn [_ x] x)\n                   transform-response (fn [_ x] x)\n                   transform-error    (fn [_ x] x)}} options\n          req-id (random-uuid)\n          env    {::request-id req-id\n                  ::app        @app*}]\n      (if-let [edn' (transform-query env edn)]\n        (if transform-transmission\n          (transform-transmission edn'\n            (fn [edn']\n              (fulcro.network/send network edn'\n                #(->> % (transform-response env) ok)\n                #(->> % (transform-error env) error))))\n          (fulcro.network/send network edn'\n            #(->> % (transform-response env) ok)\n            #(->> % (transform-error env) error)))\n        (ok nil))))\n\n  (start [this]\n    (fulcro.network/start network)\n    this))\n\n(defrecord TransformRemoteI [network options]\n  fulcro.network/NetworkBehavior\n  (serialize-requests? [_]\n    (try\n      (fulcro.network/serialize-requests? network)\n      (catch :default _ true)))\n\n  fulcro.network/FulcroRemoteI\n  (transmit [this {::fulcro.network/keys [edn ok-handler error-handler progress-handler]}]\n    (let [{::keys [transform-query transform-response transform-error\n                   transform-progress transform-transmission app*]\n           :or    {transform-query    (fn [_ x] x)\n                   transform-response (fn [_ x] x)\n                   transform-error    (fn [_ x] x)\n                   transform-progress (fn [_ x] x)}} options\n          req-id (random-uuid)\n          env    {::request-id req-id\n                  ::app        @app*}]\n      (if-let [edn' (transform-query env edn)]\n        (if transform-transmission\n          (transform-transmission env edn'\n            (fn [edn']\n              (fulcro.network/transmit network\n                {::fulcro.network/edn              edn'\n                 ::fulcro.network/ok-handler       (fn [response] (ok-handler (update response :body #(transform-response env %))))\n                 ::fulcro.network/error-handler    (fn [error] (error-handler (update error :body #(transform-error env %))))\n                 ::fulcro.network/progress-handler (fn [progress] (progress-handler (transform-progress env progress)))})))\n          (fulcro.network/transmit network\n            {::fulcro.network/edn              edn'\n             ::fulcro.network/ok-handler       (fn [response] (ok-handler (update response :body #(transform-response env %))))\n             ::fulcro.network/error-handler    (fn [error] (error-handler (update error :body #(transform-error env %))))\n             ::fulcro.network/progress-handler (fn [progress] (progress-handler (transform-progress env progress)))}))\n        (ok-handler nil))))\n\n  (abort [this abort-id]\n    (fulcro.network/abort network abort-id)))\n\n(defn transform-remote\n  \"Given a network, provides some hooks to modify the network behavior.\n\n  ::transform-query [env edn] -> edn\n  Receives the EDN query so you can modify before it's transmited. If you return nil the send will be cancelled, and the\n  network ok handler will be triggered with nil.\n\n  ::transform-response [env response] -> response\n  ::transform-error [env error] -> error\n  ::transform-progress [env progress] -> progress (for FulcroRemoteI only)\n\n  ::transform-transmission [env transmit]\n  Transmit is a function with zero arguments, this can be used to wrap some operation around the data\n  transmission entirely, but you can't affect the parameters from here.\n\n  env is a map with the keys `::request-id` and `::app`\n\n  `::request-id` is a uuid generated on the request, it will\n  be the same during all transform hooks, you can use this to correlate the hook steps.\n\n  The `::app` is an atom with the app, to have this you must initialize it during the Fulcro :started-callback using\n  the following code:\n\n  (fn [app] (pathom.network/transform-remote-init remote app))\n\n  This helper is compatible with both fulcro network work interfaces FulcroNetwork and FulcroRemoteI.\"\n  [remote options]\n  (let [options (assoc options ::app* (atom nil))]\n    (cond\n      (implements? fulcro.network/FulcroRemoteI remote)\n      (->TransformRemoteI remote options)\n\n      (implements? fulcro.network/FulcroNetwork remote)\n      (->TransformNetwork remote options))))\n\n(defn transform-remote-init\n  \"Set the transform remote app reference, this is needed if your remote needs access to the app.\"\n  [network app]\n  (some-> network :options ::app* (reset! app)))\n\n;; Profile network\n\n(defn trace-remote\n  \"Wrap a Remote so it always ask for the pathom profile.\"\n  [network]\n  (transform-remote network\n    {::transform-query (fn [_ query] (conj query :com.wsscode.pathom/trace))}))\n\n(defn profile-remote\n  \"Wrap a Remote so it always ask for the pathom profile.\"\n  [network]\n  (transform-remote network\n    {::transform-query (fn [_ query] (conj query :com.wsscode.pathom.profile/profile))}))\n\n;; GraphQL Simple Network\n\n(def graphql-response-key (comp keyword pg/camel-case name))\n\n(def graphql-response-parser\n  (p/parser {::p/env    {::p/reader (p/map-reader* {::p/map-key-transform graphql-response-key})}\n             ::p/mutate (fn [env k _]\n                          {:action\n                           (fn []\n                             (let [response (-> (p/entity env) (get (graphql-response-key k)))\n                                   id-param (pg/find-id (get-in env [:ast :params]) fp/tempid?)]\n                               (cond-> response\n                                 id-param (assoc ::fp/tempids {(val id-param) (get response (graphql-response-key (key id-param)))}))))})}))\n\n(defn graphql-network\n  ([url]\n   (graphql-network url {}))\n  ([url {update-http-request ::update-http-request}]\n   (fn-network\n     (fn [_this edn ok error]\n       (go\n         (try\n           (let [edn (-> edn\n                         p/query->ast\n                         (p/elide-ast-nodes #{:com.wsscode.pathom.profile/profile})\n                         p/ast->query)\n                 query (pg/query->graphql edn {::pg/js-name (comp pg/camel-case name)})\n                 response (<? (fetch/request-async\n                                (cond-> {::http/url         url\n                                         ::http/method      ::http/post\n                                         ::http/as          ::http/json\n                                         ::http/form-params {:query query}}\n                                  update-http-request update-http-request)))\n                 {:keys [data]} (::http/body response)]\n             (ok (graphql-response-parser {::p/entity data} edn)))\n           (catch :default e\n             (error e))))))))\n\n(def graphql-response-parser2\n  (let [simple-keyword (comp keyword name)]\n    (p/parser {::p/env    {::p/reader (p/map-reader* {::p/map-key-transform simple-keyword})}\n               ::p/mutate (fn [env k _]\n                            {:action\n                             (fn []\n                               (let [response (-> (p/entity env) (get (simple-keyword k)))\n                                     id-param (pg/find-id (get-in env [:ast :params]) fp/tempid?)]\n                                 (js/console.log \"VOLTA\" id-param (p/entity env) response)\n                                 (cond-> response\n                                   id-param (assoc ::fp/tempids {(val id-param) (get response (simple-keyword (key id-param)))}))))})})))\n\n(defn graphql-network2\n  ([url] (graphql-network2 url {}))\n  ([url config]\n   (fn-network\n     (fn [_this edn ok error]\n       (go\n         (try\n           (let [edn      (-> edn\n                              p/query->ast\n                              (p/elide-ast-nodes #{:com.wsscode.pathom.profile/profile})\n                              p/ast->query)\n                 query    (pg/query->graphql edn (merge {::pg/tempid? fp/tempid?} config))\n                 response (<? (fetch/request-async {::http/url         url\n                                                    ::http/method      ::http/post\n                                                    ::http/as          ::http/json\n                                                    ::http/form-params {:query query}}))\n                 {:keys [data]} (::http/body response)]\n             (ok (graphql-response-parser2 {::p/entity data} edn)))\n           (catch :default e\n             (error e))))))))\n\n;; Batch Networking\n\n(defn debounce\n  \"Debounce calls, all the call inputs will be stored and the final call will receive a vector with every\n  collected input during the debounce.\"\n  [f interval]\n  (let [timer (atom 0)\n        calls (atom [])]\n    (fn [& args]\n      (js/clearTimeout @timer)\n      (swap! calls conj args)\n      (reset! timer (js/setTimeout #(do\n                                      (f @calls)\n                                      (reset! calls []))\n                                   interval)))))\n\n(defn group-mergeable-requests\n  \"Given a list of requests [query ok-callback error-callback], reduces the number of requests to the minimum by merging\n  the requests. Not all requests are mergeable, so this still might output multiple requests.\"\n  [requests]\n  (if (seq requests)\n    (let [[[q ok err] & tail] requests\n          groups [{::query q ::ok [ok] ::err [err]}]]\n      (loop [left       tail\n             groups     groups\n             current    0\n             next-cycle []]\n        (if-let [[query ok err :as req] (first left)]\n          (let [cur-group (get groups current)\n                merged    (p/merge-queries (::query cur-group) query)]\n            (if merged\n              (recur (next left)\n                (-> groups\n                    (assoc-in [current ::query] merged)\n                    (update-in [current ::ok] conj ok)\n                    (update-in [current ::err] conj err))\n                current\n                next-cycle)\n              (recur (next left)\n                groups\n                current\n                (conj next-cycle req))))\n          (if (seq next-cycle)\n            (let [[[q ok err] & tail] next-cycle]\n              (recur tail\n                (conj groups {::query q ::ok [ok] ::err [err]})\n                (inc current)\n                []))\n            groups))))\n    []))\n\n(defn batch-send\n  \"Setup a debounce to batch network requests. The callback function f will be called with a list of requests to be made\n  after merging as max as possible.\"\n  [f delay]\n  (debounce #(f (group-mergeable-requests %)) delay))\n\n(defrecord BatchNetwork [send-fn]\n  fulcro.network/NetworkBehavior\n  (serialize-requests? [_] true)\n\n  fulcro.network/FulcroNetwork\n  (send [_ edn ok error] (send-fn edn ok error))\n  (start [_]))\n\n(defn batch-network\n  \"Wraps a network send calls with a debounce that will accumulate, merge and batch send requests in a time frame\n  interval.\"\n  ([network] (batch-network network 10))\n  ([network delay]\n   (let [send-fn (batch-send (fn [reqs]\n                               (doseq [{::keys [query ok err]} reqs]\n                                 (fulcro.network/send network query #(doseq [f ok] (f %)) #(doseq [f err] (f %)))))\n                             delay)]\n     (map->BatchNetwork {:send-fn send-fn}))))\n\n(defn fulcro-union-path\n  \"Decide the union branch based on the Fulcro union component ident dispatch. This is\n  useful if you are using a parser in the Clojurescript side living in the same process\n  as the client app, this makes the union picking automatic on those cases.\"\n  [{:keys [ast] :as env}]\n  (let [component (:component ast)\n        props     (p/entity env)\n        [type _]  (fp/get-ident component props)]\n    type))\n"]}