{"version":3,"sources":["fulcro_css/css_injection.cljc"],"mappings":"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","names":["fulcro-css.css-injection/component-css-includes-with-depth","component","breadth","depth","includes","fulcro-css.css/get-includes","cljs.core.into","p1__58046#","cljs.core.map","cljs.core/PersistentHashMap","p1__58047#","cljs.core.mapcat","G__58053","G__58054","G__58055","p__58063","map__58065","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","fulcro-css.css-injection/find-css-nodes","order","state-map","query","cljs.core/map?","fulcro.client.primitives.get_query","ast","fulcro.client.primitives/query->ast","cljs.core.atom","traverse","p__58079","map__58081","children","and__4120__auto__","fulcro-css.css/CSS?","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","p1__58060#","traverse*","cljs.core/seq","nodes","ordered-nodes","cljs.core._EQ_","cljs.core.sort_by","p1__58062#","unique-nodes","cljs.core.distinct","fulcro.logging._log","e58089","js/Error","e__47187__auto__","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.core/seq?","get-rules","components","p1__58113#","p2__58115#","cljs.core.reduce","fulcro-css.css/get-css-rules","fulcro-css.css-injection/compute-css","props","map__58118","auto-include?","rules","G__58123","fulcro-css.css/get-css","G__58124","css","garden.core.css","js/fulcro-css","js/fulcro-css.css-injection","js/fulcro-css.css-injection.StyleElement","this__56082__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x58138","this__55000__auto__","*reconciler*-orig-val__58142","fulcro.client.primitives/*reconciler*","*depth*-orig-val__58143","fulcro.client.primitives/*depth*","*shared*-orig-val__58144","fulcro.client.primitives/*shared*","*instrument*-orig-val__58145","fulcro.client.primitives/*instrument*","*parent*-orig-val__58146","fulcro.client.primitives/*parent*","*reconciler*-temp-val__58147","fulcro.client.primitives/get-reconciler","*depth*-temp-val__58148","fulcro.client.primitives/depth","*shared*-temp-val__58149","fulcro.client.primitives.shared","*instrument*-temp-val__58150","fulcro.client.primitives/instrument","*parent*-temp-val__58151","map__58154","fulcro.client.primitives/props","this__54984__auto__","reconciler__54985__auto__","lifecycle__54986__auto__","cljs.core.get_in","indexer__54987__auto__","goog.object/set","fulcro.client.impl.protocols/index-component!","x58223","x58225","this__56085__auto__","writer__56086__auto__","opt__56087__auto__","cljs.core/-write","fulcro-css.css-injection/StyleElement","this","key","fulcro.client.primitives.set_state_BANG_","fulcro.client.dom.macro_create_element","fulcro.client.primitives.get_state","factory","fulcro.client.primitives.factory","fulcro-css.css-injection/style-element","G__58230","fulcro.client.primitives/component?","cljs.core.assoc","G__58231","fulcro.client.primitives/component->state-map","cljs.core.update","fulcro.client.primitives/react-type","fulcro-css.css-injection/upsert-css","id","options","fulcro-css.css/remove-from-dom","style-ele","js/document"],"sourcesContent":["(ns fulcro-css.css-injection\n  (:require [fulcro.client.primitives :as prim :refer [defsc]]\n            [clojure.spec.alpha :as s]\n            [garden.core :as g]\n            [fulcro-css.css :as css]\n            [fulcro.logging :as log]\n            #?(:cljs [fulcro.client.dom :as dom]\n               :clj  [fulcro.client.dom-server :as dom])))\n\n(defn component-css-includes-with-depth [component breadth depth]\n  (let [includes (css/get-includes component)]\n    (-> (into []\n          (map #(hash-map ::depth (inc depth)\n                  ::breadth breadth\n                  ::component %))\n          includes)\n      (into (mapcat #(component-css-includes-with-depth % breadth (inc depth)) includes)))))\n\n(defn find-css-nodes\n  \"Scan the given component and return an ordered vector of the css rules in depth-first order.\n  `order` can be :depth-first (default) or :breadth-first\"\n  [{:keys [component order state-map]}]\n  (let [query         (if (map? state-map) (prim/get-query component state-map) (prim/get-query component))\n        ast           (prim/query->ast query)\n        breadth       (atom 0)\n        traverse      (fn traverse* [{:keys [children component]} depth]\n                        (into\n                          (if (and component (css/CSS? component))\n                            (into\n                              [{::depth     depth\n                                ::breadth   (swap! breadth inc)\n                                ::component component}]\n                              (component-css-includes-with-depth component @breadth depth))\n                            [])\n                          (mapcat #(traverse* % (inc depth)) (seq children))))\n        nodes         (traverse ast 0)\n        ordered-nodes (if (= order :breadth-first)\n                        (sort-by ::breadth nodes)\n                        (sort-by #(- (::depth %)) nodes))\n        unique-nodes  (distinct (map ::component ordered-nodes))]\n    (when-not query\n      (log/error \"Auto-include was used for CSS, but the component had no query! No CSS Found.\"))\n    unique-nodes))\n\n(s/fdef find-css-nodes\n  :args (s/cat :options map?)\n  :ret seq?)\n\n(let [get-rules (fn [components] (reduce #(into %1 (css/get-css-rules %2)) [] components))]\n  (defn compute-css\n    \"Compute the stringified CSS based on the given props. This can be used to generate a\n    server-side version of CSS for the initial DOM, and is used the other injection functions to compute\n    the CSS.\n\n    Props are as described in `style-element`.\n    \"\n    [props]\n    (let [{:keys [component auto-include?]} props\n          rules (if (false? auto-include?)\n                  (some-> component (css/get-css))\n                  (some-> (find-css-nodes props) get-rules))\n          css   (g/css rules)]\n      css)))\n\n(defsc StyleElement [this {:keys [order key]}]\n  {:componentDidMount (fn []\n                        (let [css (compute-css (prim/props this))]\n                          (prim/set-state! this {:css css})))}\n  ;; This ensures best performance. React doesn't check/diff it this way.\n  (dom/style {:dangerouslySetInnerHTML {:__html (prim/get-state this :css)}}))\n\n(let [factory (prim/factory StyleElement)]\n  (defn style-element\n    \"Renders a style element. Valid props are:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n\n    The resulting React style element avoids re-rendering unless the props change, and the CSS is cached at component mount; therefore\n    this element will avoid all overhead on refresh. In development you may wish to have the CSS change on hot code reload, in which case\n    you can simply change the `:react-key` on the props to force a re-mount (which will recompute the CSS).\n    \"\n    [props]\n    (let [component (:component props)\n          props     (cond-> props\n                      (prim/component? component) (->\n                                                    (assoc :state-map (some-> component prim/component->state-map))\n                                                    (update :component prim/react-type)))]\n      #?(:cljs (factory props)\n         :clj  (dom/style {}\n                 (compute-css props))))))\n\n#?(:clj\n   (defn upsert-css\n     \"In CLJ this is a STUB (to prevent compile errors in CLJC UI files).\n\n     Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"\n     [id options]\n     (log/error \"Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"))\n   :cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's low-level DOM with the co-located CSS of\n     the specified component.\n\n     The `options` is the same as passed to `style-element`.\n\n     ONLY WORKS FOR CLJS, since otherwise there is no DOM to change.\"\n     [id options]\n     (css/remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")\n           css       (compute-css options)]\n       (set! (.-innerHTML style-ele) css)\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n"]}