{"version":3,"sources":["fulcro_css/css_injection.cljc"],"mappings":"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","names":["fulcro-css.css-injection/component-css-includes-with-depth","component","breadth","depth","includes","fulcro-css.css/get-includes","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__60453#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/PersistentHashMap","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__60454#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__60461","G__60462","G__60463","p__60469","map__60471","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fulcro-css.css-injection/find-css-nodes","order","state-map","query","cljs.core/map?","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$1","ast","fulcro.client.primitives/query->ast","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","traverse","p__60478","map__60479","children","and__4120__auto__","fulcro-css.css/CSS?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/deref","p1__60466#","traverse*","cljs.core/seq","nodes","ordered-nodes","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__60467#","unique-nodes","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic","e60488","js/Error","e__48124__auto__","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.core/seq?","get-rules","components","p1__60495#","p2__60496#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","fulcro-css.css/get-css-rules","fulcro-css.css-injection/compute-css","props","map__60502","auto-include?","rules","G__60505","fulcro-css.css/get-css","G__60506","css","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","js/fulcro-css","js/fulcro-css.css-injection","js/fulcro-css.css-injection.StyleElement","this__55957__auto__","js/React.Component","G__60527","G__60528","js/React.Component.prototype","G__60529","fulcro.client.primitives/default-component-prototype","goog.object/extend","fulcro.client.primitives/-register-component!","x60533","this__54322__auto__","*reconciler*-orig-val__60535","fulcro.client.primitives/*reconciler*","*depth*-orig-val__60536","fulcro.client.primitives/*depth*","*shared*-orig-val__60537","fulcro.client.primitives/*shared*","*instrument*-orig-val__60538","fulcro.client.primitives/*instrument*","*parent*-orig-val__60539","fulcro.client.primitives/*parent*","*reconciler*-temp-val__60540","fulcro.client.primitives/get-reconciler","*depth*-temp-val__60541","fulcro.client.primitives/depth","*shared*-temp-val__60542","fulcro.client.primitives.shared.cljs$core$IFn$_invoke$arity$1","*instrument*-temp-val__60543","fulcro.client.primitives/instrument","*parent*-temp-val__60546","map__60548","fulcro.client.primitives/props","this__54306__auto__","reconciler__54307__auto__","lifecycle__54308__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","indexer__54309__auto__","goog.object/set","fulcro.client.impl.protocols/index-component!","G__60600","G__60601","x60605","x60606","this__55960__auto__","writer__55961__auto__","opt__55962__auto__","cljs.core/-write","fulcro-css.css-injection/StyleElement","this","key","fulcro.client.primitives.set_state_BANG_.cljs$core$IFn$_invoke$arity$2","fulcro.client.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","fulcro.client.primitives.get_state.cljs$core$IFn$_invoke$arity$2","factory","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$1","fulcro-css.css-injection/style-element","G__60612","fulcro.client.primitives/component?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__60614","fulcro.client.primitives/component->state-map","cljs.core.update.cljs$core$IFn$_invoke$arity$3","fulcro.client.primitives/react-type","fulcro-css.css-injection/upsert-css","id","options","fulcro-css.css/remove-from-dom","style-ele","js/document"],"sourcesContent":["(ns fulcro-css.css-injection\n  (:require [fulcro.client.primitives :as prim :refer [defsc]]\n            [clojure.spec.alpha :as s]\n            [garden.core :as g]\n            [fulcro-css.css :as css]\n            [fulcro.logging :as log]\n            #?(:cljs [fulcro.client.dom :as dom]\n               :clj  [fulcro.client.dom-server :as dom])))\n\n(defn component-css-includes-with-depth [component breadth depth]\n  (let [includes (css/get-includes component)]\n    (-> (into []\n          (map #(hash-map ::depth (inc depth)\n                  ::breadth breadth\n                  ::component %))\n          includes)\n      (into (mapcat #(component-css-includes-with-depth % breadth (inc depth)) includes)))))\n\n(defn find-css-nodes\n  \"Scan the given component and return an ordered vector of the css rules in depth-first order.\n  `order` can be :depth-first (default) or :breadth-first\"\n  [{:keys [component order state-map]}]\n  (let [query         (if (map? state-map) (prim/get-query component state-map) (prim/get-query component))\n        ast           (prim/query->ast query)\n        breadth       (atom 0)\n        traverse      (fn traverse* [{:keys [children component]} depth]\n                        (into\n                          (if (and component (css/CSS? component))\n                            (into\n                              [{::depth     depth\n                                ::breadth   (swap! breadth inc)\n                                ::component component}]\n                              (component-css-includes-with-depth component @breadth depth))\n                            [])\n                          (mapcat #(traverse* % (inc depth)) (seq children))))\n        nodes         (traverse ast 0)\n        ordered-nodes (if (= order :breadth-first)\n                        (sort-by ::breadth nodes)\n                        (sort-by #(- (::depth %)) nodes))\n        unique-nodes  (distinct (map ::component ordered-nodes))]\n    (when-not query\n      (log/error \"Auto-include was used for CSS, but the component had no query! No CSS Found.\"))\n    unique-nodes))\n\n(s/fdef find-css-nodes\n  :args (s/cat :options map?)\n  :ret seq?)\n\n(let [get-rules (fn [components] (reduce #(into %1 (css/get-css-rules %2)) [] components))]\n  (defn compute-css\n    \"Compute the stringified CSS based on the given props. This can be used to generate a\n    server-side version of CSS for the initial DOM, and is used the other injection functions to compute\n    the CSS.\n\n    Props are as described in `style-element`.\n    \"\n    [props]\n    (let [{:keys [component auto-include?]} props\n          rules (if (false? auto-include?)\n                  (some-> component (css/get-css))\n                  (some-> (find-css-nodes props) get-rules))\n          css   (g/css rules)]\n      css)))\n\n(defsc StyleElement [this {:keys [order key]}]\n  {:componentDidMount (fn []\n                        (let [css (compute-css (prim/props this))]\n                          (prim/set-state! this {:css css})))}\n  ;; This ensures best performance. React doesn't check/diff it this way.\n  (dom/style {:dangerouslySetInnerHTML {:__html (prim/get-state this :css)}}))\n\n(let [factory (prim/factory StyleElement)]\n  (defn style-element\n    \"Renders a style element. Valid props are:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n\n    The resulting React style element avoids re-rendering unless the props change, and the CSS is cached at component mount; therefore\n    this element will avoid all overhead on refresh. In development you may wish to have the CSS change on hot code reload, in which case\n    you can simply change the `:react-key` on the props to force a re-mount (which will recompute the CSS).\n    \"\n    [props]\n    (let [component (:component props)\n          props     (cond-> props\n                      (prim/component? component) (->\n                                                    (assoc :state-map (some-> component prim/component->state-map))\n                                                    (update :component prim/react-type)))]\n      #?(:cljs (factory props)\n         :clj  (dom/style {}\n                 (compute-css props))))))\n\n#?(:clj\n   (defn upsert-css\n     \"In CLJ this is a STUB (to prevent compile errors in CLJC UI files).\n\n     Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"\n     [id options]\n     (log/error \"Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"))\n   :cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's low-level DOM with the co-located CSS of\n     the specified component.\n\n     The `options` is the same as passed to `style-element`.\n\n     ONLY WORKS FOR CLJS, since otherwise there is no DOM to change.\"\n     [id options]\n     (css/remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")\n           css       (compute-css options)]\n       (set! (.-innerHTML style-ele) css)\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n"]}