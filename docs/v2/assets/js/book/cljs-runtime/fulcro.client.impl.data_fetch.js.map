{"version":3,"sources":["fulcro/client/impl/data_fetch.cljc"],"mappings":"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","names":["fulcro.client.impl.data-fetch/optional","pred","cljs.spec.alpha/or-spec-impl","cljs.core/nil?","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/string?","cljs.core/vector?","cljs.core/symbol?","cljs.core/map?","cljs.core/any?","cljs.core/true?","cljs.core/false?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__57759","cljs.core/contains?","cljs.core/fn?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__57857","cljs.core/coll?","G__57870","G__58006","fulcro.client.impl.data-fetch/data-target","state","fulcro.client.impl.data-fetch/data-ident","fulcro.client.impl.data-fetch/data-query","fulcro.client.impl.data-fetch/data-field","fulcro.client.impl.data-fetch/data-uuid","fulcro.client.impl.data-fetch/data-marker","fulcro.client.impl.data-fetch/data-marker?","cljs.core/boolean","fulcro.client.impl.data-fetch/data-refresh","fulcro.client.impl.data-fetch/data-remote","fulcro.client.impl.data-fetch/data-query-key","ast","fulcro.client.primitives/query->ast","node","cljs.core/first","fulcro.client.impl.data-fetch/data-path","target","and__4120__auto__","cljs.core/not-empty","cljs.core/Keyword","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fulcro.util/ident?","fulcro.client.impl.data-fetch/data-params","fulcro.client.impl.data-fetch/full-query","items","cljs.core/vec","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","item","type","params","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","var_args","G__58127","fulcro.client.impl.data-fetch/set-ready!","js/Error","fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2","set-type","G__58135","fulcro.client.impl.data-fetch/set-loading!","fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2","rv","cljs.core/with-meta","G__58162","fulcro.client.impl.data-fetch/set-failed!","fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/data-state?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/ready?","is-kind?","fulcro.client.impl.data-fetch/loading?","fulcro.client.impl.data-fetch/failed?","fulcro.client.impl.data-fetch/is-direct-table-load?","load-marker","cljs.core/not","fulcro.client.impl.data-fetch/marker-table","fulcro.client.impl.data-fetch/-place-load-marker","state-map","marker","marker-id","legacy-marker?","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","current-val","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/assoc-in","fulcro.client.impl.data-fetch/-place-load-markers","items-to-load","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","i","fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$1","G__58200","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","fulcro.client.impl.data-fetch/earliest-load-time","load-markers","cljs.core/min","fulcro.history/max-tx-time","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/mark-parallel-loading!","remote-name","reconciler","fulcro.client.primitives/app-state","queued-items","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","is-eligible?","other-items-loading?","cljs.core/seq","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","remaining-items","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","loading?","history-atom","fulcro.client.primitives/get-history","ok","fulcro.client.impl.data-fetch/-loaded-callback","error","fulcro.client.impl.data-fetch/-error-callback","tx-time","cljs.core/empty?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","iter__4523__auto__","s__58220","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__58222","cljs.core/chunk-buffer","i__58221","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58219","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fulcro.client.primitives/reconciler?","G__58238","fulcro.client.impl.data-fetch/dedupe-by","keys-fn","rf","keys-seen","cljs.core/volatile!","result","input","input-keys","cljs.core/set","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","coll","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1","fulcro.client.impl.data-fetch/split-items-ready-to-load","items-ready-to-load","map__58242","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","item-keys","abort-id-conflict?","items-going?","active-abort-id","abort-id","or__4131__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","can-go-now?","p__58245","map__58246","current-keys","current-abort-id","items-to-load-now","acc","G__58249","clojure.set/union","cljs.core/reduced","items-to-defer","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/mark-loading","remote","vec__58256","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","all-items","items-for-other-remotes","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/valid-types","G__58301","fulcro.client.impl.data-fetch/make-data-state","fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__58306","map__58307","fulcro.client.impl.data-fetch/elide-ast-nodes","key","union-key","children","elision-predicate","union-elision?","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic","e58311","e__48124__auto__","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$3","c","p1__58303#","fulcro.client.impl.data-fetch/inject-query-params","p1__58313#","temp__5718__auto__","new-params","cljs.core/merge","p__58319","map__58320","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fulcro.client.impl.data-fetch/ready-state","ident","field","without","query","post-mutation","post-mutation-params","fallback","parallel","refresh","env","initialize","old-ast","G__58332","query-field","fulcro.util/join?","fulcro.util/join-key","query'","fulcro.client.primitives/ast->query","cljs.core/random-uuid","G__58337","fulcro.client.primitives/get-current-time","p__58342","map__58343","fulcro.client.impl.data-fetch/mark-ready","config","marker?","load-request","G__58349","fulcro.client.impl.data-fetch/-set-global-loading!","state-atom","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","fulcro.client.impl.data-fetch/replacement-target?","t","fulcro.client.impl.data-targeting/replacement-target?","fulcro.client.impl.data-fetch/prepend-target?","fulcro.client.impl.data-targeting/prepend-target?","fulcro.client.impl.data-fetch/append-target?","fulcro.client.impl.data-targeting/append-target?","fulcro.client.impl.data-fetch/multiple-targets?","fulcro.client.impl.data-targeting/multiple-targets?","fulcro.client.impl.data-fetch/special-target?","fulcro.client.impl.data-targeting/special-target?","fulcro.client.impl.data-fetch/process-target","fulcro.client.impl.data-targeting/process-target","fulcro.client.impl.data-fetch/relocate-targeted-results!","default-target","explicit-target","relocate?","fulcro.client.impl.data-fetch/-remove-marker","app-state","path","data","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","fulcro.client.impl.data-fetch/callback-env","original-env","map__58384","G__58393","fulcro.client.impl.data-fetch/-tick!","r","fulcro.client.impl.protocols/tick!","response","base-merge","initial-state","item-tree","fulcro.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic","loading-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","refresh-set","marked-response","fulcro.client.primitives/mark-missing","explicit-refresh","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","ran-mutations","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","remove-markers!","seq__58411","chunk__58412","count__58413","i__58414","c__4550__auto__","cljs.core/chunk-first","cljs.core/next","G__58431","G__58438","cljs.core/disj","to-refresh","run-post-mutations!","seq__58442","chunk__58443","count__58444","i__58445","mutation-symbol","cljs.core/reset!","map__58476","map__58488","cljs.core/meta","action","G__58477","G__58478","G__58479","G__58497","G__58498","G__58499","fulcro.client.mutations/mutate","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/into","fulcro.client.primitives.merge_BANG_.cljs$core$IFn$_invoke$arity$3","fulcro.client.primitives/force-root-render!","fulcro.client.util.force_render.cljs$core$IFn$_invoke$arity$2","ran-fallbacks","mark-errors","seq__58508","chunk__58509","count__58510","i__58511","G__58525","G__58542","run-fallbacks","seq__58546","chunk__58548","count__58549","i__58550","fallback-symbol","G__58582","G__58596","G__58586","G__58587","G__58588","G__58597","G__58598","G__58599","fulcro.client.impl.data-fetch/is-deferred-transaction?"],"sourcesContent":["(ns fulcro.client.impl.data-fetch\n  (:require [fulcro.client.primitives :as prim]\n            [fulcro.client.impl.data-targeting :as targeting]\n            [fulcro.util :as util]\n            [fulcro.client.util :refer [force-render]]\n            [clojure.walk :refer [prewalk]]\n            [clojure.set :as set]\n            [fulcro.logging :as log]\n            [fulcro.history :as hist]\n            [fulcro.client.mutations :as m]\n            [fulcro.client.impl.protocols :as p]\n            [clojure.spec.alpha :as s]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation for public api\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare -loaded-callback -error-callback)\n\n(defn optional [pred] (s/or :nothing nil? :value pred))\n(s/def ::type keyword?)\n(s/def ::uuid string?)\n(s/def ::target (optional vector?))\n(s/def ::field (optional keyword?))\n(s/def ::post-mutation (optional symbol?))\n(s/def ::post-mutation-params (optional map?))\n(s/def ::refresh (optional vector?))\n(s/def ::marker (s/or :reference any? :legacy true? :nothing (s/or :nil nil? :false false?)))\n(s/def ::parallel (optional boolean?))\n(s/def ::fallback (optional symbol?))\n(s/def ::original-env map?)\n(s/def ::load-marker (s/keys :req [::type ::uuid ::prim/query ::original-env ::hist/tx-time]\n                       :opt [::target ::prim/remote ::prim/ident ::field ::post-mutation-params ::post-mutation\n                             ::refresh ::marker ::parallel ::fallback :fulcro.client.network/abort-id]))\n\n(s/def ::on-load fn?)\n(s/def ::on-error fn?)\n(s/def ::load-descriptors (s/coll-of ::load-marker))\n(s/def ::payload (s/keys :req [::prim/query ::on-load ::on-error ::hist/history-atom ::hist/tx-time] :opt [::load-descriptors]))\n(s/def ::network-error any?)\n(s/def ::network-result (s/keys :opt [::load-descriptors ::network-error]))\n\n(defn data-target\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::target state))\n(defn data-ident\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::prim/ident state))\n(defn data-query\n  \"Get the query that will be sent to the server as a result of the given data state marker\"\n  [state]\n  (if (data-ident state)\n    [{(data-ident state) (::prim/query state)}]\n    (::prim/query state)))\n(defn data-field\n  \"Get the target field (if any) from the data state marker\"\n  [state] (::field state))\n(defn data-uuid\n  \"Get the UUID of the data fetch\"\n  [state] (::uuid state))\n(defn data-marker\n  \"Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\n  replacing the data in app state with a marker (DEPRECATED)\"\n  [state] (::marker state))\n(defn data-marker?\n  \"Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data.\"\n  [state] (boolean (::marker state)))\n(defn data-refresh\n  \"Get the list of query keywords that should be refreshed (re-rendered) when this load completes.\"\n  [state] (::refresh state))\n(defn data-remote\n  \"Get the remote that this marker is meant to talk to\"\n  [state] (::prim/remote state))\n(defn data-query-key\n  \"Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)\"\n  [state]\n  (let [ast  (prim/query->ast (-> state ::prim/query))\n        node (-> ast :children first)]\n    (:key node)))\n\n(defn data-path\n  \"Get the app-state database path of the target of the load that the given data state marker is trying to load.\"\n  [state]\n  (let [target (data-target state)]\n    (cond\n      (and (nil? (data-field state)) (vector? target) (not-empty target)) target\n      (and (vector? (data-ident state)) (keyword? (data-field state))) (conj (data-ident state) (data-field state))\n      (util/ident? (data-query-key state)) (data-query-key state)\n      :otherwise [(data-query-key state)])))\n\n(defn data-params\n  \"Get the parameters that the user wants to add to the first join/keyword of the data fetch query.\"\n  [state] (::params state))\n\n(defn full-query\n  \"Composes together the queries of a sequence of data states into a single query.\"\n  [items] (vec (mapcat (fn [item] (data-query item)) items)))\n\n;; Setters\n(letfn [(set-type [state type params]\n          (merge state {::type   type\n                        ::params params}))]\n  (defn set-ready!\n    \"Returns a state (based on the input state) that is in the 'ready' to load state.\"\n    ([state] (set-ready! state nil))\n    ([state params] (set-type state :ready params)))\n  (defn set-loading!\n    \"Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)\"\n    ([state] (set-loading! state nil))\n    ([state params] (let [rv (set-type state :loading params)]\n                      (with-meta rv {:state rv}))))\n  (defn set-failed!\n    \"Returns a marker (based on the input state) that is in the error state\"\n    ([state] (set-failed! state nil))\n    ([state params]\n     (set-type state :failed params))))\n\n; Built-in mutation for adding a remote query to the network requests.\n(defn data-state?\n  \"Test if the given bit of state is a data fetch state-tracking marker\"\n  [state] (and (map? state) (contains? state ::type)))\n\n(letfn [(is-kind? [state type]\n          (if (data-state? state)\n            (= type (::type state))\n            false))]\n  (defn ready?\n    \"Test if the given item is a data state marker that is in the ready state\"\n    [state] (is-kind? state :ready))\n  (defn loading?\n    \"Test if the given item is a data state marker in the loading state\"\n    [state] (is-kind? state :loading))\n  (defn failed?\n    \"Test if the given item is a data state marker in the failed state\"\n    [state] (is-kind? state :failed)))\n\n(defn is-direct-table-load? [load-marker]\n  (and\n    (not (data-field load-marker))\n    (util/ident? (data-query-key load-marker))))\n\n(def marker-table\n  :ui.fulcro.client.data-fetch.load-markers/by-id)\n\n(defn -place-load-marker [state-map marker]\n  (let [marker-id      (data-marker marker)\n        legacy-marker? (true? marker-id)]\n    (if legacy-marker?\n      (update-in state-map (data-path marker)\n        (fn [current-val]\n          (if (is-direct-table-load? marker)\n            (when (map? current-val) (assoc current-val :ui/fetch-state marker))\n            {:ui/fetch-state marker})))\n      (assoc-in state-map [marker-table marker-id] marker))))\n\n(defn -place-load-markers\n  \"Place load markers in the app state at their data paths so that UI rendering can see them.\"\n  [state-map items-to-load]\n  (reduce (fn [s item]\n            (let [i (set-loading! item)]\n              (cond-> (update s :fulcro/loads-in-progress (fnil conj #{}) (data-uuid i))\n                (data-marker? i) (-place-load-marker i))))\n    state-map items-to-load))\n\n(s/fdef -place-load-markers\n  :args (s/cat :state map? :items ::load-descriptors)\n  :ret map?)\n\n(defn earliest-load-time\n  \"Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\n  are no markers or none have a time.\"\n  [load-markers]\n  (reduce min hist/max-tx-time (map ::hist/tx-time load-markers)))\n\n(defn mark-parallel-loading!\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote-name reconciler]\n  (let [state                (prim/app-state reconciler)\n        queued-items         (get @state :fulcro/ready-to-load)\n        is-eligible?         (fn [item] (and (::parallel item) (= remote-name (data-remote item))))\n        other-items-loading? (boolean (seq (get @state :fulcro/loads-in-progress)))\n        items-to-load        (filter is-eligible? queued-items)\n        remaining-items      (filter (comp not is-eligible?) queued-items)\n        loading?             (or (boolean (seq items-to-load)) other-items-loading?)\n        history-atom         (prim/get-history reconciler)\n        ok                   (-loaded-callback reconciler)\n        error                (-error-callback reconciler)\n        tx-time              (earliest-load-time items-to-load)]\n    (when-not (empty? items-to-load)\n      (swap! state (fn [s] (-> s\n                             (-place-load-markers items-to-load)\n                             (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      (for [item items-to-load]\n        {::prim/query        (full-query [item])\n         ::prim/remote       remote-name\n         ::hist/tx-time      tx-time\n         ::hist/history-atom history-atom\n         ::on-load           ok\n         ::on-error          error\n         ::load-descriptors  [item]}))))\n\n(s/fdef mark-parallel-loading!\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::load-descriptors)\n\n(defn dedupe-by\n  \"Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.\"\n  ([keys-fn]                                                ;; transducer fn\n   (fn [rf]\n     (let [keys-seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (let [input-keys (set (keys-fn input))]\n            ;; if no keys seen, include input in the reduction\n            (if (empty? (set/intersection @keys-seen input-keys))\n              (do (vswap! keys-seen set/union input-keys)\n                  (rf result input))\n              result)))))))\n  ([keys-fn coll] (sequence (dedupe-by keys-fn) coll)))\n\n(defn split-items-ready-to-load\n  \"This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other.\n\n  The other potential collision is if a load includes an abort ID. In this case such a load should not be batched\n  with others because aborting it would take others down with it.\n\n  Thus, this function ensures such accidental collisions are not combined into a single network request.\n\n  This functions returns a list of the load items that can be batched (from the beginning, in order) and the\n  remainder of the items which must be deferred to another request.\"\n  [items-ready-to-load]\n  (let [item-keys          (fn [item]\n                             (->> (data-query item)\n                               prim/query->ast\n                               :children\n                               (map :dispatch-key)\n                               set))\n        abort-id-conflict? (fn [items-going? active-abort-id abort-id]\n                             (and items-going? (or abort-id active-abort-id) (not= active-abort-id abort-id)))\n        can-go-now?        (fn [{:keys [items current-keys current-abort-id]} item]\n                             (let [abort-id (:fulcro.client.network/abort-id item)]\n                               (and\n                                 (not (abort-id-conflict? (seq items) current-abort-id abort-id))\n                                 (empty? (set/intersection current-keys (item-keys item))))))\n        {items-to-load-now :items} (reduce\n                                     (fn [acc item]\n                                       (if (can-go-now? acc item)\n                                         (cond-> acc\n                                           (:fulcro.client.network/abort-id item) (assoc :current-abort-id (:fulcro.client.network/abort-id item))\n                                           :always (update :current-keys set/union (item-keys item))\n                                           :always (update :items conj item))\n                                         (reduced acc)))\n                                     {:current-keys #{} :current-abort-id nil :items []}\n                                     items-ready-to-load)\n        items-to-defer     (->> items-ready-to-load (drop (count items-to-load-now)) vec)]\n    [items-to-load-now items-to-defer]))\n\n(defn mark-loading\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote reconciler]\n  (let [state                   (prim/app-state reconciler)\n        is-eligible?            (fn [item] (= remote (data-remote item)))\n        all-items               (get @state :fulcro/ready-to-load)\n        items-ready-to-load     (filter is-eligible? all-items)\n        items-for-other-remotes (filter (comp not is-eligible?) all-items)\n        other-items-loading?    (boolean (seq (get @state :fulcro/loads-in-progress)))\n        [items-to-load-now items-to-defer] (split-items-ready-to-load items-ready-to-load)\n        remaining-items         (concat items-for-other-remotes items-to-defer)\n        loading?                (or (boolean (seq items-to-load-now)) other-items-loading?)\n        ; CAUTION: We use the earliest time of all items, so that we don't accidentally clear history for something we have not even sent.\n        tx-time                 (earliest-load-time all-items)]\n    (when-not (empty? items-to-load-now)\n      (swap! state (fn [s]\n                     (-> s\n                       (-place-load-markers items-to-load-now)\n                       (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      {::prim/query                    (full-query items-to-load-now)\n       ::hist/history-atom             (prim/get-history reconciler)\n       ::prim/remote                   remote\n       ::hist/tx-time                  tx-time\n       ::on-load                       (-loaded-callback reconciler)\n       ::on-error                      (-error-callback reconciler)\n       :fulcro.client.network/abort-id (first (keep :fulcro.client.network/abort-id items-to-load-now))\n       ::load-descriptors              items-to-load-now})))\n\n(s/fdef mark-loading\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::payload)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Testing API, used to write tests against specific data states\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; not-present represented by nil\n;; ok represented by data\n(def valid-types #{:ready :loading :failed})\n\n(defn make-data-state\n  \"This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.\"\n  ([type]\n   (make-data-state type {}))\n\n  ([type params]\n   (if (get valid-types type)\n     {::type type ::params params}\n     (throw (ex-info (str \"INVALID DATA STATE TYPE: \" type) {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers -- not intended for public use\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn elide-ast-nodes\n  \"Remove items from a query (AST) that have a key that returns true for the elision-predicate\"\n  [{:keys [key union-key children] :as ast} elision-predicate]\n  (let [union-elision? (elision-predicate union-key)]\n    (when-not (or union-elision? (elision-predicate key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key)))\n      (update ast :children (fn [c] (vec (keep #(elide-ast-nodes % elision-predicate) c)))))))\n\n(defn inject-query-params\n  \"Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  \"\n  [ast params]\n  (update-in ast [:children] #(map (fn [c] (if-let [new-params (get params (:dispatch-key c))]\n                                             (update c :params merge new-params)\n                                             c)) %)))\n\n(defn ready-state\n  \"Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging.\"\n  [{:keys [ident field params remote without query post-mutation post-mutation-params fallback parallel refresh marker\n           target env initialize abort-id]\n    :or   {remote :remote without #{} refresh [] marker true}}]\n  (assert (or field query) \"You must supply a query or a field/ident pair\")\n  (assert (or (not field) (and field (util/ident? ident))) \"Field requires ident\")\n  (let [old-ast     (prim/query->ast query)\n        ast         (cond-> old-ast\n                      (not-empty without) (elide-ast-nodes without)\n                      (and field params (not (contains? params field))) (inject-query-params {field params})\n                      params (inject-query-params params))\n        query-field (first query)\n        key         (if (util/join? query-field) (util/join-key query-field) query-field)\n        query'      (prim/ast->query ast)]\n    (assert (or (not field) (= field key)) \"Component fetch query does not match supplied field.\")\n    {::type                          :ready\n     ::uuid                          #?(:cljs (str (cljs.core/random-uuid))\n                                        :clj  (str (System/currentTimeMillis)))\n     ::target                        target\n     ::prim/remote                   remote\n     ::prim/ident                    ident                  ; only for component-targeted loads\n     ::field                         field                  ; for component-targeted load\n     ::prim/query                    query'                 ; query, relative to root of db OR component\n     ::post-mutation                 post-mutation\n     ::post-mutation-params          post-mutation-params\n     ::initialize                    initialize\n     ::refresh                       refresh\n     ::marker                        marker\n     ::parallel                      parallel\n     ::fallback                      fallback\n     ; stored on metadata so it doesn't interfere with serializability (this marker ends up in state)\n     ::original-env                  (with-meta {} env)\n     :fulcro.client.network/abort-id abort-id\n     ::hist/tx-time                  (if (some-> env :reconciler)\n                                       (prim/get-current-time (:reconciler env))\n                                       (do hist/max-tx-time))}))\n\n(defn mark-ready\n  \"Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API.\"\n  [{:keys [env] :as config}]\n  (let [state        (get env :state)\n        marker?      (not (identical? false (:marker config)))\n        load-request (ready-state (merge {:marker true :refresh [] :without #{} :env env} config))]\n    (swap! state (fn [s]\n                   (cond-> (update s :fulcro/ready-to-load (fnil conj []) load-request)\n                     marker? (-place-load-marker load-request))))))\n\n(defn -set-global-loading! [reconciler]\n  \"Sets the global :ui/loading-data to false if there are no loading fetch states in the entire app-state, otherwise sets to true.\"\n  (let [state-atom (prim/app-state reconciler)\n        loading?   (boolean (seq (get @state-atom :fulcro/loads-in-progress)))]\n    (swap! state-atom assoc :ui/loading-data loading?)))\n\n(defn replacement-target? [t] (targeting/replacement-target? t))\n(defn prepend-target? [t] (targeting/prepend-target? t))\n(defn append-target? [t] (targeting/append-target? t))\n(defn multiple-targets? [t] (targeting/multiple-targets? t))\n(defn special-target? [t] (targeting/special-target? t))\n\n(def process-target targeting/process-target)\n\n(defn relocate-targeted-results!\n  \"For items that are manually targeted, move them in app state from their result location to their target location.\"\n  [state-atom items]\n  (swap! state-atom\n    (fn [state-map]\n      (reduce (fn [state item]\n                (let [default-target  (data-query-key item)\n                      explicit-target (or (data-target item) [])\n                      relocate?       (and\n                                        (nil? (data-field item))\n                                        (not-empty explicit-target))]\n                  (if relocate?\n                    (process-target state default-target explicit-target)\n                    state))) state-map items))))\n\n(defn -remove-marker\n  \"Returns app-state without the load marker for the given item.\"\n  [app-state item]\n  (let [marker-id      (data-marker item)\n        legacy-marker? (true? marker-id)]\n    (if legacy-marker?\n      (let [path (data-path item)\n            data (get-in app-state path)]\n        (cond\n          (and (map? data) (= #{:ui/fetch-state} (set (keys data)))) (assoc-in app-state path nil) ; to-many (will become a vector)\n          (and (map? data) (contains? data :ui/fetch-state)) (update-in app-state path dissoc :ui/fetch-state)\n          :else (assoc-in app-state path nil)))\n      (update app-state marker-table dissoc marker-id))))\n\n(defn callback-env\n  \"Build a callback env for post mutations and fallbacks\"\n  [reconciler load-request original-env]\n  (let [state (prim/app-state reconciler)\n        {:keys [::target ::prim/remote ::prim/ident ::field ::prim/query ::post-mutation ::post-mutation-params ::refresh ::marker ::parallel ::fallback]} load-request]\n    (merge original-env\n      {:state state\n       :load-request\n              (cond-> {:target target :remote remote :marker marker :server-query query :parallel (boolean parallel)}\n                post-mutation (assoc :post-mutation post-mutation)\n                post-mutation-params (assoc :post-mutation-params post-mutation-params)\n                refresh (assoc :refresh refresh)\n                fallback (assoc :fallback fallback))})))\n\n(defn -tick! \"Ability to mock in tests\"\n  [r]\n  (p/tick! r))\n\n(defn -loaded-callback\n  \"Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\n\n  - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Triggering re-render for all data item refresh lists\n  - Removing the activity from history tracking\n  \"\n  [reconciler]\n  (fn [response items]\n    (let [query               (full-query items)\n          base-merge          (reduce (fn [initial-state item]\n                                        (if-let [item-tree (::initialize item)]\n                                          (merge initial-state item-tree)\n                                          initial-state)) {} items)\n          response            (util/deep-merge base-merge response)\n          loading-items       (into #{} (map set-loading! items))\n          refresh-set         (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          marked-response     (prim/mark-missing response query)\n          explicit-refresh    (into (vec refresh-set) (remove symbol?) (keys marked-response))\n          app-state           (prim/app-state reconciler)\n          ran-mutations       (atom false)\n          remove-markers!     (fn [] (doseq [item loading-items]\n                                       (swap! app-state (fn [s]\n                                                          (cond-> s\n                                                            :always (update :fulcro/loads-in-progress disj (data-uuid item))\n                                                            (data-marker? item) (-remove-marker item))))))\n          to-refresh          (atom (set explicit-refresh))\n          run-post-mutations! (fn [] (doseq [item loading-items]\n                                       (when-let [mutation-symbol (::post-mutation item)]\n                                         (reset! ran-mutations true)\n                                         (let [params       (or (::post-mutation-params item) {})\n                                               original-env (-> item ::original-env meta)\n                                               {:keys [action refresh]} (m/mutate (callback-env reconciler item original-env) mutation-symbol params)]\n                                           (when (seq refresh)\n                                             (swap! to-refresh into refresh))\n                                           (when action\n                                             (action))))))]\n      (remove-markers!)\n      (prim/merge! reconciler marked-response query)\n      (relocate-targeted-results! app-state loading-items)\n      (run-post-mutations!)\n      (-set-global-loading! reconciler)\n      (-tick! reconciler)\n      (if (contains? refresh-set :fulcro/force-root)\n        (prim/force-root-render! reconciler)\n        (force-render reconciler (vec @to-refresh))))))\n\n(defn -error-callback\n  \"Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:fulcro/server-error)\n  - Refreshes UI (from root if there were fallbacks)\n  \"\n  [reconciler]\n  (fn [error items]\n    (let [loading-items (into #{} (map set-loading! items))\n          app-state     (prim/app-state reconciler)\n          ; TODO: currently forcing root refresh, so these are not needed. Perhaps that should be optimized?\n          ;refresh-set   (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          ;to-refresh    (vec refresh-set)\n          ran-fallbacks (atom false)\n          mark-errors   (fn []\n                          (swap! app-state assoc :fulcro/server-error error)\n                          (doseq [item loading-items]\n                            (swap! app-state (fn [s]\n                                               (cond-> s\n                                                 (and (data-marker? item) (data-marker item)) (update-in [marker-table (data-marker item)] set-failed! error)\n                                                 (and (data-marker? item) (identical? true (data-marker item))) (update-in (conj (data-path item) :ui/fetch-state) set-failed! error)\n                                                 :always (update :fulcro/loads-in-progress disj (data-uuid item)))))))\n          run-fallbacks (fn [] (doseq [item loading-items]\n                                 (when-let [fallback-symbol (::fallback item)]\n                                   (let [original-env (-> item ::original-env meta)\n                                         env          (callback-env reconciler item original-env)]\n                                     (reset! ran-fallbacks true)\n                                     (some->\n                                       (m/mutate env fallback-symbol {:error error})\n                                       :action\n                                       (apply []))))))]\n      (mark-errors)\n      (run-fallbacks)\n      (-set-global-loading! reconciler)\n      (-tick! reconciler)\n      (prim/force-root-render! reconciler))))\n\n(defn is-deferred-transaction?\n  \"Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue.\"\n  [query]\n  (boolean (and query (vector? query) (= ::deferred-transaction (first query)))))\n"]}