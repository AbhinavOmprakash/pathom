{"version":3,"sources":["com/wsscode/pathom/book/app_types.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.app-types/make-root","Root","app-id","com.wsscode.pathom.book.app-types/ui_59536","this__52443__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x59551","this__51361__auto__","*reconciler*-orig-val__59566","fulcro.client.primitives/*reconciler*","*depth*-orig-val__59567","fulcro.client.primitives/*depth*","*shared*-orig-val__59568","fulcro.client.primitives/*shared*","*instrument*-orig-val__59569","fulcro.client.primitives/*instrument*","*parent*-orig-val__59570","fulcro.client.primitives/*parent*","*reconciler*-temp-val__59571","fulcro.client.primitives/get-reconciler","*depth*-temp-val__59572","fulcro.client.primitives/depth","*shared*-temp-val__59573","fulcro.client.primitives.shared","*instrument*-temp-val__59574","fulcro.client.primitives/instrument","*parent*-temp-val__59575","x59593","cljs.core/PROTOCOL_SENTINEL","x59609","this__52446__auto__","writer__52447__auto__","opt__52448__auto__","cljs.core/-write","_","params","fulcro.client.primitives/get-initial-state","fulcro.client.primitives.get_query","this","map__59584","cljs.core.apply","cljs.core/hash-map","cljs.core.get","root","fulcro.client.primitives/props","factory","fulcro.client.primitives.factory","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.book","js/com.wsscode.pathom.book.app-types","js/com.wsscode.pathom.book.app-types.apps","com.wsscode.pathom.book.app-types/apps","cljs.core.atom","js/com.wsscode.pathom.book.app-types.app-types","com.wsscode.pathom.book.app-types/app-types","com.wsscode.pathom.book.app-types/register-app","name","f","cljs.core.swap_BANG_","cljs.core/assoc","com.wsscode.pathom.book.app-types/update-apps","seq__59626","cljs.core/seq","cljs.core/deref","chunk__59627","count__59628","i__59629","vec__59650","cljs.core.nth","map__59653","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__59659","cljs.core/first","map__59662","cljs.core/next","id","node","cljs.core/update-in","fulcro.client/mount","com.wsscode.pathom.book.app-types/mount-app","temp__5718__auto__","app-factory","map__59669","cljs.core/random-uuid","app","G__59670","or__4131__auto__","fulcro.client.new_fulcro_client","com.wsscode.pathom.core/parser","com.wsscode.pathom.map-db/parser-config","cljs.core.assoc","fulcro.client/mutate","fulcro-css.css-injection/upsert-css","js/console.warn"],"sourcesContent":["(ns com.wsscode.pathom.book.app-types\n  (:require [fulcro.client.primitives :as fp]\n            [fulcro.client :as fulcro]\n            [fulcro-css.css-protocols :as css]\n            [fulcro-css.css-injection :as css-injection]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.map-db :as map-db]))\n\n(defn make-root [Root app-id]\n  (fp/ui\n    static fp/InitialAppState\n    (initial-state [_ params] {:fulcro.inspect.core/app-id app-id\n                               :ui/root (fp/get-initial-state Root params)})\n\n    static fp/IQuery\n    (query [_] [{:ui/root (fp/get-query Root)}])\n\n    static css/CSS\n    (local-rules [_] [])\n    (include-children [_] [Root])\n\n    Object\n    (render [this]\n      (let [{:ui/keys [root]} (fp/props this)\n            factory (fp/factory Root)]\n        (factory root)))))\n\n(defonce apps (atom {}))\n(defonce app-types (atom {}))\n\n(defn register-app [name f]\n  (swap! app-types assoc name f))\n\n(defn update-apps []\n  (doseq [[id {::keys [root node]}] @apps]\n    (swap! apps update-in [id ::app] fulcro/mount root node)\n    (.. node -classList (remove \"loader\"))))\n\n(defn mount-app [name node]\n  (if-let [app-factory (get @app-types name)]\n    (let [id  (random-uuid)\n          {::keys [root app]} (app-factory {::node node})\n          app (or app (fulcro/new-fulcro-client\n                        :parser\n                        (p/parser (-> map-db/parser-config\n                                      (assoc :mutate fulcro/mutate)))))]\n      (css-injection/upsert-css id {:component root})\n      (swap! apps assoc id {::app app ::root root ::node node}))\n    (js/console.warn \"App type\" name \"is not registered\")))\n"]}