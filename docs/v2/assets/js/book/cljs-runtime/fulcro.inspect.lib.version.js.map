{"version":3,"sources":["fulcro/inspect/lib/version.cljs"],"mappings":";;AAGA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AAAWC;AAAjB,AACE,AAACC,AAAYD;;AAEf,AAAA,AAAAE,AAAAC,AAAMU;;AAAN,AAAA,AAAAT,AAAAF;AAAAG,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAuBO;AAAvBT,AAAgCU;AAAhCL,AAAAP;AAAAQ,AAAA,AAAAL,AAAAI;AAAAE,AAAA,AAAAJ,AAAAG;AAAAA,AAAA,AAAAF,AAAAE;AAAAC,AAAwCI;AAAxCL,AAAiDM;AAAjD,AACE,AAAMC,AAAO,AAACC,AAAkBL,AAAOE;AAAvC,AACE,AACE,AAAK,AAAA,AAAOE;AAASA;;AADvB,AAEE,AAAA,AAAMJ;AAFR;;AAAA,AAGQ,AAAOC;AAAME;;;;;;;;;;AAEzB,AAAA,AAAMG,AAAepB;AAArB,AACE,AAAAqB,AAA+C,AAAA,AAACS,AAAuD9B;AAAvG,AAAA,AAAAqB;AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAUE;AAAV,AAAAD,AAAAD,AAAA,AAAA,AAAYG;AAAZ,AAAAF,AAAAD,AAAA,AAAA,AAAkBI;AAAlB,AAAAH,AAAAD,AAAA,AAAA,AAAwBK;AAAxB,AAAAJ,AAAAD,AAAA,AAAA,AAA8BM;AAA9B,AAAAL,AAAAD,AAAA,AAAA,AAAqCO;AAArC,AAAA,AACG,AAAC9B,AAAU0B,AAAO,AAAC1B,AAAU2B,AAAO,AAAC3B,AAAU4B,AAAO,AAAA,AAAA,AAAIC,AAAYA,AAAO,AAAA,AAAA,AAAIC;;AADpF;;;AAGF,AAAA,AAAME,AAASC,AAAEC;AAAjB,AACE,AAACpB,AACC,AAACO,AAAcY,AACf,AAACZ,AAAca;;AAEnB,AAAA,AAAMC,AAAMC;AAAZ,AAAkB,AAACC,AAAkBL,AAAQI;;AAE7C,AAAA,AAAME,AAASC,AAAMH;AAArB,AACE,AAACI,AAAqBD,AAAMP,AAAQI","names":["fulcro.inspect.lib.version/last-inspect-version","fulcro.inspect.lib.version/parse-int","s","js/parseInt","p__52031","p__52032","vec__52035","seq__52036","cljs.core/seq","first__52037","cljs.core/first","cljs.core/next","vec__52038","seq__52039","first__52040","fulcro.inspect.lib.version/vector-compare","value1","rest1","value2","rest2","result","cljs.core/compare","fulcro.inspect.lib.version/parse-version","temp__5718__auto__","vec__52045","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","major","minor","patch","suffix","snapshot","cljs.core/re-find","fulcro.inspect.lib.version/compare","a","b","fulcro.inspect.lib.version/sort","coll","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.lib.version/sort-by","keyfn","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns fulcro.inspect.lib.version\n  (:refer-clojure :exclude [compare sort sort-by]))\n\n(def last-inspect-version \"2.2.5\")\n\n(defn parse-int [s]\n  (js/parseInt s))\n\n(defn vector-compare [[value1 & rest1] [value2 & rest2]]\n  (let [result (cljs.core/compare value1 value2)]\n    (cond\n      (not (zero? result)) result\n      (nil? value1) 0\n      :else (recur rest1 rest2))))\n\n(defn parse-version [s]\n  (if-let [[_ major minor patch suffix snapshot] (re-find #\"(\\d+)\\.(\\d+)\\.(\\d+)(?:-(\\w+))?(-SNAPSHOT)?$\" s)]\n    [(parse-int major) (parse-int minor) (parse-int patch) (if suffix 0 1) suffix (if snapshot 0 1)]))\n\n(defn compare [a b]\n  (vector-compare\n    (parse-version a)\n    (parse-version b)))\n\n(defn sort [coll] (clojure.core/sort compare coll))\n\n(defn sort-by [keyfn coll]\n  (clojure.core/sort-by keyfn compare coll))\n"]}