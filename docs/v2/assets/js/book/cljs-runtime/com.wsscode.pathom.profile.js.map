{"version":3,"sources":["com/wsscode/pathom/profile.cljc"],"mappings":"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","names":["com.wsscode.pathom.profile/append-at","cur","v","cljs.core/map?","cljs.core.assoc","com.wsscode.pathom.profile/current-time-ms","js/Date","com.wsscode.pathom.profile/profile-plugin","parser","env","tx","G__87798","G__87799","cljs.core.atom","reader","p__87805","map__87806","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","profile*","path","cljs.core/deref","cljs.core._EQ_","com.wsscode.pathom.core/key-dispatch","start-time","res__53554__auto__","com.wsscode.async.async-cljs/chan?","c__47946__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__47947__auto__","switch__47663__auto__","state_87842","state_val_87843","statearr-87851","inst_87840","cljs.core.async.impl.ioc-helpers/return-chan","inst_87814","statearr-87858","cljs.core.async.impl.ioc-helpers/process-exception","_","cljs.core.async.impl.ioc-helpers/add-exception-frame","cljs.core.async.impl.ioc-helpers/take!","inst_87827","inst_87828","com.wsscode.async.async-cljs/throw-err","statearr-87862","statearr-87864","inst_87838","statearr-87871","statearr-87873","inst_87829","statearr-87885","statearr-87889","inst_87834","inst_87835","inst_87836","statearr-87915","statearr-87952","state-machine__47664__auto__","ret-value__47665__auto__","result__47666__auto__","cljs.core/keyword-identical?","e87965","js/Object","ex__47667__auto__","statearr-87978","state__47948__auto__","statearr-87982","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","res","e87992","cljs.core.swap_BANG_","cljs.core/update-in","mutate","p__87998","map__88000","k","params","out","G__88011","cljs.core.update","action","cljs.core/assoc","com.wsscode.pathom.profile/node-name","x","cljs.core/vector?","clojure.string.join","cljs.core.map","com.wsscode.pathom.profile/node-value","or__4131__auto__","cljs.core/+","cljs.core/vals","com.wsscode.pathom.profile/profile->nvc*","m","cljs.core.into","cljs.core.comp","p1__88032#","cljs.core.remove","cljs.core/first","p__88039","vec__88041","cljs.core.nth","G__88046","com.wsscode.pathom.profile/profile->nvc","data","total","com.wsscode.pathom.profile/profile->flame-graph"],"sourcesContent":["(ns com.wsscode.pathom.profile\n  (:require\n    [clojure.string :as str]\n    [#?(:clj  com.wsscode.async.async-clj\n        :cljs com.wsscode.async.async-cljs) :refer [let-chan]]\n    [com.wsscode.pathom.core :as p]))\n\n(defn- append-at [cur v]\n  (cond\n    (map? cur)\n    (assoc cur ::self v)\n\n    :else\n    v))\n\n(defn current-time-ms []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (.getTime (js/Date.))))\n\n(def profile-plugin\n  {::p/wrap-parser\n   (fn profile-plugin-wrap-parser [parser]\n     (fn profile-plugin-wrap-parser-internal [env tx]\n       (parser (assoc env ::profile* (atom {})) tx)))\n\n   ::p/wrap-read\n   (fn profile-plugin-wrap-read [reader]\n     (fn profile-plugin-wrap-read-internal\n       [{::keys [profile*] ::p/keys [path] :as env}]\n       (if (= ::profile (p/key-dispatch env))\n         @profile*\n         (let [start-time (current-time-ms)]\n           (let-chan [res (reader env)]\n             (try\n               (swap! profile* update-in path append-at\n                 (- (current-time-ms) start-time))\n               (catch #?(:clj Throwable :cljs :default) _))\n             res)))))\n\n   ::p/wrap-mutate\n   (fn profile-plugin-wrap-mutate [mutate]\n     (fn profile-plugin-wrap-mutate-internal\n       [{::keys [profile*] :as env} k params]\n       (let [out (mutate env k params)]\n         (cond-> out\n           (:action out)\n           (update :action\n             (fn [action]\n               (fn []\n                 (let [start-time (current-time-ms)\n                       res        (action)]\n                   (swap! profile* assoc k (- (current-time-ms) start-time))\n                   res))))))))})\n\n;; Helper computing functions\n\n(defn node-name [x]\n  (cond\n    (vector? x) (str/join \"_\" (map node-name x))\n    :else (str x)))\n\n(defn node-value [x]\n  (if (map? x)\n    (or (::self x) (apply + (map node-value (vals x))))\n    x))\n\n;; Flame graph conversion\n\n(defn profile->nvc* [m]\n  (->> m\n       (into [] (comp (remove #(= ::self (first %)))\n                      (map (fn [[k v]]\n                             (cond-> {:name (node-name k) :value (node-value v)}\n                               (map? v) (assoc :children (profile->nvc* v)))))))))\n\n(defn profile->nvc\n  \"Convert data into format of maps containg the keys:\n    name: the current attribute name\n    value: the total time spent on the node + children\n    children: the children elements (recursive)\n\n   This for is suitable for some d3 flamegraph plugins on the browser\"\n  [data]\n  (let [total (apply + (map node-value (vals data)))]\n    {:name     \"Root\"\n     :value    total\n     :children (profile->nvc* data)}))\n\n;; DEPRECATED\n\n; old name, kept for compatibility\n(def profile->flame-graph profile->nvc)\n"]}