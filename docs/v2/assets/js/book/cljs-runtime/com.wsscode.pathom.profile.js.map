{"version":3,"sources":["com/wsscode/pathom/profile.cljc"],"mappings":"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","names":["com.wsscode.pathom.profile/append-at","cur","v","cljs.core/map?","cljs.core.assoc","com.wsscode.pathom.profile/current-time-ms","js/Date","com.wsscode.pathom.profile/profile-plugin","parser","env","tx","G__59178","G__59179","cljs.core.atom","reader","p__59181","map__59182","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","profile*","path","cljs.core/deref","cljs.core._EQ_","com.wsscode.pathom.core/key-dispatch","start-time","res__54030__auto__","com.wsscode.async.async-cljs/chan?","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_59223","state_val_59224","_","statearr-59231","cljs.core/cons","inst_59213","inst_59214","inst_59215","statearr-59239","cljs.core/rest","statearr-59241","statearr-59242","inst_59194","statearr-59244","inst_59203","inst_59204","com.wsscode.async.async-cljs/throw-err","statearr-59246","statearr-59248","inst_59221","cljs.core.async.impl.ioc-helpers/return-chan","statearr-59254","cljs.core.async.impl.ioc-helpers/take!","inst_59206","statearr-59261","statearr-59263","statearr-59267","ex59251","statearr-59268","statearr-59269","statearr-59276","ex59259","statearr-59277","statearr-59288","inst_59218","statearr-59297","statearr-59317","statearr-59323","statearr-59330","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e59340","statearr-59341","cljs.core/seq","statearr-59362","cljs.core/first","state__48841__auto__","statearr-59381","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","res","e59389","cljs.core.swap_BANG_","cljs.core/update-in","mutate","p__59402","map__59403","k","params","out","G__59411","cljs.core.update","action","cljs.core/assoc","com.wsscode.pathom.profile/node-name","x","cljs.core/vector?","clojure.string.join","cljs.core.map","com.wsscode.pathom.profile/node-value","or__4131__auto__","cljs.core/+","cljs.core/vals","com.wsscode.pathom.profile/profile->nvc*","m","cljs.core.into","cljs.core.comp","p1__59439#","cljs.core.remove","p__59447","vec__59448","cljs.core.nth","G__59452","com.wsscode.pathom.profile/profile->nvc","data","total","com.wsscode.pathom.profile/profile->flame-graph"],"sourcesContent":["(ns com.wsscode.pathom.profile\n  (:require\n    [clojure.string :as str]\n    [#?(:clj  com.wsscode.async.async-clj\n        :cljs com.wsscode.async.async-cljs) :refer [let-chan]]\n    [com.wsscode.pathom.core :as p]))\n\n(defn- append-at [cur v]\n  (cond\n    (map? cur)\n    (assoc cur ::self v)\n\n    :else\n    v))\n\n(defn current-time-ms []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (.getTime (js/Date.))))\n\n(def profile-plugin\n  {::p/wrap-parser\n   (fn profile-plugin-wrap-parser [parser]\n     (fn profile-plugin-wrap-parser-internal [env tx]\n       (parser (assoc env ::profile* (atom {})) tx)))\n\n   ::p/wrap-read\n   (fn profile-plugin-wrap-read [reader]\n     (fn profile-plugin-wrap-read-internal\n       [{::keys [profile*] ::p/keys [path] :as env}]\n       (if (= ::profile (p/key-dispatch env))\n         @profile*\n         (let [start-time (current-time-ms)]\n           (let-chan [res (reader env)]\n             (try\n               (swap! profile* update-in path append-at\n                 (- (current-time-ms) start-time))\n               (catch #?(:clj Throwable :cljs :default) _))\n             res)))))\n\n   ::p/wrap-mutate\n   (fn profile-plugin-wrap-mutate [mutate]\n     (fn profile-plugin-wrap-mutate-internal\n       [{::keys [profile*] :as env} k params]\n       (let [out (mutate env k params)]\n         (cond-> out\n           (:action out)\n           (update :action\n             (fn [action]\n               (fn []\n                 (let [start-time (current-time-ms)\n                       res        (action)]\n                   (swap! profile* assoc k (- (current-time-ms) start-time))\n                   res))))))))})\n\n;; Helper computing functions\n\n(defn node-name [x]\n  (cond\n    (vector? x) (str/join \"_\" (map node-name x))\n    :else (str x)))\n\n(defn node-value [x]\n  (if (map? x)\n    (or (::self x) (apply + (map node-value (vals x))))\n    x))\n\n;; Flame graph conversion\n\n(defn profile->nvc* [m]\n  (->> m\n       (into [] (comp (remove #(= ::self (first %)))\n                      (map (fn [[k v]]\n                             (cond-> {:name (node-name k) :value (node-value v)}\n                               (map? v) (assoc :children (profile->nvc* v)))))))))\n\n(defn profile->nvc\n  \"Convert data into format of maps containg the keys:\n    name: the current attribute name\n    value: the total time spent on the node + children\n    children: the children elements (recursive)\n\n   This for is suitable for some d3 flamegraph plugins on the browser\"\n  [data]\n  (let [total (apply + (map node-value (vals data)))]\n    {:name     \"Root\"\n     :value    total\n     :children (profile->nvc* data)}))\n\n;; DEPRECATED\n\n; old name, kept for compatibility\n(def profile->flame-graph profile->nvc)\n"]}