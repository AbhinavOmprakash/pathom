{"version":3,"sources":["fulcro/inspect/lib/misc.cljs"],"mappings":";;AAEA,AAAA,AAAMA,AAAkBC,AAAKC,AAAGC,AAAIC;AAApC,AACE,AAAAC,AACUH,AACA,AAACU,AAAMT,AAAIC,AACX,AAAA,AAACS,AAAiB,AAAA,AAACC,AAAKC,AAASZ;AAH3CE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA4BM;AAA5B,AAAAF,AAAAJ,AAAA,AAAeK;AAAf,AAIE,AAAI,AAAG,AAACM,AAAMN,AAAST;AACjBU,AACA,AAACM,AAAO,AAACC,AAAMR,AACf,AAAA,AAAA,AAACG;AAADM;AAAA,AAAmB,AAACC,AAAI,AAAAD,AAACE;;;;AAC7BV","names":["fulcro.inspect.lib.misc/fixed-size-assoc","size","db","key","value","map__60013","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","history","db'","cljs.core.assoc","cljs.core.update","cljs.core.fnil","cljs.core/conj","cljs.core/count","cljs.core.dissoc","cljs.core/first","p1__60012#","cljs.core/vec","cljs.core/next"],"sourcesContent":["(ns fulcro.inspect.lib.misc)\n\n(defn fixed-size-assoc [size db key value]\n  (let [{::keys [history] :as db'}\n        (-> db\n            (assoc key value)\n            (update ::history (fnil conj []) key))]\n    (if (> (count history) size)\n      (-> db'\n          (dissoc (first history))\n          (update ::history #(vec (next %))))\n      db')))\n"]}