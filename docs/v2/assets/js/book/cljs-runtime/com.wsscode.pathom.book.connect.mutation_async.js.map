{"version":3,"sources":["com/wsscode/pathom/book/connect/mutation_async.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.connect.mutation-async/adapt-user","user","cljs.core.into","cljs.core.map","p__72919","vec__72932","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","cljs.core.dissoc","cljs.core.assoc","com.wsscode.pathom.connect/mutation","p__72983","map__72985","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.book.connect.mutation-async/user-create","db","c__45808__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45809__auto__","switch__45525__auto__","state_73036","state_val_73037","cljs.core.async.impl.ioc-helpers/take!","inst_72996","inst_72997","com.wsscode.common.async-cljs/throw-err","inst_73001","inst_73002","inst_73003","cljs.core/PersistentHashMap","inst_73005","cljs.core/PersistentVector","inst_73006","inst_73007","inst_73008","inst_73012","inst_73013","js/Date","inst_73014","inst_73015","inst_73016","inst_73017","inst_73019","inst_73020","inst_73023","inst_73025","inst_73026","inst_73028","inst_73030","inst_73031","inst_73032","cljs.core.async.impl.ioc-helpers/return-chan","statearr-73065","state-machine__45526__auto__","ret-value__45527__auto__","result__45528__auto__","cljs.core/keyword-identical?","e73067","js/Object","ex__45529__auto__","statearr-73068","cljs.core.async.impl.ioc-helpers/process-exception","state__45810__auto__","statearr-73073","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/select-keys","cljs.core.merge","com.wsscode.pathom.book.util.indexeddb/create!","com.wsscode.pathom.connect/resolver","G__73079","p__73083","p__73084","map__73085","map__73086","com.wsscode.pathom.book.connect.mutation-async/user-by-id","id","state_73110","state_val_73112","inst_73099","inst_73100","inst_73101","inst_73102","inst_73103","inst_73104","inst_73106","inst_73107","inst_73108","statearr-73115","e73116","statearr-73117","statearr-73119","com.wsscode.pathom.book.util.indexeddb/read-object","G__73121","p__73122","map__73123","com.wsscode.pathom.book.connect.mutation-async/all-users","_","state_73144","state_val_73145","inst_73128","inst_73129","inst_73130","inst_73131","inst_73132","inst_73133","inst_73134","inst_73135","inst_73136","statearr-73148","inst_73138","inst_73139","inst_73140","inst_73141","inst_73142","statearr-73150","e73152","statearr-73154","statearr-73155","com.wsscode.pathom.book.util.indexeddb/scan-store","cljs.core.async/into","cljs.core.mapv","com.wsscode.pathom.book.connect.mutation-async/app-registry","com.wsscode.pathom.book.connect.mutation-async/db-settings","com.wsscode.pathom.book.connect.mutation-async/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.book.util.indexeddb/setup-db","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.mutation-async\n  (:require [cljs.core.async :as async :refer [go]]\n            [com.wsscode.common.async-cljs :refer [go-catch <!p <?]]\n            [com.wsscode.pathom.book.util.indexeddb :as db]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]))\n\n(defn adapt-user [user]\n  (-> (into {} (map (fn [[k v]] [(keyword \"user\" (name k)) v])) (dissoc user ::db/key))\n      (assoc :user/id (::db/key user))))\n\n(pc/defmutation user-create [{::keys [db]} user]\n  {::pc/sym    'user/create\n   ::pc/params [:user/name :user/email]\n   ::pc/output [:user/id]}\n  (go\n    (let [db      (<? db)\n          user-id (-> user\n                      (select-keys [:user/name :user/email])\n                      (merge {:user/created-at (js/Date.)})\n                      (->> (db/create! {::db/db db ::db/store-name \"users\"}))\n                      <?)]\n      {:user/id       user-id\n       :app/id-remaps {(:user/id user) user-id}})))\n\n(pc/defresolver user-by-id [{::keys [db]} {:keys [user/id]}]\n  {::pc/input  #{:user/id}\n   ::pc/output [:user/id :user/name :user/email :user/created-at]}\n  (go\n    ; reading from indexeddb\n    (let [db (<? db)]\n      (-> (db/read-object {::db/db db ::db/store-name \"users\"} id) <?\n          adapt-user))))\n\n; let's make an access to all users\n(pc/defresolver all-users [{::keys [db]} _]\n  {::pc/output [{:user/all [:user/id :user/name :user/email :user/created-at]}]}\n  (go\n    (let [db (<? db)]\n      (->> (db/scan-store {::db/db db ::db/store-name \"users\"})\n           (async/into []) <?\n           (mapv adapt-user)\n           (hash-map :user/all)))))\n\n; list all our app resolvers and mutations\n(def app-registry [user-create user-by-id all-users])\n\n(def db-settings\n  {::db/db-name    \"connectAsyncDemo\"\n   ::db/migrations [{::db/stores {\"users\" {::db/keys    ::db/auto-increment\n                                           ::db/indexes {\"name\" {::db/unique false}}}}}]})\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/parallel-reader\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}\n                  ::pc/mutation-join-globals [:app/id-remaps]\n                  ::db                       (db/setup-db db-settings)}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n"]}