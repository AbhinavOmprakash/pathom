{"version":3,"sources":["com/wsscode/pathom/book/connect/mutation_async.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.connect.mutation-async/adapt-user","user","cljs.core.into","cljs.core.map","p__65109","vec__65118","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","cljs.core.dissoc","cljs.core.assoc","com.wsscode.pathom.connect/mutation","p__65200","map__65208","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.book.connect.mutation-async/user-create","db","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_65292","state_val_65293","cljs.core.async.impl.ioc-helpers/take!","inst_65238","inst_65239","com.wsscode.common.async-cljs/throw-err","inst_65240","inst_65241","inst_65242","cljs.core/PersistentHashMap","inst_65249","cljs.core/PersistentVector","inst_65251","inst_65252","inst_65253","inst_65257","inst_65261","js/Date","inst_65262","inst_65264","inst_65265","inst_65266","inst_65268","inst_65269","inst_65273","inst_65274","inst_65275","inst_65276","inst_65278","inst_65279","inst_65280","cljs.core.async.impl.ioc-helpers/return-chan","statearr-65345","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e65349","statearr-65351","cljs.core/seq","statearr-65352","cljs.core/first","state__48841__auto__","statearr-65373","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/select-keys","cljs.core.merge","com.wsscode.pathom.book.util.indexeddb/create!","com.wsscode.pathom.connect/resolver","G__65377","p__65380","p__65381","map__65383","map__65384","com.wsscode.pathom.book.connect.mutation-async/user-by-id","id","state_65417","state_val_65419","inst_65402","inst_65403","inst_65407","inst_65409","inst_65410","inst_65411","inst_65413","inst_65414","inst_65415","statearr-65433","e65435","statearr-65437","statearr-65438","statearr-65439","com.wsscode.pathom.book.util.indexeddb/read-object","G__65443","p__65446","map__65447","com.wsscode.pathom.book.connect.mutation-async/all-users","_","state_65466","state_val_65467","inst_65450","inst_65451","inst_65452","inst_65453","inst_65454","inst_65455","inst_65456","inst_65457","inst_65458","statearr-65470","inst_65460","inst_65461","inst_65462","inst_65463","inst_65464","statearr-65474","e65475","statearr-65476","statearr-65477","statearr-65479","com.wsscode.pathom.book.util.indexeddb/scan-store","cljs.core.async/into","cljs.core.mapv","com.wsscode.pathom.book.connect.mutation-async/app-registry","com.wsscode.pathom.book.connect.mutation-async/db-settings","com.wsscode.pathom.book.connect.mutation-async/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.book.util.indexeddb/setup-db","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.mutation-async\n  (:require [cljs.core.async :as async :refer [go]]\n            [com.wsscode.common.async-cljs :refer [go-catch <!p <?]]\n            [com.wsscode.pathom.book.util.indexeddb :as db]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]))\n\n(defn adapt-user [user]\n  (-> (into {} (map (fn [[k v]] [(keyword \"user\" (name k)) v])) (dissoc user ::db/key))\n      (assoc :user/id (::db/key user))))\n\n(pc/defmutation user-create [{::keys [db]} user]\n  {::pc/sym    'user/create\n   ::pc/params [:user/name :user/email]\n   ::pc/output [:user/id]}\n  (go\n    (let [db      (<? db)\n          user-id (-> user\n                      (select-keys [:user/name :user/email])\n                      (merge {:user/created-at (js/Date.)})\n                      (->> (db/create! {::db/db db ::db/store-name \"users\"}))\n                      <?)]\n      {:user/id       user-id\n       :app/id-remaps {(:user/id user) user-id}})))\n\n(pc/defresolver user-by-id [{::keys [db]} {:keys [user/id]}]\n  {::pc/input  #{:user/id}\n   ::pc/output [:user/id :user/name :user/email :user/created-at]}\n  (go\n    ; reading from indexeddb\n    (let [db (<? db)]\n      (-> (db/read-object {::db/db db ::db/store-name \"users\"} id) <?\n          adapt-user))))\n\n; let's make an access to all users\n(pc/defresolver all-users [{::keys [db]} _]\n  {::pc/output [{:user/all [:user/id :user/name :user/email :user/created-at]}]}\n  (go\n    (let [db (<? db)]\n      (->> (db/scan-store {::db/db db ::db/store-name \"users\"})\n           (async/into []) <?\n           (mapv adapt-user)\n           (hash-map :user/all)))))\n\n; list all our app resolvers and mutations\n(def app-registry [user-create user-by-id all-users])\n\n(def db-settings\n  {::db/db-name    \"connectAsyncDemo\"\n   ::db/migrations [{::db/stores {\"users\" {::db/keys    ::db/auto-increment\n                                           ::db/indexes {\"name\" {::db/unique false}}}}}]})\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/parallel-reader\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}\n                  ::pc/mutation-join-globals [:app/id-remaps]\n                  ::db                       (db/setup-db db-settings)}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n"]}