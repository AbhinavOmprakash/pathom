{"version":3,"sources":["com/wsscode/pathom/book/interactive_parser.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.interactive-parser/parsers","com.wsscode.pathom.book.async.intro/parser","com.wsscode.pathom.book.async.error-propagation/parser","com.wsscode.pathom.book.async.js-promises/parser","com.wsscode.pathom.book.core.parser-counter-example/parser","com.wsscode.pathom.book.core.parser-counter-nested-example/parser","com.wsscode.pathom.book.connect.batch/parser","com.wsscode.pathom.book.connect.batch2/parser","com.wsscode.pathom.book.connect.batch3/parser","com.wsscode.pathom.book.connect.batch-transform-auto-batch/parser","com.wsscode.pathom.book.connect.getting-started/parser","com.wsscode.pathom.book.connect.getting-started2/parser","com.wsscode.pathom.book.connect.mutations/parser","com.wsscode.pathom.book.connect.mutation-join/parser","com.wsscode.pathom.book.connect.mutation-join-globals/parser","com.wsscode.pathom.book.connect.mutation-context/parser","com.wsscode.pathom.book.connect.mutation-async/parser","com.wsscode.pathom.book.connect.parameters/parser","com.wsscode.pathom.book.connect.unions/parser","com.wsscode.pathom.book.core.join-env-update/parser","com.wsscode.pathom.book.intro.demo/parser","com.wsscode.pathom.book.tracing.demo/parser","com.wsscode.pathom.book.tracing.demo-parallel-reader/parser","com.wsscode.pathom.book.interactive-parser/expand-keywords","s","ns","clojure.string/replace","com.wsscode.pathom.book.interactive-parser/compact-keywords","js/RegExp","com.wsscode.pathom.book.interactive-parser/get-app-uuid","component","fulcro.client.primitives/get-reconciler","fulcro.client.primitives/app-state","cljs.core/deref","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.book","js/com.wsscode.pathom.book.interactive-parser","js/com.wsscode.pathom.book.interactive-parser.QueryEditorWrapper","this__53741__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x55150","this__52659__auto__","*reconciler*-orig-val__55153","fulcro.client.primitives/*reconciler*","*depth*-orig-val__55154","fulcro.client.primitives/*depth*","*shared*-orig-val__55155","fulcro.client.primitives/*shared*","*instrument*-orig-val__55156","fulcro.client.primitives/*instrument*","*parent*-orig-val__55157","fulcro.client.primitives/*parent*","*reconciler*-temp-val__55158","*depth*-temp-val__55159","fulcro.client.primitives/depth","*shared*-temp-val__55160","fulcro.client.primitives.shared","*instrument*-temp-val__55161","fulcro.client.primitives/instrument","*parent*-temp-val__55162","map__55165","fulcro.client.primitives/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","x55171","_","x55173","this__53744__auto__","writer__53745__auto__","opt__53746__auto__","cljs.core/-write","com.wsscode.pathom.book.interactive-parser/QueryEditorWrapper","_this","root","enable-trace?","query","fulcro.client.primitives/get-initial-state","com.wsscode.pathom.viz.query-editor/QueryEditor","cljs.core.assoc","fulcro.client.primitives.get_query","fulcro.client.localized_dom.div","G__55168","G__55169","com.wsscode.pathom.viz.query-editor/query-editor","com.wsscode.pathom.book.app-types/register-app","p__55179","map__55180","node","map__55183","parser-name","no-trace?","cljs.core/boolean","initial-query","parser","iparser","app-id","js/Error","fulcro.client.new_fulcro_client","com.wsscode.pathom.viz.query-editor/load-indexes","com.wsscode.pathom.viz.query-editor/remote-key","com.wsscode.pathom.fulcro.network/pathom-remote","com.wsscode.pathom.viz.query_editor.client_card_parser","run-query","env","input","c__48522__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48523__auto__","switch__48139__auto__","state_55204","state_val_55205","statearr-55208","statearr-55210","cljs.core/cons","inst_55192","p1__55177#","inst_55193","inst_55194","cljs.core.async.impl.ioc-helpers/take!","inst_55202","cljs.core.async.impl.ioc-helpers/return-chan","inst_55186","statearr-55215","statearr-55216","cljs.core/rest","ex55211","statearr-55217","statearr-55218","inst_55196","inst_55197","com.wsscode.common.async-cljs/throw-err","inst_55198","p1__55178#","inst_55199","statearr-55220","statearr-55221","statearr-55222","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e55223","statearr-55224","cljs.core/seq","statearr-55225","cljs.core/first","state__48524__auto__","statearr-55226","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.update"],"sourcesContent":["(ns com.wsscode.pathom.book.interactive-parser\n  (:require\n    [clojure.string :as str]\n    [com.wsscode.common.async-cljs :refer [go-catch <?]]\n    [com.wsscode.pathom.book.app-types :as app-types]\n    [com.wsscode.pathom.book.async.error-propagation]\n    [com.wsscode.pathom.book.async.intro]\n    [com.wsscode.pathom.book.async.js-promises]\n    [com.wsscode.pathom.book.connect.batch]\n    [com.wsscode.pathom.book.connect.batch-transform-auto-batch]\n    [com.wsscode.pathom.book.connect.batch2]\n    [com.wsscode.pathom.book.connect.batch3]\n    [com.wsscode.pathom.book.connect.getting-started]\n    [com.wsscode.pathom.book.connect.getting-started2]\n    [com.wsscode.pathom.book.connect.mutation-async]\n    [com.wsscode.pathom.book.connect.mutation-context]\n    [com.wsscode.pathom.book.connect.mutation-join]\n    [com.wsscode.pathom.book.connect.mutation-join-globals]\n    [com.wsscode.pathom.book.connect.mutations]\n    [com.wsscode.pathom.book.connect.parameters]\n    [com.wsscode.pathom.book.connect.unions]\n    [com.wsscode.pathom.book.core.join-env-update]\n    [com.wsscode.pathom.book.core.parser-counter-example]\n    [com.wsscode.pathom.book.core.parser-counter-nested-example]\n    [com.wsscode.pathom.book.intro.demo]\n    [com.wsscode.pathom.book.tracing.demo]\n    [com.wsscode.pathom.book.tracing.demo-parallel-reader]\n    [com.wsscode.pathom.fulcro.network :as network]\n    [com.wsscode.pathom.viz.query-editor :as pv.query-editor]\n    [fulcro.client :as fulcro]\n    [fulcro.client.localized-dom :as dom]\n    [fulcro.client.primitives :as fp]))\n\n(def parsers\n  {\"async.intro\"                   {::parser com.wsscode.pathom.book.async.intro/parser}\n   \"async.error-propagation\"       {::parser com.wsscode.pathom.book.async.error-propagation/parser}\n   \"async.js-promises\"             {::parser com.wsscode.pathom.book.async.js-promises/parser}\n   \"core.parser-counter\"           {::parser com.wsscode.pathom.book.core.parser-counter-example/parser}\n   \"core.parser-counter-nested\"    {::parser com.wsscode.pathom.book.core.parser-counter-nested-example/parser}\n   \"connect.batch\"                 {::parser com.wsscode.pathom.book.connect.batch/parser}\n   \"connect.batch2\"                {::parser com.wsscode.pathom.book.connect.batch2/parser}\n   \"connect.batch3\"                {::parser com.wsscode.pathom.book.connect.batch3/parser}\n   \"connect.transform-auto-batch\"  {::parser com.wsscode.pathom.book.connect.batch-transform-auto-batch/parser}\n   \"connect.getting-started\"       {::parser com.wsscode.pathom.book.connect.getting-started/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.getting-started\"}\n   \"connect.getting-started2\"      {::parser com.wsscode.pathom.book.connect.getting-started2/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.getting-started2\"}\n   \"connect.mutations\"             {::parser com.wsscode.pathom.book.connect.mutations/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.mutations\"}\n   \"connect.mutation-join\"         {::parser com.wsscode.pathom.book.connect.mutation-join/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.mutation-join\"}\n   \"connect.mutation-join-globals\" {::parser com.wsscode.pathom.book.connect.mutation-join-globals/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.mutation-join-globals\"}\n   \"connect.mutation-context\"      {::parser com.wsscode.pathom.book.connect.mutation-context/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.mutation-context\"}\n   \"connect.mutation-async\"        {::parser com.wsscode.pathom.book.connect.mutation-async/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.mutation-async\"}\n   \"connect.parameters\"            {::parser com.wsscode.pathom.book.connect.parameters/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.parameters\"}\n   \"connect.unions\"                {::parser com.wsscode.pathom.book.connect.unions/parser\n                                    ::ns     \"com.wsscode.pathom.book.connect.unions\"}\n   \"core.join-env\"                 {::parser com.wsscode.pathom.book.core.join-env-update/parser\n                                    ::ns     \"com.wsscode.pathom.book.core.join-env-update\"}\n   \"intro.demo\"                    {::parser com.wsscode.pathom.book.intro.demo/parser}\n   \"tracing.demo1\"                 {::parser com.wsscode.pathom.book.tracing.demo/parser\n                                    ::ns     \"com.wsscode.pathom.book.tracing.demo\"}\n   \"parallel-reader.demo\"          {::parser com.wsscode.pathom.book.tracing.demo-parallel-reader/parser\n                                    ::ns     \"com.wsscode.pathom.book.tracing.demo-parallel-reader\"}})\n\n(defn expand-keywords [s ns]\n  (if ns\n    (str/replace s #\"::(\\w+)\" (str \":\" ns \"/$1\"))\n    s))\n\n(defn compact-keywords [s ns]\n  (if ns\n    (str/replace s (js/RegExp (str \":\" ns \"\\\\/\")) \"::\")\n    s))\n\n(defn get-app-uuid [component]\n  (-> component (fp/get-reconciler) fp/app-state deref :fulcro.inspect.core/app-uuid))\n\n(fp/defsc QueryEditorWrapper\n  [_this {:ui/keys               [root]\n          ::pv.query-editor/keys [enable-trace?]}]\n  {:initial-state (fn [query]\n                    {:ui/root (-> (fp/get-initial-state pv.query-editor/QueryEditor {})\n                                  (assoc ::pv.query-editor/query query))})\n   :query         [::pv.query-editor/enable-trace?\n                   {:ui/root (fp/get-query pv.query-editor/QueryEditor)}]\n   :css           [[:.container {:height  \"500px\"\n                                 :display \"flex\"}]]\n   :css-include   [pv.query-editor/QueryEditor]}\n  (dom/div :.container\n    (pv.query-editor/query-editor root\n                                  {::pv.query-editor/default-trace-size 200\n                                   ::pv.query-editor/enable-trace?      enable-trace?\n                                   ::pv.query-editor/editor-props       {:force-index-update? true}})))\n\n(app-types/register-app \"interactive-parser\"\n  (fn [{::app-types/keys [node]}]\n    (let [parser-name   (.getAttribute node \"data-parser\")\n          no-trace?     (boolean (.getAttribute node \"data-no-trace\"))\n          initial-query (.-innerText node)\n\n          {::keys [parser ns] :as iparser} (get parsers parser-name)\n          app-id        (str \"query-editor-\" parser-name)]\n      (assert iparser (str \"parser \" parser-name \" not found\"))\n      {::app-types/app\n       (fulcro/new-fulcro-client\n         :initial-state (-> (fp/get-initial-state QueryEditorWrapper initial-query)\n                            (assoc :fulcro.inspect.core/app-id app-id\n                              ::pv.query-editor/enable-trace? (not no-trace?)))\n\n         :started-callback pv.query-editor/load-indexes\n\n         :networking {pv.query-editor/remote-key\n                      (network/pathom-remote\n                        (pv.query-editor/client-card-parser parser\n                                                            {::pv.query-editor/wrap-run-query\n                                                             (fn [run-query]\n                                                               (fn [env input]\n                                                                 (go-catch\n                                                                   (-> (run-query env (update input ::pv.query-editor/query #(expand-keywords % ns))) <?\n                                                                       (update ::pv.query-editor/result #(compact-keywords % ns))))))}))})\n\n       ::app-types/root\n       QueryEditorWrapper})))\n"]}