{
"version":3,
"file":"goog.async.throttle.js",
"lineCount":76,
"mappings":"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",
"sources":["goog/async/throttle.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the goog.async.Throttle class.\n *\n * @see ../demos/timers.html\n */\n\ngoog.provide('goog.Throttle');\ngoog.provide('goog.async.Throttle');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.Timer');\n\n\n\n/**\n * Throttle will perform an action that is passed in no more than once\n * per interval (specified in milliseconds). If it gets multiple signals\n * to perform the action while it is waiting, it will only perform the action\n * once at the end of the interval.\n * @param {function(this: T, ...?)} listener Function to callback when the\n *     action is triggered.\n * @param {number} interval Interval over which to throttle. The listener can\n *     only be called once per interval.\n * @param {T=} opt_handler Object in whose scope to call the listener.\n * @constructor\n * @struct\n * @extends {goog.Disposable}\n * @final\n * @template T\n */\ngoog.async.Throttle = function(listener, interval, opt_handler) {\n  goog.async.Throttle.base(this, 'constructor');\n\n  /**\n   * Function to callback\n   * @type {function(this: T, ...?)}\n   * @private\n   */\n  this.listener_ =\n      opt_handler != null ? goog.bind(listener, opt_handler) : listener;\n\n  /**\n   * Interval for the throttle time\n   * @type {number}\n   * @private\n   */\n  this.interval_ = interval;\n\n  /**\n   * Cached callback function invoked after the throttle timeout completes\n   * @type {Function}\n   * @private\n   */\n  this.callback_ = goog.bind(this.onTimer_, this);\n\n  /**\n   * The last arguments passed into `fire`.\n   * @private {!IArrayLike}\n   */\n  this.args_ = [];\n};\ngoog.inherits(goog.async.Throttle, goog.Disposable);\n\n\n\n/**\n * A deprecated alias.\n * @deprecated Use goog.async.Throttle instead.\n * @constructor\n * @final\n */\ngoog.Throttle = goog.async.Throttle;\n\n\n/**\n * Indicates that the action is pending and needs to be fired.\n * @type {boolean}\n * @private\n */\ngoog.async.Throttle.prototype.shouldFire_ = false;\n\n\n/**\n * Indicates the count of nested pauses currently in effect on the throttle.\n * When this count is not zero, fired actions will be postponed until the\n * throttle is resumed enough times to drop the pause count to zero.\n * @type {number}\n * @private\n */\ngoog.async.Throttle.prototype.pauseCount_ = 0;\n\n\n/**\n * Timer for scheduling the next callback\n * @type {?number}\n * @private\n */\ngoog.async.Throttle.prototype.timer_ = null;\n\n\n/**\n * Notifies the throttle that the action has happened. It will throttle the call\n * so that the callback is not called too often according to the interval\n * parameter passed to the constructor, passing the arguments from the last call\n * of this function into the throttled function.\n * @param {...?} var_args Arguments to pass on to the throttled function.\n */\ngoog.async.Throttle.prototype.fire = function(var_args) {\n  this.args_ = arguments;\n  if (!this.timer_ && !this.pauseCount_) {\n    this.doAction_();\n  } else {\n    this.shouldFire_ = true;\n  }\n};\n\n\n/**\n * Cancels any pending action callback. The throttle can be restarted by\n * calling {@link #fire}.\n */\ngoog.async.Throttle.prototype.stop = function() {\n  if (this.timer_) {\n    goog.Timer.clear(this.timer_);\n    this.timer_ = null;\n    this.shouldFire_ = false;\n    this.args_ = [];\n  }\n};\n\n\n/**\n * Pauses the throttle.  All pending and future action callbacks will be\n * delayed until the throttle is resumed.  Pauses can be nested.\n */\ngoog.async.Throttle.prototype.pause = function() {\n  this.pauseCount_++;\n};\n\n\n/**\n * Resumes the throttle.  If doing so drops the pausing count to zero, pending\n * action callbacks will be executed as soon as possible, but still no sooner\n * than an interval's delay after the previous call.  Future action callbacks\n * will be executed as normal.\n */\ngoog.async.Throttle.prototype.resume = function() {\n  this.pauseCount_--;\n  if (!this.pauseCount_ && this.shouldFire_ && !this.timer_) {\n    this.shouldFire_ = false;\n    this.doAction_();\n  }\n};\n\n\n/** @override */\ngoog.async.Throttle.prototype.disposeInternal = function() {\n  goog.async.Throttle.base(this, 'disposeInternal');\n  this.stop();\n};\n\n\n/**\n * Handler for the timer to fire the throttle\n * @private\n */\ngoog.async.Throttle.prototype.onTimer_ = function() {\n  this.timer_ = null;\n\n  if (this.shouldFire_ && !this.pauseCount_) {\n    this.shouldFire_ = false;\n    this.doAction_();\n  }\n};\n\n\n/**\n * Calls the callback\n * @private\n */\ngoog.async.Throttle.prototype.doAction_ = function() {\n  this.timer_ = goog.Timer.callOnce(this.callback_, this.interval_);\n  this.listener_.apply(null, this.args_);\n};\n"],
"names":["goog","provide","require","async","Throttle","goog.async.Throttle","listener","interval","opt_handler","base","listener_","bind","interval_","callback_","onTimer_","args_","inherits","Disposable","prototype","shouldFire_","pauseCount_","timer_","fire","goog.async.Throttle.prototype.fire","var_args","arguments","doAction_","stop","goog.async.Throttle.prototype.stop","Timer","clear","pause","goog.async.Throttle.prototype.pause","resume","goog.async.Throttle.prototype.resume","disposeInternal","goog.async.Throttle.prototype.disposeInternal","goog.async.Throttle.prototype.onTimer_","goog.async.Throttle.prototype.doAction_","callOnce","apply"]
}
