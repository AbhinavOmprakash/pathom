{"version":3,"sources":["fulcro/transit.cljc"],"mappings":";;;;;AAYG,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAASI,AAECE;;AAFV,AAAA,AAAA,AAEQA;AAFR,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAASF,AAGCG;;AAHV,AAAA,AAAA,AAGQD;AAHR,AAGa,AAAGC;;;AAHhB,AAAA,AAAA,AAAA,AAASH,AAIOE;;AAJhB,AAAA,AAAA,AAIcA;AAJd,AAAA;;;AAAA,AAAA,AAAA,AAASF;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI;AAAT,AAAA,AAAAD;;;AAASA,AAeT,AAAA,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEG,AAAA,AAACE;;;AAFJ,AAAA,AAAA,AAAMF,AAGFG;AAHJ,AAIG,AAAA,AAACC,AACC,AAAA,AAAA,AAACC,AAASF,AAAgBG,AAAQ,AAAAZ;;;AALvC,AAAA,AAAA,AAAMM;;AAAN,AAgBA,AAAA,AAAA,AAAAF,AAAMU;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMO;AAAN,AAEG,AAAA,AAACC;;;AAFJ,AAAA,AAAA,AAAMD,AAGFL;AAHJ,AAIG,AAAA,AAACO,AACC,AAAA,AAAA,AAAA,AAACL,AAASF,AAER,AAAKQ;AAAL,AAAS,AAACC,AAAcD;;;;AAP/B,AAAA,AAAA,AAAMH;;AAAN,AAqBH;;;AAAA,AAAMK,AAEHC;AAFH,AAOW,AAAA,AACE,AAAQ,AAACE,AAAQF;;AADnB;AAAA,AAAAC,AAGkBE;AAHlB,AAAA;;AAKX","names":["this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","fulcro.transit/TempIdHandler","fulcro.transit/->TempIdHandler","_","r","var_args","G__49448","fulcro.transit/writer","js/Error","fulcro.transit.writer.cljs$core$IFn$_invoke$arity$1","opts","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","fulcro.tempid/TempId","G__49464","fulcro.transit/reader","fulcro.transit.reader.cljs$core$IFn$_invoke$arity$1","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","id","fulcro.tempid.tempid.cljs$core$IFn$_invoke$arity$1","fulcro.transit/serializable?","v","e49465","fulcro.transit.writer.cljs$core$IFn$_invoke$arity$0","e"],"sourcesContent":["(ns fulcro.transit\n  #?(:clj\n     (:refer-clojure :exclude [ref]))\n  (:require [cognitect.transit :as t]\n    #?(:cljs [com.cognitect.transit :as ct])\n            [fulcro.tempid :as tempid #?@(:cljs [:refer [TempId]])])\n  #?(:clj\n     (:import [com.cognitect.transit\n               TransitFactory WriteHandler ReadHandler]\n              [fulcro.tempid TempId])))\n\n#?(:cljs\n   (deftype TempIdHandler []\n     Object\n     (tag [_ _] \"fulcro/tempid\")\n     (rep [_ r] (. r -id))\n     (stringRep [_ _] nil)))\n\n#?(:clj\n   (deftype TempIdHandler []\n     WriteHandler\n     (tag [_ _] \"fulcro/tempid\")\n     (rep [_ r] (. ^TempId r -id))\n     (stringRep [_ r] (. ^TempId r -id))\n     (getVerboseHandler [_] nil)))\n\n#?(:cljs\n   (defn writer\n     ([]\n      (writer {}))\n     ([opts]\n      (t/writer :json\n        (assoc-in opts [:handlers TempId] (TempIdHandler.))))))\n\n#?(:clj\n   (defn writer\n     ([out]\n      (writer out {}))\n     ([out opts]\n      (t/writer out :json\n        (assoc-in opts [:handlers TempId] (TempIdHandler.))))))\n\n#?(:cljs\n   (defn reader\n     ([]\n      (reader {}))\n     ([opts]\n      (t/reader :json\n        (assoc-in opts\n          [:handlers \"fulcro/tempid\"]\n          (fn [id] (tempid/tempid id)))))))\n\n#?(:clj\n   (defn reader\n     ([in]\n      (reader in {}))\n     ([in opts]\n      (t/reader in :json\n        (assoc-in opts\n          [:handlers \"fulcro/tempid\"]\n          (reify\n            ReadHandler\n            (fromRep [_ id] (TempId. id))))))))\n\n(defn serializable?\n  \"Checks to see that the value in question can be serialized by the default fulcro writer.\"\n  [v]\n  #?(:clj  (try\n             (.write (writer (java.io.ByteArrayOutputStream.)) v)\n             true\n             (catch Exception e false))\n     :cljs (try\n             (.write (writer) v)\n             true\n             (catch :default e false))))\n\n(comment\n  ;; cljs\n  (t/read (reader) (t/write (writer) (tempid/tempid)))\n\n  ;; clj\n  (import '[java.io ByteArrayOutputStream ByteArrayInputStream])\n\n  (def baos (ByteArrayOutputStream. 4096))\n  (def w (writer baos))\n  (t/write w (TempId. (java.util.UUID/randomUUID)))\n  (.toString baos)\n\n  (def in (ByteArrayInputStream. (.toByteArray baos)))\n  (def r (reader in))\n  (t/read r)\n  )\n"]}