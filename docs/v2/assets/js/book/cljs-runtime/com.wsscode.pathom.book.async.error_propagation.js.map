{"version":3,"sources":["com/wsscode/pathom/book/async/error_propagation.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","G__72850","com.wsscode.pathom.book.async.error-propagation/async-info","_","c__45808__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45809__auto__","switch__45525__auto__","state_72930","state_val_72931","statearr-72942","inst_72921","cljs.core.async.impl.ioc-helpers/return-chan","inst_72892","statearr-72957","cljs.core.async.impl.ioc-helpers/process-exception","cljs.core.async.impl.ioc-helpers/add-exception-frame","inst_72905","inst_72906","inst_72908","cljs.core.async.impl.ioc-helpers/take!","inst_72910","inst_72912","com.wsscode.common.async-cljs/throw-err","inst_72915","inst_72917","inst_72918","cljs.core/PersistentHashMap","statearr-72981","statearr-72982","statearr-72991","state-machine__45526__auto__","ret-value__45527__auto__","result__45528__auto__","cljs.core/keyword-identical?","e72994","js/Object","ex__45529__auto__","statearr-72999","state__45810__auto__","statearr-73029","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core/rand-int","G__73041","com.wsscode.pathom.book.async.error-propagation/async-error","state_73059","state_val_73060","statearr-73062","inst_73057","inst_73043","statearr-73064","inst_73047","inst_73048","inst_73049","inst_73051","inst_73052","inst_73053","inst_73054","inst_73055","statearr-73069","statearr-73072","statearr-73075","e73077","statearr-73080","statearr-73088","cljs.core.ex_info","G__73092","com.wsscode.pathom.book.async.error-propagation/foo","com.wsscode.pathom.book.async.error-propagation/register","com.wsscode.pathom.book.async.error-propagation/parser","com.wsscode.pathom.core/async-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/async-reader2","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.trace/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.async.error-propagation\n  (:require [cljs.core.async :as async]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.trace :as pt]))\n\n(pc/defresolver async-info [_ _]\n  {::pc/output [:async-info]}\n  (go-catch\n    (<? (async/timeout (+ 100 (rand-int 1000))))\n    {:async-info \"From async\"}))\n\n(pc/defresolver async-error [_ _]\n  {::pc/output [:async-error]}\n  ; go catch will catch any exception and return then as the channel value\n  (go-catch\n    ; <? macro will re-throw any exception that get read from the channel\n    (<? (async/timeout (+ 100 (rand-int 1000))))\n    (throw (ex-info \"Error!!\" {}))))\n\n(pc/defresolver foo [_ _]\n  {::pc/output [:foo]}\n  {:foo \"Regular\"})\n\n(def register [async-info async-error foo])\n\n(def parser\n  (p/async-parser {::p/env     {::p/reader [p/map-reader\n                                            pc/async-reader2]}\n                   ::p/plugins [(pc/connect-plugin {::pc/register register})\n                                p/error-handler-plugin\n                                pt/trace-plugin]}))\n"]}