{"version":3,"sources":["com/wsscode/pathom/book/async/error_propagation.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","G__65065","com.wsscode.pathom.book.async.error-propagation/async-info","_","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_65121","state_val_65122","statearr-65188","statearr-65210","cljs.core/cons","inst_65092","inst_65093","inst_65094","cljs.core.async.impl.ioc-helpers/take!","inst_65115","cljs.core.async.impl.ioc-helpers/return-chan","inst_65082","statearr-65250","statearr-65272","cljs.core/rest","ex65222","statearr-65282","statearr-65288","inst_65096","inst_65097","com.wsscode.common.async-cljs/throw-err","inst_65099","inst_65111","inst_65112","cljs.core/PersistentHashMap","statearr-65303","statearr-65308","statearr-65312","statearr-65326","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e65333","statearr-65335","cljs.core/seq","statearr-65337","cljs.core/first","state__48841__auto__","statearr-65342","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core/rand-int","G__65350","com.wsscode.pathom.book.async.error-propagation/async-error","state_65374","state_val_65375","statearr-65378","statearr-65382","inst_65360","inst_65361","inst_65362","inst_65371","inst_65354","statearr-65392","statearr-65397","ex65387","statearr-65404","statearr-65406","inst_65364","inst_65365","inst_65366","inst_65367","inst_65368","statearr-65420","statearr-65423","statearr-65424","statearr-65427","e65430","statearr-65431","statearr-65436","statearr-65440","cljs.core.ex_info","G__65442","com.wsscode.pathom.book.async.error-propagation/foo","com.wsscode.pathom.book.async.error-propagation/register","com.wsscode.pathom.book.async.error-propagation/parser","com.wsscode.pathom.core/async-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/async-reader2","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.trace/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.async.error-propagation\n  (:require [cljs.core.async :as async]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.trace :as pt]))\n\n(pc/defresolver async-info [_ _]\n  {::pc/output [:async-info]}\n  (go-catch\n    (<? (async/timeout (+ 100 (rand-int 1000))))\n    {:async-info \"From async\"}))\n\n(pc/defresolver async-error [_ _]\n  {::pc/output [:async-error]}\n  ; go catch will catch any exception and return then as the channel value\n  (go-catch\n    ; <? macro will re-throw any exception that get read from the channel\n    (<? (async/timeout (+ 100 (rand-int 1000))))\n    (throw (ex-info \"Error!!\" {}))))\n\n(pc/defresolver foo [_ _]\n  {::pc/output [:foo]}\n  {:foo \"Regular\"})\n\n(def register [async-info async-error foo])\n\n(def parser\n  (p/async-parser {::p/env     {::p/reader [p/map-reader\n                                            pc/async-reader2]}\n                   ::p/plugins [(pc/connect-plugin {::pc/register register})\n                                p/error-handler-plugin\n                                pt/trace-plugin]}))\n"]}