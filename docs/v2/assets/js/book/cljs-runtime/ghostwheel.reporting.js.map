{"version":3,"sources":["ghostwheel/reporting.cljc"],"mappings":"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","names":["ghostwheel.reporting/*all-tests-successful","cljs.core.atom","ghostwheel.reporting/wrap","cljs.core.partial","ghostwheel.logging/wrap-line","ghostwheel.reporting/inc-report-counter!","cljs.test/inc-report-counter!","ghostwheel.reporting/warning-style","ghostwheel.logging/ghostwheel-colors","ghostwheel.reporting/snippets","js/ghostwheel","js/ghostwheel.reporting","js/ghostwheel.reporting.report","method-table__4613__auto__","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get","fexpr__85334","cljs.core/MultiFn","cljs.core.symbol","ghostwheel.reporting/report","m","ghostwheel.logging.group","ghostwheel.logging/group-end","map__85345","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","fail","error","pass","test","warn","passed?","cljs.core._EQ_","warnings?","G__85353","color","label","or__4131__auto__","ghostwheel.logging.log","cljs.core.dorun","cljs.core.repeatedly","map__85366","fn-name","fspec","spec-checks","check-coverage","marked-unsafe","report-output","cljs.core/not","ghostwheel.reporting/explain-problem-str","failure-type","problem","map__85387","pred","val","in","path","via","G__85392","cljs.core/Keyword","js/Error","cljs.core.into","cljs.core.not_EQ_","cljs.core/seq","ghostwheel.reporting/issue-msg","ghostwheel.reporting/report-unexpected-side-effects","message","map__85404","found-fx","ghostwheel.logging/log-bold","cljs.core.map","p__85408","vec__85410","cljs.core.nth","type","form","details","cljs.core/vec","cljs.core.concat","ghostwheel.logging/log","cljs.core.doall","cljs.core/name","ghostwheel.reporting/report-unexpected-safety","safe-name","clojure.string/replace","p__85427","map__85428","ghostwheel.reporting/report-spec-check","seq__85433","chunk__85437","count__85438","i__85439","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","check","test-ret","spec-error","data","msg","e85509","e85537","js/Object","_","args","cljs.core/cons","cljs.core/with-meta","clojure.string/split-lines","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__85519","cljs.core/*print-newline*","*print-fn*-orig-val__85520","cljs.core/*print-fn*","*print-newline*-temp-val__85521","*print-fn*-temp-val__85522","x__4662__auto__","*print-newline*-orig-val__85555","*print-fn*-orig-val__85556","*print-newline*-temp-val__85557","*print-fn*-temp-val__85558","expound.alpha/custom-printer","ghostwheel.logging/*report-output*","ghostwheel.logging.group_collapsed","map__85568","failure","summary","G__85577","start-group","ghostwheel.logging/group","G__85582","G__85583","G__85588","ghostwheel.logging.DBG","p1__85599#","p2__85600#","cljs.core.swap_BANG_","and__4120__auto__","cljs.test/successful?"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc ghostwheel.reporting\n  (:require [clojure.spec.alpha :as s]\n            [clojure.spec.test.alpha :as st]\n            [clojure.test :as t]\n            [expound.alpha :as expound]\n            [clojure.string :as string]\n            [ghostwheel.logging :as l\n             :refer [log log-bold group group-collapsed group-end DBG]]))\n\n\n(def *all-tests-successful (atom true))\n\n\n(def wrap (partial l/wrap-line 80))\n\n\n(def inc-report-counter! #?(:clj  t/inc-report-counter\n                            :cljs t/inc-report-counter!))\n\n(def warning-style {::l/background (:orange0 l/ghostwheel-colors)})\n\n\n(def snippets\n  {::incomplete-coverage \" => Test coverage incomplete:\"\n   ::no-gen-testing      \" => No generative testing performed\"})\n\n\n(defmulti ^:dynamic report :type)\n\n\n(defmethod report :begin-test-ns [m]\n  (group (str \"Checking \" (:ns m) \" ...\")\n         {::l/background (:base01 l/ghostwheel-colors)}))\n\n\n(defmethod report :end-test-ns [m]\n  (group-end))\n\n\n(defmethod report :summary [m]\n  (let [{:keys [fail error pass test warn]} m\n        passed?   (= pass test)\n        warnings? (some-> warn (> 0))\n        color     (cond\n                    (= test 0) (:black l/ghostwheel-colors)\n                    passed? (:green l/ghostwheel-colors)\n                    :else (:red l/ghostwheel-colors))\n        label     (cond\n                    (= test 0) \"No active tests found\"\n                    passed? (str \"Passed all \" test \" checks\")\n                    :else (str \"Failed \" fail \" of \" test \" checks\"\n                               (when (> error 0)\n                                 (str \"; \" error \" test error(s)\"))))]\n    (do\n      (group-end)\n      (when (or (not passed?) warnings?)\n        (log))\n      (log label {::l/background color})\n      (when warnings?\n        (log (str warn \" warning(s)\")\n             {::l/background (:orange0 l/ghostwheel-colors)}))\n      ;; Might be overkill, but we want to make sure we reset the group nesting\n      ;; in DevTools if anything should blow up above\n      (dorun (repeatedly 5 l/group-end)))))\n\n\n(defmethod report :pass [m]\n  (let [{:keys [::fn-name ::fspec ::spec-checks ::check-coverage\n                ::marked-unsafe ::report-output]} (:message m)]\n    (inc-report-counter! :pass)\n    ;; REVIEW : We don't expect\n    (when check-coverage\n      (cond marked-unsafe\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Function marked as unsafe.\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            (not fspec)\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Missing fspec(s)\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            (not spec-checks)\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Number of tests set to 0\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            :else nil))))\n\n\n;; REVIEW: We don't seem to be needing this anymore.\n(defn- explain-problem-str [failure-type problem]\n  (let [{:keys [pred val in path via]} problem]\n    (case failure-type\n      :check-failed (into {:val val :in in :not pred}\n                          [(when (not= path [:ret]) [:at path])\n                           (when (seq via) [:via via])])\n      :instrument (into {:val val :in in :not pred :at path}\n                        [(when (seq via) [:via via])])\n      :else problem)))\n\n\n(def ^:private issue-msg\n  \"\\nPlease file an issue at https://github.com/gnl/ghostwheel/issues if you encounter false positives or negatives in side effect detection.\")\n\n(defn- report-unexpected-side-effects [message]\n  (let [{:keys [::fn-name ::found-fx]} message]\n    (log-bold \"Possible side effects detected in function marked as safe:\\n\")\n    (->> found-fx\n         ;(map (fn [[type form details]] {:found type :at form :kind details}))\n         (map (fn [[type form details]]\n                (vec (concat [type]\n                             (when form ['at form])\n                             (when details ['kind details])))))\n         (map log)\n         (doall))\n    (->> (str \"=> Either remove the side effects, rename the function to '\"\n              (str (name fn-name) \"!'\")\n              \" to mark it as unsafe, or add ^::g/ignore-fx to its metadata to disable this warning and consider the function safe for automated generative testing.\")\n         wrap\n         log)\n    (log (wrap issue-msg))))\n\n\n(defn- report-unexpected-safety [message]\n  (let [safe-name (string/replace (name (::fn-name message)) #\"!$\" \"\")]\n    (log-bold \"No side effects detected in function marked as unsafe.\")\n    (->> (str \"=> If safe, rename to '\"\n              safe-name\n              \"'. If unsafe, rename the called unsafe functions to suffix them with a '!', or add the ^::g/ignore-fx metadata to disable this check.\")\n         wrap\n         log)\n    (log (wrap issue-msg))\n    log))\n\n\n(defn- report-spec-check [{:keys [::spec-checks ::fn-name]}]\n  (doseq [check spec-checks\n          :let [test-ret (get check #?(:clj  :clojure.spec.test.check/ret\n                                       :cljs :clojure.test.check/ret))]\n          :when (not (:pass? test-ret))\n          :let [spec-error (:result test-ret)\n                data       (.-data spec-error)\n                msg        (try (.-message spec-error)\n                                (catch #?(:cljs js/Object :clj Exception) _ nil))]]\n    (if-not data\n      (log-bold msg)\n      (do\n        (when-let [args (::st/args data)]\n          (log \"\\nCall:\")\n          (log (cons (with-meta fn-name nil) args)))\n        (log)\n        (when (= (::s/failure data) :instrument)\n          (log (-> msg string/split-lines first (str \"\\n\"))))\n        (-> (with-out-str ((expound/custom-printer nil) data))\n            (str \"\\n\")\n            log)\n        ;; REVIEW: Too noisy in the REPL, but\n        ;; maybe add an option to enable it later\n        (when (= l/*report-output* :js-console)\n          (group-collapsed \"Raw error data:\" {::l/background (:base0 l/ghostwheel-colors)})\n          (log msg)\n          (log data)\n          (group-end))))))\n\n\n(defmethod report :fail [m]\n  (let [message     (:message m)\n        {:keys [::fn-name ::failure]} message\n        summary     (case failure\n                      ::unexpected-fx \"Possible side effects detected\"\n                      ::unexpected-safety \"Expected side effects not detected\"\n                      ::spec-failure \"Spec check\"\n                      nil)\n        start-group l/group]\n    (inc-report-counter! :fail)\n    (start-group (str \"FAILED: \" fn-name \" \u2013 \" summary)\n                 {::l/background (:red l/ghostwheel-colors)})\n    (case failure\n      ::unexpected-fx (report-unexpected-side-effects message)\n      ::unexpected-safety (report-unexpected-safety message)\n      ::spec-failure (report-spec-check message)\n      (do\n        (log-bold (str \"Undefined failure reason: \" failure))\n        (log message)))\n    (group-end)))\n\n\n;; REVIEW - test this and clean it up\n(defmethod report :error [m]\n  (DBG m)\n  #_(let [[fn-name spec-check] (:message m)]\n      (do\n        (inc-report-counter! :error)\n        (group (str \"ERROR when testing \" fn-name\n                    {::l/background (:red l/ghostwheel-colors)}))\n        (inc-report-counter! :error)\n        (println \"\\nERROR in\" (t/testing-vars-str m))\n        #?(:cljs (when (seq (:testing-contexts (t/get-current-env)))\n                   (println (t/testing-contexts-str))))\n        (when-let [message (:message m)] (println message))\n        #?(:cljs (t/print-comparison m))\n        (group-end))))\n\n\n(defmethod report :end-run-tests [m]\n  (swap! *all-tests-successful #(and %1 %2) (t/successful? m)))\n\n\n(defmethod report :default [_])\n\n"]}