{"version":3,"sources":["com/wsscode/fuzzy.cljs"],"mappings":";;;;AAIA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAeC;AACf,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAgBE;AAChB,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAsBE;AACtB,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAiB,AAAAG,AAAA,AAAA,AAAW,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAX,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEjB;;;;;;;;;;;;AAAA,AAAAM,AAAAC,AAAMO;AAAN,AAAA,AAAAN,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAWYO;AAXZF,AAAAN;AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAAA,AAWgDI;AAXhD,AAAAL,AAAAC,AAAA,AAWoCG;AAXpC,AAYE,AAAAE,AAAwB,AAACK,AAAkBR,AAAaC;AAAxD,AAAAG,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAcG;AAAd,AAAAF,AAAAD,AAAA,AAAA,AAAoBI;AAApB,AACE,AAAIF;AACF,AAAA,AAAA,AAAA,AAACI,AAAMP,AAAaG,AAAqBC,AAAiBC;;AAD5D;;;AAGJ;;;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAAA,AAMWI;AANX,AAAAlB,AAAAc,AAAA,AAIYE;AAJZ,AAAAhB,AAAAc,AAAA,AAIoBX;AAJpB,AAAAH,AAAAc,AAAA,AAAA,AAIiCG;AAJjC,AAOE,AAAI,AAACE,AAAIhB;AACP,AAAMmB,AAAQ,AAACC,AAAQrB,AAAUgB;AAAjC,AACMM;AADNJ,AAAAC;AAAA,AACe,AAAAA,AAAAD,AAACK;;;AADhB,AAEE,AAAMT,AAAQU;AAAAA,AACZ,AAACC,AAAKL,AAAMI;AADd,AAEE,AAAAE,AAASF;AAAT,AAAA,AACET;AACA,AAAA,AAAAW,AAACC,AAAsBL;;AAFzBI;;;AAGJZ","names":["cljs.spec.alpha/def-impl","cljs.core/boolean?","cljs.core/string?","cljs.spec.alpha.every_impl","G__73536","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__73538","cljs.core/map?","cljs.core/contains?","p__73627","p__73628","map__73629","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__73630","com.wsscode.fuzzy/match-one","search-input","string","opt","vec__73641","cljs.core.nth","match?","score","hl","com.wsscode.fuzzyjs/fuzzy_match","cljs.core.assoc","p__73653","map__73654","com.wsscode.fuzzy/fuzzy-match","options","sort?","input","cljs.core/seq","p1__73647#","p2__73646#","fuzzy","cljs.core.partial","compare","cljs.core/compare","<>","cljs.core.keep","G__73679","cljs.core.sort_by"],"sourcesContent":["(ns com.wsscode.fuzzy\n  (:require [com.wsscode.fuzzyjs :as fuzzy]\n            [cljs.spec.alpha :as s]))\n\n(s/def ::sort? boolean?)\n(s/def ::string string?)\n(s/def ::search-input string?)\n(s/def ::options (s/coll-of (s/keys :req [::string])))\n\n(defn match-one\n  \"Matches ::search-input with ::string from map. When match is valid the map is\n  augmented with the keys ::match? ::match-score and ::match-hl.\n\n  ```clojure\n  (fuzzy/match-one {::fuzzy/search-input \\\"a\\\"} {::fuzzy/string \\\"abc\\\"})\n  ; => {::fuzzy/string      \\\"abc\\\"\n  ;     ::fuzzy/match?      true\n  ;     ::fuzzy/match-score 8\n  ;     ::fuzzy/match-hl    \\\"<b>a</b>bc\\\"}\n  ```\"\n  [{::keys [search-input]} {::keys [string] :as opt}]\n  (let [[match? score hl] (fuzzy/fuzzy_match search-input string)]\n    (if match?\n      (assoc opt ::match? match? ::match-score score ::match-hl hl))))\n\n(defn fuzzy-match\n  \"Search for all matches of ::search-input in ::options. Options must be a collection\n  of maps, the map key ::string will be used to make the lookup. By default the\n  results will be sorted by score, use ::sort? false to keep original order.\"\n  [{::keys [options search-input sort?]\n    :or    {sort? true}\n    :as    input}]\n  (if (seq search-input)\n    (let [fuzzy   (partial match-one input)\n          compare #(compare %2 %)]\n      (as-> options <>\n        (keep fuzzy <>)\n        (cond->> <>\n          sort?\n          (sort-by ::match-score compare))))\n    options))\n"]}