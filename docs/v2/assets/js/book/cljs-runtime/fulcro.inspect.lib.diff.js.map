{"version":3,"sources":["fulcro/inspect/lib/diff.cljc"],"mappings":";;;AAGA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAiBC;AACjB,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAkBE;AAElB,AAAA,AAAMC,AAASC,AAAEC;AAAjB,AACE,AAACC,AACC,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAWG;AAAX,AAAAF,AAAAD,AAAA,AAAA,AAAaI;AAAb,AACE,AAAMC,AAAG,AAAA,AAACC,AAAIV,AAAEO;AAAhB,AACE,AAAI,AAACI,AAAEH,AAAEC;AACPH;;AACA,AAAI,AAAK,AAACT,AAAKW,AAAG,AAACX,AAAKY;AACtB,AAACG,AAAMN,AAAKC,AAAE,AAACR,AAAAA,AAAAA,AAAQU,AAAAA,AAAGD,AAAAA;;AAC1B,AAACI,AAAMN,AAAKC,AAAEC;;;AAPxB,AASEP;;AAEJ,AAAA,AAAMY,AAAUb,AAAEC;AAAlB,AACE,AAACC,AACC,AAAAY,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAT,AAAAU,AAAA,AAAA,AAAWR;AAAX,AAAAF,AAAAU,AAAA,AAAA,AAAaP;AAAb,AACE,AAAAS,AAAgB,AAACI,AAAKpB,AAAEM;AAAxB,AAAA,AAAAU;AAAA,AAAAC,AAAAD;AAAA,AAAAZ,AAAAa,AAAA,AAAA,AAAUC;AAAV,AAAAd,AAAAa,AAAA,AAAA,AAAYE;AAAZ,AACE,AAAI,AAAK,AAACvB,AAAKW,AAAG,AAACX,AAAKuB,AAAI,AAACE,AAAKd,AAAEY;AAClC,AAAMG,AAAO,AAACV,AAAAA,AAAAA,AAASL,AAAAA,AAAEY,AAAAA;AAAzB,AACE,AAAI,AAACI,AAAID;AACP,AAAA,AAACE,AAAKT,AAAMT,AAAEgB;;AACdP;;;AACJA;;;AACF,AAACS,AAAKT,AAAK,AAAAU,AAAQnB;AAAR,AAAA,AAAU,AAACV,AAAKU;AAAG,AAAAmB,AAAA,AAAA,AAACd;;AAApBc;;;;AATjB,AAWE1B;;AAEJ,AAAA,AAAM2B,AAAM3B,AAAEC;AAAd,AAAA,AAAA,AAAA,AACc,AAACF,AAAQC,AAAEC,AACX,AAACY,AAASb,AAAEC;;AAE1B,AAAA,AAAM2B,AAAYC,AAAEC;AAApB,AACE,AAAI,AAAK,AAACjC,AAAKgC,AAAG,AAAChC,AAAKiC;AACtB,AAACC,AAAWH,AAAWC,AAAEC;;AACzBA;;;AAEJ,AAAA,AAAAE,AAAMK,AAAeR;AAArB,AAAA,AAAAI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAvB,AAAAuB,AAAA,AAAgCK;AAAhC,AACE,AAACP,AAAWH,AAAWC,AAAES;;AAE3B,AAAA,AAAAC,AAAME,AAAgBZ;AAAtB,AAAA,AAAAW,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAA,AAAA9B,AAAA8B,AAAA,AAAiCE;AAAjC,AACE,AAACxC,AACC;AAAKyC,AAAMC;AAAX,AACE,AACE,AAAA,AAAQA;AACR,AAACC,AAAOF,AAAM,AAAA,AAACE,AAAOD;;AAFxB,AAIE,AAAC/C,AAAK+C;AACN,AAAAE,AAAY,AAACC,AAAMH;AAAnB,AAAAvC,AAAAyC,AAAA,AAAA,AAAOvC;AAAP,AAAAF,AAAAyC,AAAA,AAAA,AAAStC;AAAT,AACE,AAAA,AAACyC,AAAON,AAAMpC;AAAdyC;AAAA,AAAiB,AAAAE,AAAAF;AAAAG,AAAA,AAAA,AAA8B3C;AAA9B,AAAA,AAAA0C,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;;;;AANtB,AASE,AAACI,AAAOF,AAAMC;;;;;AAClBf,AACAa;;AAEJ,AAAA,AAAMU,AAAOvB,AAAEwB;AAAf,AACMxB,AACA,AAACQ,AAAcgB,AACf,AAACZ,AAAeY","names":["cljs.spec.alpha/def-impl","cljs.core/map?","cljs.core/vector?","fulcro.inspect.lib.diff/updates","a","b","cljs.core.reduce","p__60016","vec__60017","cljs.core.nth","adds","k","v","va","cljs.core.get","cljs.core._EQ_","cljs.core.assoc","fulcro.inspect.lib.diff/removals","p__60032","vec__60033","rems","temp__5718__auto__","vec__60036","_","vb","cljs.core/find","cljs.core.not_EQ_","childs","cljs.core/seq","cljs.core.conj","G__60042","fulcro.inspect.lib.diff/diff","fulcro.inspect.lib.diff/deep-merge","x","y","cljs.core.merge_with","p__60048","map__60049","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","fulcro.inspect.lib.diff/patch-updates","updates","p__60057","map__60058","fulcro.inspect.lib.diff/patch-removals","removals","final","rem","cljs.core.dissoc","vec__60060","cljs.core/first","p1__60056#","cljs.core.update","G__60063","G__60064","fulcro.inspect.lib.diff/patch","diff"],"sourcesContent":["(ns fulcro.inspect.lib.diff\n  (:require [clojure.spec.alpha :as s]))\n\n(s/def ::updates map?)\n(s/def ::removals vector?)\n\n(defn updates [a b]\n  (reduce\n    (fn [adds [k v]]\n      (let [va (get a k ::unset)]\n        (if (= v va)\n          adds\n          (if (and (map? v) (map? va))\n            (assoc adds k (updates va v))\n            (assoc adds k v)))))\n    {}\n    b))\n\n(defn removals [a b]\n  (reduce\n    (fn [rems [k v]]\n      (if-let [[_ vb] (find b k)]\n        (if (and (map? v) (map? vb) (not= v vb))\n          (let [childs (removals v vb)]\n            (if (seq childs)\n              (conj rems {k childs})\n              rems))\n          rems)\n        (conj rems (cond-> k (map? k) (assoc ::key? true)))))\n    []\n    a))\n\n(defn diff [a b]\n  {::updates  (updates a b)\n   ::removals (removals a b)})\n\n(defn deep-merge [x y]\n  (if (and (map? x) (map? y))\n    (merge-with deep-merge x y)\n    y))\n\n(defn patch-updates [x {::keys [updates]}]\n  (merge-with deep-merge x updates))\n\n(defn patch-removals [x {::keys [removals]}]\n  (reduce\n    (fn [final rem]\n      (cond\n        (::key? rem)\n        (dissoc final (dissoc rem ::key?))\n\n        (map? rem)\n        (let [[k v] (first rem)]\n          (update final k #(patch-removals % {::removals v})))\n\n        :else\n        (dissoc final rem)))\n    x\n    removals))\n\n(defn patch [x diff]\n  (-> x\n      (patch-updates diff)\n      (patch-removals diff)))\n"]}