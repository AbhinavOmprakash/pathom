{"version":3,"sources":["expound/alpha.cljc"],"mappings":"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","names":["js/expound","js/expound.alpha","js/expound.alpha.registry-ref","expound.alpha/registry-ref","cljs.core.atom","cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","G__69751","cljs.core/coll?","cljs.core._EQ_","cljs.core/bounded-count","cljs.core/any?","cljs.core/keyword?","G__69756","G__69760","cljs.core/vector?","cljs.spec.alpha/map-spec-impl","G__69763","cljs.core/map?","cljs.core/contains?","G__69785","cljs.core/boolean?","cljs.spec.alpha/with-gen","cljs.core/ifn?","cljs.spec.gen.alpha.return$","_","G__69791","cljs.spec.alpha/or-spec-impl","cljs.core/set?","cljs.spec.gen.alpha.elements","cljs.core/string?","cljs.core/int?","cljs.core/symbol?","cljs.core/qualified-keyword?","cljs.spec.alpha/spec?","iter__4523__auto__","s__69827","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__69829","cljs.core/chunk-buffer","i__69828","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__69826","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","pr","cljs.spec.alpha.spec_impl","expound.alpha/figwheel-theme","expound.alpha/check-header-size","expound.alpha/header-size","expound.alpha/section-size","expound.alpha/*value-str-fn*","cljs.spec.alpha/fspec-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/nilable-impl","expound.alpha/value-in-context","opts","spec-name","form","path","value","*print-namespace-maps*-orig-val__69842","*print-namespace-maps*-temp-val__69843","cljs.core/*print-namespace-maps*","expound.printer.indent","expound.ansi.color","cljs.core.pr_str","expound.printer/pprint-str","expound.problems/highlighted-value","expound.printer.format","expound.alpha/spec-str","spec","cljs.core/Keyword","cljs.spec.alpha/form","expound.alpha/spec+via","problem","map__69852","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","via","cljs.core.into","expound.alpha/specs","problems","cljs.core.map","cljs.core/flatten","cljs.core.distinct","expound.alpha/specs-str","cljs.core/reverse","clojure.string.join","expound.alpha/named?","x","expound.alpha/pr-pred*","pred","cljs.core/Symbol","cljs.core/name","cljs.core/fn?","expound.printer/pprint-fn","expound.printer/elide-core-ns","*print-namespace-maps*-orig-val__69862","*print-namespace-maps*-temp-val__69863","expound.alpha/pr-pred","expound.alpha/show-spec-name","G__69871","js/Error","expound.alpha/preds","expound.alpha/spec-w-error-message?","cljs.core/boolean","last-spec","cljs.core/last","and__4120__auto__","cljs.core.not_EQ_","expound.alpha/error-message","cljs.spec.alpha/get-spec","expound.alpha/predicate-errors","vec__69886","cljs.core.nth","with-msg","no-msgs","cljs.core.juxt","cljs.core/filter","cljs.core/remove","p__69891","map__69892","cljs.core.conj","cljs.core.keep","p__69896","map__69897","cljs.core.remove","cljs.core/nil?","var_args","G__69912","expound.alpha/label","size","cljs.core/str","cljs.core.repeat","s","expound.alpha.label","label-str","prefix","chars-left","expound.alpha/header-label","cljs.core.partial","expound.alpha/section-label","expound.alpha/relevant-specs","sp-str","clojure.string/blank?","expound.alpha/multi-spec-parts","spec-form","vec__69929","_multi-spec","mm","retag","expound.alpha/multi-spec","cljs.core/tree-seq","p1__69933#","cljs.core.filter","cljs.core/sequential?","cljs.core.keyword","cljs.core/second","expound.alpha/no-method","_spec-name","map__69942","sp","G__69949","expound.problems/value-in","js/expound.alpha.problem-group-str","method-table__4613__auto__","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","fexpr__69952","cljs.core/MultiFn","cljs.core.symbol","expound.alpha/problem-group-str","type","_form","_path","_problems","_opts","js/expound.alpha.expected-str","fexpr__69954","expound.alpha/expected-str","js/expound.alpha.value-str","fexpr__69956","expound.alpha/value-str","expound.alpha/expected-str*","map__69960","in","expound.alpha/value-str*","map__69968","expound.alpha/conformed-value","invalid-value","conformed-val","expound.alpha/value+conformed-value","map__69974","show-conformed?","_type","expound.alpha/explain-missing-keys","missing-keys","p1__69978#","expound.printer/missing-key","cljs.core/every?","cljs.core/keyword","expound.printer/print-missing-keys","temp__5718__auto__","table","expound.printer/print-spec-keys","expound.alpha/format-str","expound.alpha/format-err","header","expected","subproblems","grouped-subproblems","cljs.core/vals","cljs.core/group-by","p1__70004#","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","expound.alpha/header","G__70020","map__70024","s__70029","b__70031","i__70030","iter__70028","cljs.core/=","expound.util/assert-message","combined-set","clojure.set/union","p1__70042#","cljs.core.sort","p1__70043#","p1__70050#","p__70076","p__70077","vec__70083","seq__70084","first__70085","cljs.core/next","vec__70086","seq__70087","first__70088","expound.alpha/lcs*","xs","y","ys","cljs.core/vec","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","expound.alpha/lcs","seq70098","self__4718__auto__","paths","cljs.core.reduce","expound.alpha/alternation","grp1","grp2","expound.alpha.lcs","expound.alpha/problem-group","expound.alpha/lift-singleton-groups","groups","clojure.walk/postwalk","cljs.core/sorted?","expound.alpha/remove-vec","v","expound.alpha/groups","grouped-by-in-path","grp","grps","group","old-group","p1__70140#","cljs.core/some","temp__5722__auto__","el-name","failure","non-matching-value","p1__70150#","cljs.core.dissoc","p1__70151#","cljs.core.assoc","expound.problems/type","s__70158","b__70160","i__70159","iter__70157","prob","expound.alpha/instrumentation-info","caller","expound.alpha/spec-name","ed","G__70229","fexpr__70228","expound.alpha/print-explain-data","explain-data","cljs.core/not","map__70231","explain-data'","expound.problems/annotate","expound.printer/no-trailing-whitespace","s__70277","b__70279","i__70278","iter__70276","cljs.core/empty?","expound.alpha/minimal-fspec","fspec-sp","cljs.core/qualified-symbol?","cljs.spec.alpha/rep-impl","cljs.spec.alpha/conform","cljs.core.update","args","p1__70306#","cljs.spec.alpha/unform","expound.alpha/print-check-result","check-result","map__70324","sym","ret","cljs.core/ex-data","bad-args","or__4131__auto__","failure-reason","cljs.core/re-matches","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__70363","cljs.core/*print-newline*","*print-fn*-orig-val__70364","cljs.core/*print-fn*","*print-newline*-temp-val__70365","*print-fn*-temp-val__70366","x__4662__auto__","cljs.spec.alpha/*explain-out*","p1__70319#","p","cljs.core.concat","cljs.core/List","expound.alpha/explain-data?","data","cljs.spec.alpha.valid_QMARK_","G__70374","expound.alpha/check-result?","G__70533","expound.alpha/printer-str","opts'","cljs.core.merge","enable-color?","expound.ansi/*enable-color*","*value-str-fn*-orig-val__70599","*enable-color*-orig-val__70600","*print-styles*-orig-val__70601","*value-str-fn*-temp-val__70602","*enable-color*-temp-val__70603","*print-styles*-temp-val__70604","expound.ansi/*print-styles*","G__70607","cljs.core.ex_info","k","expound.alpha/custom-printer","cljs.core.print","expound.alpha/printer","expound.alpha/expound-str","cljs.spec.alpha/explain-data","expound.alpha/expound","expound.alpha/defmsg","error-message","cljs.core.swap_BANG_","cljs.core/assoc","expound.alpha/explain-result","cljs.spec.alpha/explain-printer","expound.alpha/explain-result-str","*print-newline*-orig-val__70719","*print-fn*-orig-val__70720","*print-newline*-temp-val__70721","*print-fn*-temp-val__70722","G__70757","expound.alpha/explain-results","check-results","seq__70763","chunk__70764","count__70765","i__70766","c__4550__auto__","cljs.core/chunk-first","cljs.core/butlast","G__70813","expound.alpha/explain-results-str","*print-newline*-orig-val__70820","*print-fn*-orig-val__70821","*print-newline*-temp-val__70822","*print-fn*-temp-val__70823"],"sourcesContent":["(ns expound.alpha\n  \"Generates human-readable errors for `clojure.spec`\"\n  (:require [expound.problems :as problems]\n            [clojure.spec.alpha :as s]\n            [clojure.string :as string]\n            [clojure.set :as set]\n            [clojure.walk :as walk]\n            #?(:cljs [goog.string.format])\n            #?(:cljs [goog.string])\n            [expound.printer :as printer]\n            [expound.util :as util]\n            [expound.ansi :as ansi]\n            [clojure.spec.gen.alpha :as gen]))\n\n;;;;;; registry ;;;;;;\n\n(defonce ^:private registry-ref (atom {}))\n\n;;;;;; internal specs ;;;;;;\n\n(s/def ::singleton (s/coll-of any? :count 1))\n(s/def :expound.spec/spec keyword?)\n(s/def :expound.spec/specs (s/coll-of :expound.spec/spec))\n(s/def :expound.spec.problem/via (s/coll-of :expound.spec/spec :kind vector?))\n(s/def :expound.spec/problem (s/keys :req-un [:expound.spec.problem/via]))\n(s/def :expound.spec/problems (s/coll-of :expound.spec/problem))\n\n(s/def :expound.printer/show-valid-values? boolean?)\n(s/def :expound.printer/value-str-fn (s/with-gen ifn?\n                                       #(gen/return (fn [_ _ _ _] \"NOT IMPLEMENTED\"))))\n(s/def :expound.printer/print-specs? boolean?)\n(s/def :expound.printer/theme #{:figwheel-theme :none})\n(s/def :expound.printer/opts (s/keys\n                              :opt-un [:expound.printer/show-valid-values?\n                                       :expound.printer/value-str-fn\n                                       :expound.printer/print-specs?\n                                       :expound.printer/theme]))\n\n(s/def :expound.spec/spec (s/or\n                           :set set?\n                           :pred (s/with-gen ifn?\n                                   #(gen/elements [boolean? string? int? keyword? symbol?]))\n                           :kw qualified-keyword?\n                           :spec (s/with-gen s/spec?\n                                   #(gen/elements\n                                     (for [pr [boolean? string? int? keyword? symbol?]]\n                                       (s/spec pr))))))\n\n;;;;;; themes ;;;;;;\n\n(def ^:private figwheel-theme\n  {:highlight   [:bold]\n   :good        [:green]\n   :good-pred   [:green]\n   :good-key    [:green]\n   :bad         [:red]\n   :bad-value   [:red]\n   :error-key   [:red]\n   :focus-key   [:bold]\n   :correct-key [:green]\n   :header      [:cyan]\n   :footer      [:cyan]\n   :warning-key [:bold]\n   :focus-path  [:magenta]\n   :message     [:magenta]\n   :pointer     [:magenta]\n   :none        [:none]})\n\n;;;;;; private ;;;;;;\n\n(def ^:private check-header-size 45)\n(def ^:private header-size 35)\n(def ^:private section-size 25)\n\n(def ^:private ^:dynamic *value-str-fn* (fn [_ _ _ _] \"NOT IMPLEMENTED\"))\n\n(s/fdef value-in-context\n        :args (s/cat\n               :opts map?\n               :spec-name (s/nilable #{:args :fn :ret ::s/pred})\n               :form any?\n               :path :expound/path\n               :value any?)\n        :ret string?)\n(defn ^:private value-in-context\n  \"Given a form and a path into that form, returns a string\n   that helps the user understand where that path is located\n   in the form\"\n  [opts spec-name form path value]\n  (binding [*print-namespace-maps* false]\n    (cond\n      (= :fn spec-name)\n      (printer/indent (ansi/color (pr-str form) :bad-value))\n\n      (= form value)\n      (printer/indent (ansi/color (printer/pprint-str value) :bad-value))\n\n      ;; FIXME: It's silly to reconstruct a fake \"problem\"\n      ;; after I've deconstructed it, but I'm not yet ready\n      ;; to break the API for value-in-context BUT\n      ;; I do want to test that a problems-based API\n      ;; is useful.\n      ;; See https://github.com/bhb/expound#configuring-the-printer\n      path\n      (printer/indent (problems/highlighted-value opts\n                                                  {:expound/form form\n                                                   :expound/in path\n                                                   :expound/value value}))\n      :else\n      (printer/format\n       \"Part of the value\\n\\n%s\"\n       (printer/indent (ansi/color (pr-str form) :bad-value))))))\n\n(defn ^:private spec-str [spec]\n  (if (keyword? spec)\n    (printer/format\n     \"%s:\\n%s\"\n     spec\n     (printer/indent (printer/pprint-str (s/form spec))))\n    (printer/pprint-str (s/form spec))))\n\n;; via is different when using asserts\n(defn ^:private spec+via [problem]\n  (let [{:keys [via spec]} problem]\n    (if (keyword? spec)\n      (into [spec] via)\n      via)))\n\n(s/fdef specs\n        :args (s/cat :problems :expound.spec/problems)\n        :ret :expound.spec/specs)\n(defn ^:private specs\n  \"Given a collection of problems, returns the specs for those problems, with duplicates removed\"\n  [problems]\n  (->> problems\n       (map spec+via)\n       flatten\n       distinct))\n\n(defn ^:private specs-str [problems]\n  (->> problems\n       specs\n       reverse\n       (map spec-str)\n       (string/join \"\\n\")))\n\n(defn ^:private named? [x]\n  #?(:clj (instance? clojure.lang.Named x)\n     :cljs (implements? cljs.core.INamed x)))\n\n(defn ^:private pr-pred* [pred]\n  (cond\n    (or (symbol? pred) (named? pred))\n    (name pred)\n\n    (fn? pred)\n    (printer/pprint-fn pred)\n\n    :else\n    (printer/elide-core-ns (binding [*print-namespace-maps* false] (printer/pprint-str pred)))))\n\n(defn ^:private pr-pred [pred spec]\n  (if (= ::s/unknown pred)\n    (pr-pred* spec)\n    (pr-pred* pred)))\n\n(defn ^:private show-spec-name [spec-name value]\n  (if spec-name\n    (str\n     (case spec-name\n       ::s/pred \"\" ; Used in s/assert\n       :args \"Function arguments\\n\\n\"\n       :ret \"Return value\\n\\n\"\n       :fn \"Function arguments and return value\\n\\n\")\n     value)\n    value))\n\n(defn ^:private preds [problems]\n  (->> problems\n       (map (fn [problem]\n              (printer/indent\n               (ansi/color\n                (pr-pred (:pred problem)\n                         (:spec problem))\n                :good-pred))))\n       distinct\n       (string/join \"\\n\\nor\\n\\n\")))\n\n(declare error-message)\n\n(defn ^:private spec-w-error-message? [via pred]\n  (boolean (let [last-spec (last via)]\n             (and (not= ::s/unknown pred)\n                  (qualified-keyword? last-spec)\n                  (error-message last-spec)\n                  (s/get-spec last-spec)))))\n\n(defn ^:private predicate-errors [problems]\n  (let [[with-msg no-msgs] ((juxt filter remove)\n                            (fn [{:keys [expound/via pred]}]\n                              (spec-w-error-message? via pred))\n                            problems)]\n    (->> (when (seq no-msgs)\n           (printer/format\n            \"should satisfy\\n\\n%s\"\n            (preds no-msgs)))\n         (conj (keep (fn [{:keys [expound/via]}]\n                       (let [last-spec (last via)]\n                         (if (qualified-keyword? last-spec)\n                           (ansi/color (error-message last-spec) :good)\n                           nil)))\n                     with-msg))\n         (remove nil?)\n         (string/join \"\\n\\nor\\n\\n\"))))\n\n(defn ^:private label\n  ([size]\n   (apply str (repeat size \"-\")))\n  ([size s]\n   (label size s \"-\"))\n  ([size s label-str]\n   (ansi/color\n    (let [prefix (str label-str label-str \" \" s \" \")\n          chars-left (- size (count prefix))]\n      (->> (repeat chars-left label-str)\n           (apply str)\n           (str prefix)))\n    :header)))\n\n(def ^:private header-label (partial label header-size))\n(def ^:private section-label (partial label section-size))\n\n(defn ^:private relevant-specs [problems]\n  (let [sp-str (specs-str problems)]\n    (if (string/blank? sp-str)\n      \"\"\n      (printer/format\n       \"%s\\n\\n%s\"\n       (section-label \"Relevant specs\")\n       sp-str))))\n\n(defn ^:private multi-spec-parts [spec-form]\n  (let [[_multi-spec mm retag] spec-form]\n    {:mm mm :retag retag}))\n\n(defn ^:private multi-spec [pred spec]\n  (->> (s/form spec)\n       (tree-seq coll? seq)\n       (filter #(and (sequential? %)\n                     (<= 2 (count %))\n                     (= ::s/multi-spec (keyword (first %)))\n                     (= pred (second %))))\n       first))\n\n(defn ^:private no-method [_spec-name form path problem]\n  (let [sp (s/spec (last (:expound/via problem)))\n        {:keys [mm retag]} (multi-spec-parts\n                            (multi-spec (:pred problem) sp))]\n    (printer/format\n     \" Spec multimethod:      `%s`\n Dispatch function:     `%s`\n Dispatch value:        `%s`\"\n     (pr-str mm)\n     (pr-str retag)\n     (pr-str (if retag (retag (problems/value-in form path)) nil)))))\n\n(defmulti ^:no-doc problem-group-str (fn [type _spec-name _form _path _problems _opts] type))\n(defmulti ^:no-doc expected-str (fn [type  _spec-name _form _path _problems _opts] type))\n(defmulti ^:no-doc value-str (fn [type _spec-name _form _path _problems _opts] type))\n\n(defn ^:private expected-str* [spec-name problems opts]\n  (let [problem (first problems)\n        {:expound/keys [form in]} problem\n        type (:expound.spec.problem/type problem)]\n    (expected-str type spec-name form in problems opts)))\n\n(defn ^:private value-str* [spec-name problems opts]\n  (let [problem (first problems)\n        {:expound/keys [form in]} problem\n        type (:expound.spec.problem/type problem)]\n    (value-str type spec-name form in problems opts)))\n\n(defn conformed-value [problems invalid-value]\n  (let [conformed-val (-> problems first :val)]\n    (if (= conformed-val invalid-value)\n      \"\"\n      (printer/format\n       \"\\n\\nwhen conformed as\\n\\n%s\"\n       (printer/indent (ansi/color (pr-str conformed-val) :bad-value))))))\n\n;; FIXME - when I decide to break compatibility for value-str-fn, maybe\n;; make it show conform/unformed value\n(defn ^:private value+conformed-value [problems spec-name form path opts]\n  (let [{:keys [show-conformed?]} opts\n        invalid-value (if (nil? path)\n                      ;; This isn't used by default\n                      ;; because value-in-context will look at\n                      ;; path and only print form, but anyone\n                      ;; who provides their own *value-str-fn*\n                      ;; could use this\n                        ::no-value-found\n                        (problems/value-in form path))]\n    (printer/format\n     \"%s%s\"\n     (*value-str-fn* spec-name form path invalid-value)\n     (if show-conformed?\n       (conformed-value problems invalid-value)\n       \"\"))))\n\n(defmethod value-str :default [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? true})))\n\n(defn ^:private explain-missing-keys [problems]\n  (let [missing-keys (map #(printer/missing-key (:pred %)) problems)]\n    (str (printer/format\n          \"should contain %s: %s\"\n          (if (and (= 1 (count missing-keys))\n                   (every? keyword missing-keys))\n            \"key\"\n            \"keys\")\n          (printer/print-missing-keys problems))\n         (if-let [table (printer/print-spec-keys problems)]\n           (str \"\\n\\n\" table)\n           nil))))\n\n(def ^:private format-str \"%s\\n\\n%s\\n\\n%s\")\n\n(defn ^:private format-err [header type spec-name form in problems opts expected]\n  (printer/format\n   format-str\n   (header-label header)\n   (value-str type spec-name form in problems opts)\n   expected))\n\n(defmethod expected-str :expound.problem-group/one-value [_type spec-name form path problems opts]\n  (let [problem (first problems)\n        subproblems (:problems problem)\n        grouped-subproblems (vals (group-by :expound.spec.problem/type subproblems))]\n    (string/join\n     \"\\n\\nor\\n\\n\"\n     (map #(expected-str* spec-name % opts) grouped-subproblems))))\n\n(defmethod value-str :expound.problem-group/one-value [type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)\n        subproblems (:problems problem)]\n    (value-str* spec-name subproblems opts)))\n\n(defn ^:private header [type]\n  (case type\n    :expound.problem/missing-spec\n    \"Missing spec\"\n\n    \"Spec failed\"))\n\n(defmethod problem-group-str :expound.problem-group/one-value [type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)\n        subproblems (:problems problem)\n        {:expound/keys [form in]} (first subproblems)]\n    (format-err (-> subproblems first :expound.spec.problem/type header)\n                type\n                spec-name\n                form\n                in\n                problems\n                opts\n                (expected-str type spec-name form path problems opts))))\n\n(defmethod expected-str :expound.problem-group/many-values [type spec-name form path problems opts]\n  (let [subproblems (:problems (first problems))]\n    (string/join\n     \"\\n\\nor value\\n\\n\"\n     (for [problem subproblems]\n       (printer/format\n        \"%s\\n\\n%s\"\n        (value-str* spec-name [problem] opts)\n        (expected-str* spec-name [problem] opts))))))\n\n(defmethod problem-group-str :expound.problem-group/many-values [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (printer/format\n   \"%s\\n\\n%s\"\n   (header-label \"Spec failed\")\n   (expected-str _type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/missing-key [_type spec-name _form path problems opts]\n  (explain-missing-keys problems))\n\n(defmethod problem-group-str :expound.problem/missing-key [type spec-name form path problems opts]\n  (assert (apply = (map :val problems)) (str util/assert-message \": All values should be the same, but they are \" problems))\n  (format-err \"Spec failed\"\n              type\n              spec-name\n              form\n              path\n              problems\n              opts\n              (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/not-in-set [_type _spec-name _form _path problems _opts]\n  (let [combined-set (apply set/union (map :pred problems))]\n    (printer/format\n     \"should be%s: %s\"\n     (if (= 1 (count combined-set)) \"\" \" one of\")\n     (ansi/color (->> combined-set\n                      (map #(str \"\" (pr-str %) \"\"))\n                      (sort)\n                      (map #(ansi/color % :good))\n                      (string/join \", \"))\n                 :good))))\n\n(defmethod problem-group-str :expound.problem/not-in-set [type spec-name form path problems opts]\n  (assert (apply = (map :val problems)) (str util/assert-message \": All values should be the same, but they are \" problems))\n  (format-err \"Spec failed\"\n              type\n              spec-name\n              form\n              path\n              problems\n              opts\n              (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/missing-spec [_type spec-name form path problems opts]\n  (str \"with\\n\\n\"\n       (->> problems\n            (map #(no-method spec-name form path %))\n            (string/join \"\\n\\nor with\\n\\n\"))))\n\n(defmethod value-str :expound.problem/missing-spec [_type spec-name form path problems opts]\n  (printer/format\n   \"Cannot find spec for\n\n%s\"\n   (show-spec-name spec-name (*value-str-fn* spec-name form path (problems/value-in form path)))))\n\n(defmethod problem-group-str :expound.problem/missing-spec [type spec-name form path problems opts]\n  (printer/format\n   \"%s\\n\\n%s\\n\\n%s\"\n   (header-label \"Missing spec\")\n   (value-str type spec-name form path problems opts)\n   (expected-str type spec-name form path problems opts)))\n\n(defn ^:private lcs* [[x & xs] [y & ys]]\n  (cond\n    (or (= x nil) (= y nil)) nil\n    (= x y) (vec (cons x (lcs* xs ys)))\n    :else []))\n\n(defn ^:private lcs [& paths]\n  (reduce\n   (fn [xs ys]\n     (lcs* xs ys))\n   paths))\n\n(defn ^:private alternation [grp1 grp2]\n  (let [xs (:path-prefix grp1)\n        ys (:path-prefix grp2)\n        prefix (lcs xs ys)]\n    (if (and\n         (some? prefix)\n         (if (= :expound.problem-group/many-values (:expound.spec.problem/type grp1))\n           true\n           (not= prefix xs))\n         (if (= :expound.problem-group/many-values (:expound.spec.problem/type grp2))\n           true\n           (not= prefix ys)))\n      grp1\n      nil)))\n\n(defn ^:private problem-group [grp1 grp2]\n  {:expound.spec.problem/type :expound.problem-group/many-values\n   :path-prefix               (lcs (:path-prefix grp1)\n                                   (:path-prefix grp2))\n   :problems                  (into\n                               (if (= :expound.problem-group/many-values (:expound.spec.problem/type grp1))\n                                 (:problems grp1)\n                                 [grp1])\n\n                               (if (= :expound.problem-group/many-values (:expound.spec.problem/type grp2))\n                                 (:problems grp2)\n                                 [grp2]))})\n\n(defn ^:private lift-singleton-groups [groups]\n  (walk/postwalk\n   (fn [form]\n     (if (and (map? form)\n              (not (sorted? form))\n              (contains? #{:expound.problem-group/many-values\n                           :expound.problem-group/one-value} (:expound.spec.problem/type form))\n              (= 1 (count (:problems form))))\n       (first (:problems form))\n       form))\n   groups))\n\n(defn ^:private remove-vec [v x]\n  (vec (remove #{x} v)))\n\n(defn ^:private groups [problems]\n  (let [grouped-by-in-path (->> problems\n                                (group-by :expound/in)\n                                vals\n                                (map (fn [grp]\n                                       (if (= 1 (count grp))\n                                         {:expound.spec.problem/type :expound.problem-group/one-value\n\n                                          :path-prefix               (:expound/path (first grp))\n                                          :problems                  grp}\n                                         {:expound.spec.problem/type :expound.problem-group/one-value\n                                          :path-prefix               (apply lcs (map :expound/path grp))\n                                          :problems                  grp}))))]\n    (->> grouped-by-in-path\n         (reduce\n          (fn [grps group]\n            (if-let [old-group (some #(alternation % group) grps)]\n              (-> grps\n                  (remove-vec old-group)\n                  (conj (problem-group\n                         old-group\n                         group)))\n              (conj grps group)))\n          [])\n         lift-singleton-groups)))\n\n(defmethod expected-str :expound.problem/insufficient-input [_type spec-name form path problems opts]\n  (let [problem (first problems)]\n    (printer/format\n     \"should have additional elements. The next element%s %s\"\n     (if-some [el-name (last (:expound/path problem))]\n       (str \" \\\"\" (pr-str el-name) \"\\\"\")\n       \"\")\n     (let [failure nil\n           non-matching-value [:expound/value-that-should-never-match]\n           problems (->> problems\n                         (map #(dissoc % :expound.spec.problem/type :reason))\n                         (map #(assoc % :expound.spec.problem/type (problems/type failure %)))\n                         groups)]\n       (apply str (for [prob problems]\n                    (let [in (-> prob :expound/in)]\n                      (expected-str (-> prob :expound.spec.problem/type) :expound/no-spec-name non-matching-value in [prob] opts))))))))\n\n(defmethod problem-group-str :expound.problem/insufficient-input [type spec-name form path problems opts]\n  (format-err \"Syntax error\"\n              type\n              spec-name\n              form\n              path\n              problems\n              opts\n              (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/extra-input [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  \"has extra input\")\n\n(defmethod problem-group-str :expound.problem/extra-input [type spec-name form path problems opts]\n  (format-err \"Syntax error\"\n              type\n              spec-name\n              form\n              path\n              problems\n              opts\n              (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/fspec-exception-failure [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)]\n    (printer/format\n     \"threw exception\n\n%s\n\nwith args:\n\n%s\"\n     (printer/indent (if (string? (:reason problem))\n                       (str \"\\\"\" (:reason problem) \"\\\"\")\n                       (pr-str (:reason problem))))\n     (printer/indent (string/join \", \" (:val problem))))))\n\n(defmethod problem-group-str :expound.problem/fspec-exception-failure [type spec-name form path problems opts]\n  (format-err\n   \"Exception\"\n   type\n   spec-name\n   form\n   path\n   problems\n   opts\n   (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/fspec-ret-failure [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)]\n    (printer/format\n     \"returned an invalid value\\n\\n%s\\n\\n%s\"\n     (ansi/color (printer/indent (pr-str (:val problem))) :bad-value)\n     (predicate-errors problems))))\n\n(defmethod problem-group-str :expound.problem/fspec-ret-failure [type spec-name form path problems opts]\n  (format-err\n   \"Function spec failed\"\n   type\n   spec-name\n   form\n   path\n   problems\n   opts\n   (expected-str type spec-name form path problems opts)))\n\n(defmethod value-str :expound.problem/insufficient-input [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? false})))\n\n(defmethod value-str :expound.problem/extra-input [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? false})))\n\n(defmethod value-str :expound.problem/fspec-fn-failure [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? false})))\n\n(defmethod value-str :expound.problem/fspec-exception-failure [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? false})))\n\n(defmethod value-str :expound.problem/fspec-ret-failure [_type spec-name form path problems opts]\n  (show-spec-name spec-name (value+conformed-value problems spec-name form path {:show-conformed? false})))\n\n(defmethod expected-str :expound.problem/fspec-fn-failure [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)]\n    (printer/format\n     \"failed spec. Function arguments and return value\n\n%s\n\nshould satisfy\n\n%s\"\n     (printer/indent (ansi/color (pr-str (:val problem)) :bad-value))\n     (printer/indent (ansi/color (pr-pred (:pred problem) (:spec problem)) :good-pred)))))\n\n(defmethod problem-group-str :expound.problem/fspec-fn-failure [type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (format-err\n   \"Function spec failed\"\n   type\n   spec-name\n   form\n   path\n   problems\n   opts\n   (expected-str type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/check-fn-failure [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (let [problem (first problems)]\n    (printer/format\n     \"failed spec. Function arguments and return value\n\n%s\n\nshould satisfy\n\n%s\"\n     (printer/indent (ansi/color (pr-str (:val problem)) :bad-value))\n     (printer/indent (ansi/color (pr-pred (:pred problem) (:spec problem)) :good-pred)))))\n\n(defmethod problem-group-str :expound.problem/check-fn-failure [_type spec-name form path problems opts]\n  (s/assert ::singleton problems)\n  (printer/format\n   format-str\n   (header-label \"Function spec failed\")\n   (ansi/color (printer/indent (pr-str (:expound/check-fn-call (first problems)))) :bad-value)\n   (expected-str _type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/check-ret-failure [_type spec-name form path problems opts]\n  (predicate-errors problems))\n\n(defmethod problem-group-str :expound.problem/check-ret-failure [_type spec-name form path problems opts]\n  (printer/format\n   \"%s\n\n%s\n\nreturned an invalid value.\n\n%s\n\n%s\"\n   (header-label \"Function spec failed\")\n\n   (ansi/color (printer/indent (pr-str (:expound/check-fn-call (first problems)))) :bad-value)\n\n   (*value-str-fn* spec-name form path (problems/value-in form path))\n   (expected-str _type spec-name form path problems opts)))\n\n(defmethod expected-str :expound.problem/unknown [_type spec-name form path problems opts]\n  (predicate-errors problems))\n\n(defmethod problem-group-str :expound.problem/unknown [type spec-name form path problems opts]\n  (assert (apply = (map :val problems)) (str util/assert-message \": All values should be the same, but they are \" problems))\n  (format-err\n   \"Spec failed\"\n   type\n   spec-name\n   form\n   path\n   problems\n   opts\n   (expected-str type spec-name form path problems opts)))\n\n(defn ^:private instrumentation-info [failure caller]\n  (if (= :instrument failure)\n    (printer/format \"%s:%s\\n\\n\"\n                    (:file caller \"<filename missing>\")\n                    (:line caller \"<line number missing>\"))\n    \"\"))\n\n(defn ^:private spec-name [ed]\n  (if (#{:instrument} (::s/failure ed))\n    (cond\n      ;; This works for clojure.spec <= 0.2.176\n      ;; and CLJS <= 1.10.439\n      (::s/args ed)\n      :args\n\n      :else\n      ;; for earlier versions\n      (-> ed ::s/problems first :path first))\n\n    nil))\n\n(defn ^:private print-explain-data [opts explain-data]\n  (if-not explain-data\n    \"Success!\\n\"\n    (let [explain-data' (problems/annotate explain-data)\n          {:expound/keys [caller form]\n           ::s/keys [failure]} explain-data'\n          problems (->> explain-data'\n                        :expound/problems\n                        groups)]\n      (printer/no-trailing-whitespace\n       (str\n        (ansi/color (instrumentation-info failure caller) :none)\n        (printer/format\n         \"%s%s\\n%s %s %s\\n\"\n         (apply str\n                (for [prob problems]\n                  (str\n                   (problem-group-str (-> prob :expound.spec.problem/type)\n                                      (spec-name explain-data')\n                                      form\n                                      (-> prob :expound/in)\n                                      [prob]\n                                      opts)\n                   \"\\n\\n\"\n                   (let [s (if (:print-specs? opts)\n                             (relevant-specs (:expound/problems\n                                              explain-data'))\n                             \"\")]\n                     (if (empty? s)\n                       s\n                       (str s \"\\n\\n\"))))))\n         (ansi/color (section-label) :footer)\n         (ansi/color \"Detected\" :footer)\n         (ansi/color (count problems) :footer)\n         (ansi/color (if (= 1 (count problems)) \"error\" \"errors\") :footer)))))))\n\n(defn ^:private minimal-fspec [form]\n  (let [fspec-sp (s/cat\n                  :sym qualified-symbol?\n                  :args (s/*\n                         (s/cat :k #{:args :fn :ret} :v any?)))]\n\n    (-> (s/conform fspec-sp form)\n        (update :args (fn [args] (filter #(some? (:v %)) args)))\n        (->> (s/unform fspec-sp)))))\n\n(defn ^:private print-check-result [check-result]\n  (let [{:keys [sym spec failure] :or {sym '<unknown>}} check-result\n        ret #?(:clj (:clojure.spec.test.check/ret check-result)\n               :cljs (:clojure.test.check/ret check-result))\n        explain-data (ex-data failure)\n        bad-args (or #?(:clj (:clojure.spec.test.alpha/args explain-data)\n                        :cljs (:cljs.spec.test.alpha/args explain-data))\n                     (first (:fail ret)))\n        failure-reason (::s/failure explain-data)\n        sym (or sym '<unknown>)]\n    (str\n     ;; CLJS does not contain symbol if function is undefined\n     (label check-header-size (str \"Checked \" sym) \"=\")\n     \"\\n\\n\"\n     (cond\n       ;; FIXME - once we have a function that can highlight\n       ;;         a spec, use it here to make this error message clearer\n       #?(:clj (and failure (= :no-gen failure-reason))\n          ;; Workaround for CLJS\n          :cljs (and\n                 failure\n                 (re-matches #\"Unable to construct gen at.*\" (.-message failure))))\n       (let [path (::s/path explain-data)]\n         (str\n          #?(:clj\n             (str\n              \"Unable to construct generator for \"\n              (ansi/color (pr-str path) :error-key))\n             :cljs\n             (.-message failure))\n          \" in\\n\\n\"\n          (printer/indent (str (s/form (:args (:spec check-result)))))\n          \"\\n\"))\n\n       (= :no-args-spec failure-reason)\n       (str\n        \"Failed to check function.\\n\\n\"\n        (ansi/color (printer/indent (printer/pprint-str\n                                     (minimal-fspec (s/form spec)))) :bad-value)\n        \"\\n\\nshould contain an :args spec\\n\")\n\n       (= :no-fn failure-reason)\n       (if (some? sym)\n         (str\n          \"Failed to check function.\\n\\n\"\n          (ansi/color (printer/indent (pr-str sym)) :bad-value)\n          \"\\n\\nis not defined\\n\")\n         ;; CLJS doesn't set the symbol\n         (str\n          \"Cannot check undefined function\\n\"))\n\n       (and explain-data\n            (= :check-failed (-> explain-data ::s/failure)))\n       (with-out-str\n         (s/*explain-out* (update\n                           explain-data\n                           ::s/problems\n                           #(map\n                             (fn [p]\n                               (assoc p :expound/check-fn-call (concat (list sym)\n                                                                       bad-args)))\n                             %))))\n\n       failure\n       (str\n        (ansi/color (printer/indent (printer/pprint-str\n                                     (concat (list sym) bad-args))) :bad-value)\n        \"\\n\\n threw error\\n\\n\"\n        (printer/pprint-str failure))\n\n       :else\n       \"Success!\\n\"))))\n\n(defn ^:private explain-data? [data]\n  (s/valid?\n   (s/keys :req\n           [::s/problems\n            ::s/spec\n            ::s/value]\n           :opt\n           [::s/failure])\n   data))\n\n(defn ^:private check-result? [data]\n  (s/valid?\n   (s/keys :req-un [::spec]\n           :opt-un [::sym\n                    ::failure\n                    :clojure.spec.test.check/ret])\n   data))\n\n(defn ^:private printer-str [opts data]\n  (let [opts' (merge {:show-valid-values? false\n                      :print-specs? true}\n                     opts)\n        enable-color? (or (not= :none (get opts :theme :none))\n                          ansi/*enable-color*)]\n    (binding [*value-str-fn* (get opts :value-str-fn (partial value-in-context opts'))\n              ansi/*enable-color* enable-color?\n              ansi/*print-styles* (case (get opts :theme (if enable-color? :figwheel-theme :none))\n                                    :figwheel-theme\n                                    figwheel-theme\n\n                                    :none\n                                    {})]\n\n      (cond\n        (or (explain-data? data)\n            (nil? data))\n        (print-explain-data opts' data)\n\n        (check-result? data)\n        (print-check-result data)\n\n        :else\n        (throw (ex-info  \"Unknown data:\\n\\n\" {:data data}))))))\n\n#?(:clj\n   (defn ^:private ns-qualify\n     \"Qualify symbol s by resolving it or using the current *ns*.\"\n     [s]\n     (if-let [ns-sym (some-> s namespace symbol)]\n       (or (some-> (get (ns-aliases *ns*) ns-sym) str (symbol (name s)))\n           s)\n       (symbol (str (.name *ns*)) (str s)))))\n\n;;;;;; public ;;;;;;\n\n(s/fdef error-message\n        :args (s/cat :k qualified-keyword?)\n        :ret (s/nilable string?))\n(defn error-message\n  \"Given a spec named `k`, return its human-readable error message.\"\n  [k]\n  (get @registry-ref k))\n\n(s/fdef custom-printer\n        :args (s/cat :opts :expound.printer/opts)\n        :ret ifn?)\n(defn custom-printer\n  \"Returns a printer.\n\n  Options:\n   - `:show-valid-values?` - if `false`, replaces valid values with \\\"...\\\"\n   - `:value-str-fn`       - function to print bad values\n   - `:print-specs?`       - if `true`, display \\\"Relevant specs\\\" section. Otherwise, omit that section.\n   - `:theme`               - enables color theme. Possible values: `:figwheel-theme`, `:none`\"\n  [opts]\n  (fn [explain-data]\n    (print (printer-str opts explain-data))))\n\n(s/fdef printer\n        :args (s/cat :explain-data map?)\n        :ret nil?)\n(defn printer\n  \"Prints `explain-data` in a human-readable format.\"\n  [explain-data]\n  ((custom-printer {}) explain-data))\n\n(s/fdef expound-str\n        :args (s/cat :spec :expound.spec/spec\n                     :form any?)\n        :ret string?)\n(defn expound-str\n  \"Given a `spec` and a `form`, either returns success message or a human-readable error message.\"\n  [spec form]\n  ;; expound was initially released with support\n  ;; for CLJS 1.9.542 which did not include\n  ;; the value in the explain data, so we patch it\n  ;; in to avoid breaking back compat (at least for now)\n  (let [explain-data (s/explain-data spec form)]\n    (printer-str {}\n                 (if explain-data\n                   (assoc explain-data\n                          ::s/value form)\n                   nil))))\n\n(s/fdef expound\n        :args (s/cat :spec :expound.spec/spec\n                     :form any?)\n        :ret nil?)\n(defn expound\n  \"Given a `spec` and a `form`, either prints a success message or a human-readable error message.\"\n  [spec form]\n  (print (expound-str spec form)))\n\n(s/fdef defmsg\n        :args (s/cat :k qualified-keyword?\n                     :error-message string?)\n        :ret nil?)\n(defn defmsg\n  \"Associates the spec named `k` with `error-message`.\"\n  [k error-message]\n  (swap! registry-ref assoc k error-message)\n  nil)\n\n#?(:clj\n   (defmacro def\n     \"DEPRECATED: Prefer `defmsg` \n\n  Define a spec with an optional `error-message`.\n\n  Replaces `clojure.spec.alpha/def` but optionally takes a human-readable `error-message` (will only be used for predicates) e.g. \\\"should be a string\\\".\"\n     {:deprecated \"0.7.2\"}\n     ([k spec-form]\n      `(s/def ~k ~spec-form))\n     ([k spec-form error-message]\n      (let [k (if (symbol? k) (ns-qualify k) k)]\n        `(do\n           (defmsg '~k ~error-message)\n           (s/def ~k ~spec-form))))))\n\n(s/fdef explain-result\n        :args (s/cat :check-result (s/nilable map?))\n        :ret nil?)\n(defn explain-result\n  \"Given a result from `clojure.spec.test.alpha/check`, prints a summary of the result.\"\n  [check-result]\n  (when (= s/*explain-out* s/explain-printer)\n    (throw (ex-info \"Cannot print check results with default printer. Use 'set!' or 'binding' to use Expound printer.\" {})))\n  (s/*explain-out* check-result))\n\n(s/fdef explain-result-str\n        :args (s/cat :check-result (s/nilable map?))\n        :ret string?)\n(defn explain-result-str\n  \"Given a result from `clojure.spec.test.alpha/check`, returns a string summarizing the result.\"\n  [check-result]\n  (with-out-str (explain-result check-result)))\n\n(s/fdef explain-results\n        :args (s/cat :check-results (s/coll-of (s/nilable map?)))\n        :ret nil?)\n(defn explain-results\n  \"Given a sequence of results from `clojure.spec.test.alpha/check`, prints a summary of the results.\"\n  [check-results]\n  (doseq [check-result (butlast check-results)]\n    (explain-result check-result)\n    (print \"\\n\\n\"))\n  (explain-result (last check-results)))\n\n(s/fdef explain-results-str\n        :args (s/cat :check-results (s/coll-of (s/nilable map?)))\n        :ret string?)\n(defn explain-results-str\n  \"Given a sequence of results from `clojure.spec.test.alpha/check`, returns a string summarizing the results.\"\n  [check-results]\n  (with-out-str (explain-results check-results)))\n"]}