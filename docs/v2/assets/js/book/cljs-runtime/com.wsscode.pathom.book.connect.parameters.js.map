{"version":3,"sources":["com/wsscode/pathom/book/connect/parameters.cljs"],"mappings":";;;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAkBL,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBC;AAAhB,AAAA,AAAAD;;AAAA,AAAkCE,AAAIC;AAAtC,AAGE,AAAAC,AAAqB,AAAA,AAAA,AAAA,AAAIF;AAAzBE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAA,AAAA,AACiB,AAAAC,AAASZ;AAAT,AAAA,AACE,AAAAa,AAAUF;AAAM,AAAAC,AAACE,AAAQH;;AAD3BC;;;;AAGnB,AAAKG,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACyCC,AACAC,AACAC,AACAC,AAE3BC,AACC,AAAA,AAAA,AAACC,AAAiCnB,AAClCoB,AACAC;AAElB","names":["com.wsscode.pathom.book.connect.parameters/instruments","com.wsscode.pathom.connect/resolver","G__65644","com.wsscode.pathom.book.connect.parameters/instruments-list","env","_","map__65645","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sort","G__65658","cljs.core/Keyword","cljs.core.sort_by","com.wsscode.pathom.book.connect.parameters/parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/reader2","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.connect/mutate","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.parameters\n  (:require [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]))\n\n(def instruments\n  [{:instrument/id 1\n    :instrument/brand \"Fender\"\n    :instrument/type :instrument.type/guitar\n    :instrument/price 300}\n   {:instrument/id 2\n    :instrument/brand \"Tajima\"\n    :instrument/type :instrument.type/ukulele\n    :instrument/price 50}\n   {:instrument/id 3\n    :instrument/brand \"Ibanez\"\n    :instrument/type :instrument.type/bass\n    :instrument/price 270}\n   {:instrument/id 4\n    :instrument/brand \"Cassio\"\n    :instrument/type :instrument.type/piano\n    :instrument/price 160}])\n\n(pc/defresolver instruments-list [env _]\n  {::pc/output [{::instruments [:instrument/id :instrument/brand\n                                :instrument/type :instrument/price]}]}\n  (let [{:keys [sort]} (-> env :ast :params)]\n    {::instruments (cond->> instruments\n                     (keyword? sort) (sort-by sort))}))\n\n(def parser\n  (p/parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/reader2\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}}\n     ::p/mutate  pc/mutate\n     ::p/plugins [(pc/connect-plugin {::pc/register instruments-list})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n\n(comment\n  (clojure.core.async/<!! (parser {} '[(::instruments {:sort :instrument/brand})])))\n"]}