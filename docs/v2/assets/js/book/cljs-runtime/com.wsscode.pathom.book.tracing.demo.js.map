{"version":3,"sources":["com/wsscode/pathom/book/tracing/demo.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","G__73439","com.wsscode.pathom.book.tracing.demo/slow-root","env","_","c__45808__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45809__auto__","switch__45525__auto__","state_73485","state_val_73486","inst_73477","inst_73478","inst_73480","inst_73481","cljs.core/PersistentHashMap","statearr-73491","statearr-73492","cljs.core.async.impl.ioc-helpers/process-exception","statearr-73495","cljs.core.async.impl.ioc-helpers/add-exception-frame","inst_73446","cljs.core.get","statearr-73499","statearr-73500","inst_73472","cljs.core.async.impl.ioc-helpers/take!","inst_73442","statearr-73502","inst_73483","cljs.core.async.impl.ioc-helpers/return-chan","inst_73474","inst_73475","com.wsscode.common.async-cljs/throw-err","statearr-73504","inst_73448","inst_73449","inst_73450","inst_73451","inst_73452","inst_73453","inst_73454","com.wsscode.pathom.trace.trace_enter","inst_73455","statearr-73505","inst_73457","inst_73458","inst_73459","inst_73460","inst_73461","inst_73462","inst_73464","inst_73465","inst_73466","com.wsscode.pathom.trace.trace_leave","statearr-73506","statearr-73508","statearr-73511","state-machine__45526__auto__","ret-value__45527__auto__","result__45528__auto__","cljs.core/keyword-identical?","e73513","js/Object","ex__45529__auto__","statearr-73515","state__45810__auto__","statearr-73534","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","G__73541","com.wsscode.pathom.book.tracing.demo/slow-root-dep","state_73581","state_val_73582","inst_73571","inst_73573","inst_73574","inst_73575","statearr-73591","statearr-73592","statearr-73596","inst_73549","statearr-73597","statearr-73598","inst_73566","inst_73543","statearr-73602","inst_73578","inst_73568","inst_73569","statearr-73620","inst_73551","inst_73552","inst_73553","inst_73554","inst_73556","statearr-73621","inst_73559","inst_73560","inst_73561","inst_73562","inst_73563","inst_73564","statearr-73625","statearr-73626","statearr-73633","e73636","statearr-73637","statearr-73645","G__73652","com.wsscode.pathom.book.tracing.demo/error-root-dep","state_73716","state_val_73717","inst_73700","inst_73703","inst_73706","inst_73707","statearr-73721","statearr-73722","statearr-73724","inst_73665","statearr-73725","statearr-73726","inst_73695","inst_73660","statearr-73732","inst_73712","inst_73697","inst_73698","statearr-73739","inst_73667","inst_73668","inst_73669","inst_73670","inst_73671","inst_73672","inst_73673","inst_73674","statearr-73744","inst_73676","inst_73677","inst_73678","inst_73681","inst_73685","inst_73686","inst_73687","inst_73688","inst_73689","statearr-73747","statearr-73749","statearr-73754","e73757","statearr-73759","statearr-73762","cljs.core.ex_info","com.wsscode.pathom.book.tracing.demo/app-registry","com.wsscode.pathom.trace/trace-tree-collect","x","row","com.wsscode.pathom.trace/tree-assoc-detail","com.wsscode.pathom.book.tracing.demo/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.tracing.demo\n  (:require [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.trace :as pt]\n            [clojure.core.async :as async]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]))\n\n(pc/defresolver slow-root [env _]\n  {::pc/output [::slow-root]}\n  (go-catch\n    ; here we use the tracing macro to compute the time for the timeout\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 255, 0, 0.5)\"}}\n      (<? (async/timeout 200)))\n    {::slow-root \"foo\"}))\n\n(pc/defresolver slow-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event}\n      (<? (async/timeout 200)))\n    {::root-dep \"nah\"}))\n\n(pc/defresolver error-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep-err]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 0, 0, 0.5)\"}\n                     ::data     \"Error message\"}\n      (<? (async/timeout 200)))\n    (throw (ex-info \"Meh\" {}))))\n\n(def app-registry [slow-root slow-root-dep error-root-dep])\n\n; to display the tracing with the results you must register the event type\n(defmethod pt/trace-tree-collect ::my-event [x row]\n  (-> row\n      ; the sequence at the end is a list with the keys to display in the trace when\n      ; user mouses over the event\n      (pt/tree-assoc-detail x [::data])))\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/parallel-reader\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n\n; to get raw tracing results, include the :com.wsscode.pathom/trace key in your query\n(parser {} [:a :b\n            :com.wsscode.pathom/trace])\n\n;=>\n;{:com.wsscode.pathom/trace\n; {:start 0,\n;  :path [],\n;  :duration 5049,\n;  :details [{:event \"process-pending\",\n;             :duration 0,\n;             :start 1,\n;             :provides #{:com.wsscode.pathom/trace},\n;             :merge-result? false}\n;            {:event \"flush-watchers-loop\", :duration 0, :start 1}\n;            {:event \"reset-loop\",\n;             :duration 0,\n;             :start 1,\n;             :loop-keys [:com.wsscode.pathom/trace]}\n; ...\n\n\n"]}