{"version":3,"sources":["com/wsscode/pathom/book/tracing/demo.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","G__66102","com.wsscode.pathom.book.tracing.demo/slow-root","env","_","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_66147","state_val_66148","inst_66131","cljs.core.async.impl.ioc-helpers/take!","statearr-66150","inst_66103","statearr-66151","inst_66111","inst_66113","inst_66114","inst_66115","cljs.core/PersistentHashMap","inst_66116","inst_66117","inst_66118","com.wsscode.pathom.trace.trace_enter","inst_66119","statearr-66153","inst_66143","cljs.core.async.impl.ioc-helpers/return-chan","statearr-66158","cljs.core/cons","inst_66109","cljs.core.get","statearr-66159","statearr-66166","inst_66121","inst_66122","com.wsscode.common.async-cljs/throw-err","inst_66123","inst_66124","inst_66125","inst_66126","inst_66127","inst_66128","inst_66129","com.wsscode.pathom.trace.trace_leave","statearr-66180","statearr-66181","statearr-66185","cljs.core/rest","ex66157","statearr-66187","statearr-66188","inst_66133","inst_66134","statearr-66192","inst_66136","inst_66137","inst_66139","inst_66140","statearr-66198","statearr-66200","statearr-66203","statearr-66205","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e66208","statearr-66209","cljs.core/seq","statearr-66211","cljs.core/first","state__48841__auto__","statearr-66213","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","G__66215","com.wsscode.pathom.book.tracing.demo/slow-root-dep","state_66259","state_val_66261","inst_66245","statearr-66281","inst_66221","statearr-66282","inst_66231","inst_66233","inst_66234","inst_66235","inst_66236","statearr-66288","inst_66256","statearr-66292","inst_66228","statearr-66293","statearr-66296","inst_66238","inst_66239","inst_66240","inst_66241","inst_66242","inst_66243","statearr-66301","statearr-66303","statearr-66304","ex66291","statearr-66307","statearr-66309","inst_66247","inst_66248","statearr-66311","inst_66250","inst_66251","inst_66252","inst_66253","statearr-66316","statearr-66318","statearr-66319","statearr-66323","e66325","statearr-66326","statearr-66331","statearr-66337","G__66341","com.wsscode.pathom.book.tracing.demo/error-root-dep","state_66420","state_val_66421","inst_66405","statearr-66426","inst_66352","statearr-66433","inst_66372","inst_66382","inst_66383","inst_66384","inst_66385","inst_66386","inst_66387","inst_66392","statearr-66440","inst_66417","statearr-66443","inst_66362","statearr-66446","statearr-66447","inst_66394","inst_66395","inst_66396","inst_66398","inst_66399","inst_66400","inst_66401","inst_66402","inst_66403","statearr-66454","statearr-66455","statearr-66458","ex66442","statearr-66463","statearr-66465","inst_66407","inst_66408","statearr-66468","inst_66411","inst_66412","inst_66413","inst_66414","statearr-66470","statearr-66475","statearr-66477","statearr-66478","e66483","statearr-66484","statearr-66485","statearr-66487","cljs.core.ex_info","com.wsscode.pathom.book.tracing.demo/app-registry","com.wsscode.pathom.trace/trace-tree-collect","x","row","com.wsscode.pathom.trace/tree-assoc-detail","com.wsscode.pathom.book.tracing.demo/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.tracing.demo\n  (:require [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.trace :as pt]\n            [clojure.core.async :as async]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]))\n\n(pc/defresolver slow-root [env _]\n  {::pc/output [::slow-root]}\n  (go-catch\n    ; here we use the tracing macro to compute the time for the timeout\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 255, 0, 0.5)\"}}\n      (<? (async/timeout 200)))\n    {::slow-root \"foo\"}))\n\n(pc/defresolver slow-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event}\n      (<? (async/timeout 200)))\n    {::root-dep \"nah\"}))\n\n(pc/defresolver error-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep-err]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 0, 0, 0.5)\"}\n                     ::data     \"Error message\"}\n      (<? (async/timeout 200)))\n    (throw (ex-info \"Meh\" {}))))\n\n(def app-registry [slow-root slow-root-dep error-root-dep])\n\n; to display the tracing with the results you must register the event type\n(defmethod pt/trace-tree-collect ::my-event [x row]\n  (-> row\n      ; the sequence at the end is a list with the keys to display in the trace when\n      ; user mouses over the event\n      (pt/tree-assoc-detail x [::data])))\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/parallel-reader\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n\n; to get raw tracing results, include the :com.wsscode.pathom/trace key in your query\n(parser {} [:a :b\n            :com.wsscode.pathom/trace])\n\n;=>\n;{:com.wsscode.pathom/trace\n; {:start 0,\n;  :path [],\n;  :duration 5049,\n;  :details [{:event \"process-pending\",\n;             :duration 0,\n;             :start 1,\n;             :provides #{:com.wsscode.pathom/trace},\n;             :merge-result? false}\n;            {:event \"flush-watchers-loop\", :duration 0, :start 1}\n;            {:event \"reset-loop\",\n;             :duration 0,\n;             :start 1,\n;             :loop-keys [:com.wsscode.pathom/trace]}\n; ...\n\n\n"]}