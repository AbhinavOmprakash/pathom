{"version":3,"sources":["com/wsscode/pathom/book/tracing/demo.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","G__93851","com.wsscode.pathom.book.tracing.demo/slow-root","env","_","c__47946__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__47947__auto__","switch__47663__auto__","state_93903","state_val_93904","inst_93896","inst_93897","inst_93898","inst_93899","cljs.core/PersistentHashMap","statearr-93908","statearr-93909","cljs.core.async.impl.ioc-helpers/process-exception","statearr-93910","cljs.core.async.impl.ioc-helpers/add-exception-frame","inst_93861","cljs.core.get","statearr-93913","statearr-93915","inst_93891","cljs.core.async.impl.ioc-helpers/take!","inst_93856","statearr-93920","inst_93901","cljs.core.async.impl.ioc-helpers/return-chan","inst_93893","inst_93894","com.wsscode.common.async-cljs/throw-err","statearr-93938","inst_93865","inst_93870","inst_93873","inst_93874","inst_93875","inst_93876","inst_93877","com.wsscode.pathom.trace.trace_enter","inst_93878","statearr-93942","inst_93880","inst_93881","inst_93882","inst_93883","inst_93884","inst_93885","inst_93886","inst_93887","inst_93888","com.wsscode.pathom.trace.trace_leave","statearr-93947","statearr-93955","statearr-93959","state-machine__47664__auto__","ret-value__47665__auto__","result__47666__auto__","cljs.core/keyword-identical?","e93961","js/Object","ex__47667__auto__","statearr-93962","state__47948__auto__","statearr-93979","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","G__93982","com.wsscode.pathom.book.tracing.demo/slow-root-dep","state_94018","state_val_94019","inst_94010","inst_94011","inst_94012","inst_94013","statearr-94024","statearr-94026","statearr-94027","inst_93989","statearr-94029","statearr-94030","inst_94005","inst_93985","statearr-94033","inst_94015","inst_94007","inst_94008","statearr-94035","inst_93992","inst_93993","inst_93994","inst_93995","inst_93996","statearr-94055","inst_93998","inst_93999","inst_94000","inst_94001","inst_94002","inst_94003","statearr-94063","statearr-94064","statearr-94067","e94069","statearr-94073","statearr-94074","G__94077","com.wsscode.pathom.book.tracing.demo/error-root-dep","state_94115","state_val_94116","inst_94108","inst_94109","inst_94110","inst_94111","statearr-94124","statearr-94125","statearr-94128","inst_94082","statearr-94132","statearr-94133","inst_94103","inst_94078","statearr-94134","inst_94113","inst_94105","inst_94106","statearr-94137","inst_94084","inst_94085","inst_94086","inst_94087","inst_94088","inst_94089","inst_94090","inst_94091","statearr-94143","inst_94093","inst_94094","inst_94095","inst_94096","inst_94097","inst_94098","inst_94099","inst_94100","inst_94101","statearr-94145","statearr-94146","statearr-94152","e94153","statearr-94154","statearr-94155","cljs.core.ex_info","com.wsscode.pathom.book.tracing.demo/app-registry","com.wsscode.pathom.trace/trace-tree-collect","x","row","com.wsscode.pathom.trace/tree-assoc-detail","com.wsscode.pathom.book.tracing.demo/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.core/env-placeholder-reader","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.tracing.demo\n  (:require [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.trace :as pt]\n            [clojure.core.async :as async]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]))\n\n(pc/defresolver slow-root [env _]\n  {::pc/output [::slow-root]}\n  (go-catch\n    ; here we use the tracing macro to compute the time for the timeout\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 255, 0, 0.5)\"}}\n      (<? (async/timeout 200)))\n    {::slow-root \"foo\"}))\n\n(pc/defresolver slow-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event}\n      (<? (async/timeout 200)))\n    {::root-dep \"nah\"}))\n\n(pc/defresolver error-root-dep [env _]\n  {::pc/input #{::slow-root}\n   ::pc/output [::root-dep-err]}\n  (go-catch\n    (pt/tracing env {::pt/event ::my-event\n                     ::pt/style {:fill \"rgba(255, 0, 0, 0.5)\"}\n                     ::data     \"Error message\"}\n      (<? (async/timeout 200)))\n    (throw (ex-info \"Meh\" {}))))\n\n(def app-registry [slow-root slow-root-dep error-root-dep])\n\n; to display the tracing with the results you must register the event type\n(defmethod pt/trace-tree-collect ::my-event [x row]\n  (-> row\n      ; the sequence at the end is a list with the keys to display in the trace when\n      ; user mouses over the event\n      (pt/tree-assoc-detail x [::data])))\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader               [p/map-reader\n                                            pc/parallel-reader\n                                            pc/open-ident-reader\n                                            p/env-placeholder-reader]\n                  ::p/placeholder-prefixes #{\">\"}}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n\n; to get raw tracing results, include the :com.wsscode.pathom/trace key in your query\n(parser {} [:a :b\n            :com.wsscode.pathom/trace])\n\n;=>\n;{:com.wsscode.pathom/trace\n; {:start 0,\n;  :path [],\n;  :duration 5049,\n;  :details [{:event \"process-pending\",\n;             :duration 0,\n;             :start 1,\n;             :provides #{:com.wsscode.pathom/trace},\n;             :merge-result? false}\n;            {:event \"flush-watchers-loop\", :duration 0, :start 1}\n;            {:event \"reset-loop\",\n;             :duration 0,\n;             :start 1,\n;             :loop-keys [:com.wsscode.pathom/trace]}\n; ...\n\n\n"]}