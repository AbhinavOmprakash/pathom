{"version":3,"sources":["com/wsscode/pathom/book/async/demos.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.async.demos/indexes","cljs.core.atom","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.book","js/com.wsscode.pathom.book.async","js/com.wsscode.pathom.book.async.demos","js/com.wsscode.pathom.book.async.demos.resolver-con","method-table__4613__auto__","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get","fexpr__65486","cljs.core/MultiFn","cljs.core.symbol","com.wsscode.pathom.book.async.demos/resolver-con","com.wsscode.pathom.connect/resolver-dispatch","com.wsscode.pathom.book.async.demos/defresolver","com.wsscode.pathom.connect/resolver-factory","com.wsscode.pathom.book.async.demos/fetch-json","url","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_65514","state_val_65515","statearr-65517","_","statearr-65518","cljs.core/cons","inst_65497","inst_65498","com.wsscode.common.async-cljs/promise->chan","cljs.core.async.impl.ioc-helpers/take!","inst_65511","cljs.core.async.impl.ioc-helpers/return-chan","inst_65489","statearr-65520","statearr-65521","cljs.core/rest","ex65519","statearr-65522","statearr-65523","inst_65506","inst_65507","com.wsscode.common.async-cljs/consumer-pair","inst_65508","statearr-65524","statearr-65525","inst_65501","inst_65502","inst_65503","inst_65504","statearr-65527","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e65529","statearr-65530","cljs.core/seq","statearr-65531","cljs.core/first","state__48841__auto__","statearr-65533","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/fetch","cljs.core.js__GT_clj","state_65552","state_val_65553","statearr-65554","statearr-65555","inst_65540","inst_65541","statearr-65556","inst_65550","inst_65534","statearr-65558","statearr-65559","ex65557","statearr-65560","statearr-65561","inst_65543","inst_65544","com.wsscode.common.async-cljs/throw-err","inst_65545","inst_65546","inst_65547","cljs.core/PersistentHashMap","statearr-65564","statearr-65566","statearr-65567","e65568","statearr-65569","statearr-65570","statearr-65571","com.wsscode.pathom.book.async.demos/namespace-keys","x","ns","cljs.core.into","cljs.core.map","p__65572","vec__65573","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","com.wsscode.pathom.book.async.demos/adapt-schedule","schedule","com.wsscode.pathom.book.async.demos/adapt-externals","externals","p__65576","vec__65577","p__65580","map__65581","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","com.wsscode.pathom.book.async.demos/adapt-show","show","cljs.core.dissoc","cljs.core.update","cljs.core.merge","p__65583","map__65584","id","state_65602","state_val_65603","statearr-65604","statearr-65605","inst_65592","inst_65593","inst_65600","inst_65586","statearr-65607","statearr-65608","ex65606","statearr-65609","statearr-65610","inst_65595","inst_65596","inst_65597","statearr-65611","statearr-65612","statearr-65613","e65614","statearr-65615","statearr-65616","statearr-65617","com.wsscode.pathom.book.async.demos/adapt-episode","episode","p__65618","map__65619","state_65642","state_val_65643","statearr-65647","statearr-65648","inst_65629","inst_65630","inst_65631","statearr-65649","inst_65640","inst_65623","statearr-65651","statearr-65653","ex65650","statearr-65654","statearr-65655","inst_65633","inst_65634","inst_65635","inst_65636","inst_65637","statearr-65656","statearr-65657","statearr-65659","e65660","statearr-65661","statearr-65662","statearr-65663","cljs.core.mapv","com.wsscode.pathom.book.async.demos/parser","cljs.core/deref","com.wsscode.pathom.core/async-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/all-async-readers","com.wsscode.pathom.core/ident-join-reader","com.wsscode.pathom.core.placeholder_reader","com.wsscode.pathom.core/error-handler-plugin","js/com.wsscode.pathom.book.async.demos.AsyncParserDemo","this__52443__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x65675","this__51361__auto__","*reconciler*-orig-val__65676","fulcro.client.primitives/*reconciler*","*depth*-orig-val__65677","fulcro.client.primitives/*depth*","*shared*-orig-val__65678","fulcro.client.primitives/*shared*","*instrument*-orig-val__65679","fulcro.client.primitives/*instrument*","*parent*-orig-val__65680","fulcro.client.primitives/*parent*","*reconciler*-temp-val__65681","fulcro.client.primitives/get-reconciler","*depth*-temp-val__65682","fulcro.client.primitives/depth","*shared*-temp-val__65683","fulcro.client.primitives.shared","*instrument*-temp-val__65684","fulcro.client.primitives/instrument","*parent*-temp-val__65685","map__65686","fulcro.client.primitives/props","x65695","p__65696","map__65697","x65700","p__65705","map__65708","this__52446__auto__","writer__52447__auto__","opt__52448__auto__","cljs.core/-write","com.wsscode.pathom.book.async.demos/AsyncParserDemo","this","random-dog-url","props","fulcro.client.data-fetch/marker-table","marker","fulcro.client.localized_dom.div","fulcro.client.data-fetch/loading?","fulcro.client.localized_dom.button","fulcro.client.data_fetch.load_field","fulcro.client.localized_dom.img","com.wsscode.pathom.book.async.demos/async-parser-demo","fulcro.client.primitives.factory"],"sourcesContent":["(ns com.wsscode.pathom.book.async.demos\n  (:require [com.wsscode.pathom.book.app-types :as app-types]\n            [com.wsscode.pathom.fulcro.network :as network]\n            [com.wsscode.common.async-cljs :refer [go-catch <? <!p]]\n            [goog.object :as gobj]\n            [fulcro.client :as fulcro]\n            [fulcro.client.data-fetch :as df]\n            [fulcro.client.primitives :as fp]\n            [fulcro.client.localized-dom :as dom]\n            [com.wsscode.pathom.book.async.intro :as d.intro]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]))\n\n(def indexes (atom {}))\n(defmulti resolver-con pc/resolver-dispatch)\n\n(def defresolver (pc/resolver-factory resolver-con indexes))\n\n(defn fetch-json [url]\n  (go-catch\n    (-> (js/fetch url) <!p\n        (.json) <!p\n        (js->clj :keywordize-keys true))))\n\n(defresolver `random-dog\n  {::pc/output [:random-dog-url]\n   ::pc/cache? false}\n  (fn [_ _]\n    (go-catch\n      {:random-dog-url\n       (-> (fetch-json \"https://dog.ceo/api/breeds/image/random\") <?\n           :message)})))\n\n(defn namespace-keys [x ns]\n  (into {} (map (fn [[k v]] [(keyword ns (name k)) v])) x))\n\n(defn adapt-schedule [schedule]\n  (namespace-keys schedule \"tvmaze.schedule\"))\n\n(defn adapt-externals [externals]\n  (into {} (map (fn [[k v]] [(keyword (name k) \"id\") v])) externals))\n\n(defn adapt-show [{:keys [externals] :as show}]\n  (-> show\n      (dissoc :externals :_links)\n      (update :schedule adapt-schedule)\n      (namespace-keys \"tvmaze.show\")\n      (merge (adapt-externals externals))))\n\n(defresolver `tvmaze-show-by-id\n  {::pc/input  #{:tvmaze.show/id}\n   ::pc/output [:tvmaze.show/url\n                {:tvmaze.show/schedule [:tvmaze.schedule/time :tvmaze.schedule/days]}\n                :thetvdb/id\n                :tvrage/id\n                :tvmaze.show/weight\n                :tvmaze.show/type\n                :tvmaze.show/name\n                :tvmaze.show/id\n                {:tvmaze.show/webChannel [:id :name :country]}\n                :tvmaze.show/status\n                :tvmaze.show/language\n                {:tvmaze.show/image [:medium :original]}\n                :tvmaze.show/runtime\n                :tvmaze.show/updated\n                :imdb/id\n                {:tvmaze.show/network [:id :name {:country [:name :code :timezone]}]}\n                :tvmaze.show/officialSite\n                :tvmaze.show/summary\n                {:tvmaze.show/rating [:average]}\n                :tvmaze.show/premiered\n                :tvmaze.show/genres]}\n  (fn [_ {:keys [tvmaze.show/id]}]\n    (go-catch\n      (-> (fetch-json (str \"http://api.tvmaze.com/shows/\" id)) <?\n          adapt-show))))\n\n(defn adapt-episode [episode]\n  (-> episode\n      (dissoc :_links)\n      (namespace-keys \"tvmaze.episode\")))\n\n(defresolver `tvmaze-show-episodes\n  {::pc/input  #{:tvmaze.show/id}\n   ::pc/output [{:tvmaze.show/episodes [:tvmaze.episode/runtime\n                                        :tvmaze.episode/season\n                                        :tvmaze.episode/url\n                                        :tvmaze.episode/id\n                                        {:tvmaze.episode/image [:medium :original]}\n                                        :tvmaze.episode/airstamp\n                                        :tvmaze.episode/airtime\n                                        :tvmaze.episode/summary\n                                        :tvmaze.episode/name\n                                        :tvmaze.episode/number\n                                        :tvmaze.episode/airdate]}]}\n  (fn [_ {:keys [tvmaze.show/id]}]\n    (go-catch\n      (->> (fetch-json (str \"http://api.tvmaze.com/shows/\" id \"/episodes\")) <?\n           (mapv adapt-episode)\n           (hash-map :tvmaze.show/episodes)))))\n\n(comment\n  (go-catch\n    (let [data (<? (fetch-json \"http://api.tvmaze.com/shows/563/episodes\"))]\n      (def res data)))\n\n  (->> res (take 4))\n  (-> (map adapt-episode res) (->> (hash-map :tvmaze.show/episodes)) pc/data->shape))\n\n(def parser (p/async-parser {::p/env     {::p/reader             [p/map-reader\n                                                                  pc/all-async-readers\n                                                                  p/ident-join-reader\n                                                                  (p/placeholder-reader)]\n                                          ::pc/resolver-dispatch resolver-con\n                                          ::pc/indexes           @indexes}\n                             ::p/plugins [p/error-handler-plugin]}))\n\n(comment\n  (go-catch\n    (try\n      (-> (parser {} [{[:tvmaze.show/id 563] [:tvmaze.show/name\n                                              '*]}\n                      {:>/b [:random-dog-url]}]) <? js/console.log)\n      (catch :default e (js/console.error e)))))\n\n(fp/defsc AsyncParserDemo\n  [this {:keys [random-dog-url] :as props}]\n  {:ident (fn [] [::id \"singleton\"])\n   :query [::id :random-dog-url [df/marker-table ::dog-load]]}\n  (let [marker (get props [df/marker-table ::dog-load])]\n    (dom/div\n      (dom/div\n        (if (df/loading? marker)\n          (dom/button {:disabled true} \"Loading...\")\n          (dom/button {:onClick #(df/load-field this :random-dog-url {:marker ::dog-load})}\n            \"Load\")))\n      (if random-dog-url\n        (dom/div (dom/img {:src random-dog-url}))))))\n\n(def async-parser-demo (fp/factory AsyncParserDemo))\n"]}