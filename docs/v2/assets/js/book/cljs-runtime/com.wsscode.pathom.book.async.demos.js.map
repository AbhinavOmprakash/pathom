{"version":3,"sources":["com/wsscode/pathom/book/async/demos.cljs"],"mappings":"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","names":["com.wsscode.pathom.book.async.demos/indexes","cljs.core.atom","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.book","js/com.wsscode.pathom.book.async","js/com.wsscode.pathom.book.async.demos","js/com.wsscode.pathom.book.async.demos.resolver-con","method-table__4613__auto__","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get","fexpr__61249","cljs.core/MultiFn","cljs.core.symbol","com.wsscode.pathom.book.async.demos/resolver-con","com.wsscode.pathom.connect/resolver-dispatch","com.wsscode.pathom.book.async.demos/defresolver","com.wsscode.pathom.connect/resolver-factory","com.wsscode.pathom.book.async.demos/fetch-json","url","c__47946__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__47947__auto__","switch__47663__auto__","state_61268","state_val_61269","statearr-61270","inst_61266","cljs.core.async.impl.ioc-helpers/return-chan","inst_61250","statearr-61271","cljs.core.async.impl.ioc-helpers/process-exception","_","cljs.core.async.impl.ioc-helpers/add-exception-frame","inst_61254","inst_61255","com.wsscode.common.async-cljs/promise->chan","cljs.core.async.impl.ioc-helpers/take!","inst_61262","inst_61263","com.wsscode.common.async-cljs/consumer-pair","inst_61264","statearr-61272","inst_61257","inst_61258","inst_61259","inst_61260","statearr-61273","state-machine__47664__auto__","ret-value__47665__auto__","result__47666__auto__","cljs.core/keyword-identical?","e61274","js/Object","ex__47667__auto__","statearr-61275","state__47948__auto__","statearr-61276","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/fetch","cljs.core.js__GT_clj","state_61294","state_val_61295","statearr-61296","inst_61292","inst_61279","statearr-61297","inst_61283","inst_61284","statearr-61298","inst_61286","inst_61287","com.wsscode.common.async-cljs/throw-err","inst_61288","inst_61289","inst_61290","cljs.core/PersistentHashMap","statearr-61299","statearr-61300","e61301","statearr-61302","statearr-61303","com.wsscode.pathom.book.async.demos/namespace-keys","x","ns","cljs.core.into","cljs.core.map","p__61306","vec__61307","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","com.wsscode.pathom.book.async.demos/adapt-schedule","schedule","com.wsscode.pathom.book.async.demos/adapt-externals","externals","p__61310","vec__61311","p__61314","map__61315","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","com.wsscode.pathom.book.async.demos/adapt-show","show","cljs.core.dissoc","cljs.core.update","cljs.core.merge","p__61317","map__61318","id","state_61333","state_val_61334","statearr-61335","inst_61331","inst_61320","statearr-61336","inst_61324","inst_61325","inst_61327","inst_61328","inst_61329","statearr-61337","statearr-61338","e61344","statearr-61345","statearr-61346","com.wsscode.pathom.book.async.demos/adapt-episode","episode","p__61351","map__61352","state_61370","state_val_61371","statearr-61372","inst_61368","inst_61354","statearr-61373","inst_61358","inst_61359","inst_61360","statearr-61374","inst_61362","inst_61363","inst_61364","inst_61365","inst_61366","statearr-61375","statearr-61376","e61377","statearr-61378","statearr-61379","cljs.core.mapv","com.wsscode.pathom.book.async.demos/parser","cljs.core/deref","com.wsscode.pathom.core/async-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/all-async-readers","com.wsscode.pathom.core/ident-join-reader","com.wsscode.pathom.core.placeholder_reader","com.wsscode.pathom.core/error-handler-plugin","js/com.wsscode.pathom.book.async.demos.AsyncParserDemo","this__51967__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x61403","this__50885__auto__","*reconciler*-orig-val__61404","fulcro.client.primitives/*reconciler*","*depth*-orig-val__61405","fulcro.client.primitives/*depth*","*shared*-orig-val__61406","fulcro.client.primitives/*shared*","*instrument*-orig-val__61407","fulcro.client.primitives/*instrument*","*parent*-orig-val__61408","fulcro.client.primitives/*parent*","*reconciler*-temp-val__61409","fulcro.client.primitives/get-reconciler","*depth*-temp-val__61410","fulcro.client.primitives/depth","*shared*-temp-val__61411","fulcro.client.primitives.shared","*instrument*-temp-val__61412","fulcro.client.primitives/instrument","*parent*-temp-val__61413","map__61430","fulcro.client.primitives/props","x61444","p__61445","map__61446","x61453","p__61457","map__61459","this__51970__auto__","writer__51971__auto__","opt__51972__auto__","cljs.core/-write","com.wsscode.pathom.book.async.demos/AsyncParserDemo","this","random-dog-url","props","fulcro.client.data-fetch/marker-table","marker","fulcro.client.localized_dom.div","fulcro.client.data-fetch/loading?","fulcro.client.localized_dom.button","fulcro.client.data_fetch.load_field","fulcro.client.localized_dom.img","com.wsscode.pathom.book.async.demos/async-parser-demo","fulcro.client.primitives.factory"],"sourcesContent":["(ns com.wsscode.pathom.book.async.demos\n  (:require [com.wsscode.pathom.book.app-types :as app-types]\n            [com.wsscode.pathom.fulcro.network :as network]\n            [com.wsscode.common.async-cljs :refer [go-catch <? <!p]]\n            [goog.object :as gobj]\n            [fulcro.client :as fulcro]\n            [fulcro.client.data-fetch :as df]\n            [fulcro.client.primitives :as fp]\n            [fulcro.client.localized-dom :as dom]\n            [com.wsscode.pathom.book.async.intro :as d.intro]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]))\n\n(def indexes (atom {}))\n(defmulti resolver-con pc/resolver-dispatch)\n\n(def defresolver (pc/resolver-factory resolver-con indexes))\n\n(defn fetch-json [url]\n  (go-catch\n    (-> (js/fetch url) <!p\n        (.json) <!p\n        (js->clj :keywordize-keys true))))\n\n(defresolver `random-dog\n  {::pc/output [:random-dog-url]\n   ::pc/cache? false}\n  (fn [_ _]\n    (go-catch\n      {:random-dog-url\n       (-> (fetch-json \"https://dog.ceo/api/breeds/image/random\") <?\n           :message)})))\n\n(defn namespace-keys [x ns]\n  (into {} (map (fn [[k v]] [(keyword ns (name k)) v])) x))\n\n(defn adapt-schedule [schedule]\n  (namespace-keys schedule \"tvmaze.schedule\"))\n\n(defn adapt-externals [externals]\n  (into {} (map (fn [[k v]] [(keyword (name k) \"id\") v])) externals))\n\n(defn adapt-show [{:keys [externals] :as show}]\n  (-> show\n      (dissoc :externals :_links)\n      (update :schedule adapt-schedule)\n      (namespace-keys \"tvmaze.show\")\n      (merge (adapt-externals externals))))\n\n(defresolver `tvmaze-show-by-id\n  {::pc/input  #{:tvmaze.show/id}\n   ::pc/output [:tvmaze.show/url\n                {:tvmaze.show/schedule [:tvmaze.schedule/time :tvmaze.schedule/days]}\n                :thetvdb/id\n                :tvrage/id\n                :tvmaze.show/weight\n                :tvmaze.show/type\n                :tvmaze.show/name\n                :tvmaze.show/id\n                {:tvmaze.show/webChannel [:id :name :country]}\n                :tvmaze.show/status\n                :tvmaze.show/language\n                {:tvmaze.show/image [:medium :original]}\n                :tvmaze.show/runtime\n                :tvmaze.show/updated\n                :imdb/id\n                {:tvmaze.show/network [:id :name {:country [:name :code :timezone]}]}\n                :tvmaze.show/officialSite\n                :tvmaze.show/summary\n                {:tvmaze.show/rating [:average]}\n                :tvmaze.show/premiered\n                :tvmaze.show/genres]}\n  (fn [_ {:keys [tvmaze.show/id]}]\n    (go-catch\n      (-> (fetch-json (str \"http://api.tvmaze.com/shows/\" id)) <?\n          adapt-show))))\n\n(defn adapt-episode [episode]\n  (-> episode\n      (dissoc :_links)\n      (namespace-keys \"tvmaze.episode\")))\n\n(defresolver `tvmaze-show-episodes\n  {::pc/input  #{:tvmaze.show/id}\n   ::pc/output [{:tvmaze.show/episodes [:tvmaze.episode/runtime\n                                        :tvmaze.episode/season\n                                        :tvmaze.episode/url\n                                        :tvmaze.episode/id\n                                        {:tvmaze.episode/image [:medium :original]}\n                                        :tvmaze.episode/airstamp\n                                        :tvmaze.episode/airtime\n                                        :tvmaze.episode/summary\n                                        :tvmaze.episode/name\n                                        :tvmaze.episode/number\n                                        :tvmaze.episode/airdate]}]}\n  (fn [_ {:keys [tvmaze.show/id]}]\n    (go-catch\n      (->> (fetch-json (str \"http://api.tvmaze.com/shows/\" id \"/episodes\")) <?\n           (mapv adapt-episode)\n           (hash-map :tvmaze.show/episodes)))))\n\n(comment\n  (go-catch\n    (let [data (<? (fetch-json \"http://api.tvmaze.com/shows/563/episodes\"))]\n      (def res data)))\n\n  (->> res (take 4))\n  (-> (map adapt-episode res) (->> (hash-map :tvmaze.show/episodes)) pc/data->shape))\n\n(def parser (p/async-parser {::p/env     {::p/reader             [p/map-reader\n                                                                  pc/all-async-readers\n                                                                  p/ident-join-reader\n                                                                  (p/placeholder-reader)]\n                                          ::pc/resolver-dispatch resolver-con\n                                          ::pc/indexes           @indexes}\n                             ::p/plugins [p/error-handler-plugin]}))\n\n(comment\n  (go-catch\n    (try\n      (-> (parser {} [{[:tvmaze.show/id 563] [:tvmaze.show/name\n                                              '*]}\n                      {:>/b [:random-dog-url]}]) <? js/console.log)\n      (catch :default e (js/console.error e)))))\n\n(fp/defsc AsyncParserDemo\n  [this {:keys [random-dog-url] :as props}]\n  {:ident (fn [] [::id \"singleton\"])\n   :query [::id :random-dog-url [df/marker-table ::dog-load]]}\n  (let [marker (get props [df/marker-table ::dog-load])]\n    (dom/div\n      (dom/div\n        (if (df/loading? marker)\n          (dom/button {:disabled true} \"Loading...\")\n          (dom/button {:onClick #(df/load-field this :random-dog-url {:marker ::dog-load})}\n            \"Load\")))\n      (if random-dog-url\n        (dom/div (dom/img {:src random-dog-url}))))))\n\n(def async-parser-demo (fp/factory AsyncParserDemo))\n"]}