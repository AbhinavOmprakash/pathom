{"version":3,"sources":["com/wsscode/pathom/book/connect/batch2.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","com.wsscode.pathom.book.connect.batch2/list-things","_","com.wsscode.pathom.book.connect.batch2/slow-resolver","input","c__39003__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__39004__auto__","switch__38929__auto__","state_53764","state_val_53765","inst_53700","cljs.core.async.impl.ioc-helpers/take!","inst_53702","inst_53704","statearr-53800","statearr-53803","statearr-53805","inst_53706","inst_53707","statearr-53821","inst_53709","inst_53710","inst_53711","inst_53712","inst_53714","cljs.core/PersistentHashMap","statearr-53822","inst_53756","cljs.core.async.impl.ioc-helpers/return-chan","statearr-53827","state-machine__38930__auto__","ret-value__38931__auto__","result__38932__auto__","cljs.core/keyword-identical?","e53829","js/Object","ex__38933__auto__","statearr-53831","cljs.core.async.impl.ioc-helpers/process-exception","state__39005__auto__","statearr-53834","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core/sequential?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","v","com.wsscode.pathom.book.connect.batch2/app-registry","com.wsscode.pathom.book.connect.batch2/parser","com.wsscode.pathom.core/async-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/async-reader2","com.wsscode.pathom.connect/open-ident-reader","env","error","js/console.error","com.wsscode.pathom.core/error-str","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.batch2\n  (:require [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.connect :as pc]\n            [cljs.core.async :as async :refer [go]]))\n\n(pc/defresolver list-things [_ _]\n  {::pc/output [{:items [:number]}]}\n  {:items [{:number 3}\n           {:number 10}\n           {:number 18}]})\n\n(pc/defresolver slow-resolver [_ input]\n  {::pc/input  #{:number}\n   ::pc/output [:number-added]\n   ::pc/batch? true}\n  (go\n    (async/<! (async/timeout 1000))\n    ; the input will be sequential if a batch opportunity happens\n    (if (sequential? input)\n      ; this will return a list of results, this order should match the input order, like this:\n      ; [{:number-added 4}\n      ;  {:number-added 11}\n      ;  {:number-added 19}]\n      (mapv (fn [v] {:number-added (inc (:number v))}) input)\n      ; the else case still handles the single input case\n      {:number-added (inc (:number input))})))\n\n(def app-registry [list-things slow-resolver])\n\n(def parser\n  (p/async-parser\n    {::p/env     {::p/reader        [p/map-reader\n                                     pc/async-reader2\n                                     pc/open-ident-reader]\n                  ::p/process-error (fn [env error]\n                                      (js/console.error \"ERROR\" error)\n                                      (p/error-str error))}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register app-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n"]}