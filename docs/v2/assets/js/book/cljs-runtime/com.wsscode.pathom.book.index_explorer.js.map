{"version":3,"sources":["com/wsscode/pathom/book/index_explorer.cljs"],"mappings":"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","names":["js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.book","js/com.wsscode.pathom.book.index-explorer","js/com.wsscode.pathom.book.index-explorer.IndexExplorerWrapper","this__53741__auto__","js/React.Component","goog.object/extend","js/React.Component.prototype","fulcro.client.primitives/default-component-prototype","fulcro.client.primitives/-register-component!","x56193","this__52659__auto__","*reconciler*-orig-val__56194","fulcro.client.primitives/*reconciler*","*depth*-orig-val__56195","fulcro.client.primitives/*depth*","*shared*-orig-val__56196","fulcro.client.primitives/*shared*","*instrument*-orig-val__56197","fulcro.client.primitives/*instrument*","*parent*-orig-val__56198","fulcro.client.primitives/*parent*","*reconciler*-temp-val__56199","fulcro.client.primitives/get-reconciler","*depth*-temp-val__56200","fulcro.client.primitives/depth","*shared*-temp-val__56201","fulcro.client.primitives.shared","*instrument*-temp-val__56202","fulcro.client.primitives/instrument","*parent*-temp-val__56203","map__56205","fulcro.client.primitives/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","x56208","_","x56210","this__53744__auto__","writer__53745__auto__","opt__53746__auto__","cljs.core/-write","com.wsscode.pathom.book.index-explorer/IndexExplorerWrapper","this","root","fulcro.client.primitives.get_query","com.wsscode.pathom.viz.index-explorer/IndexExplorer","fulcro.client.localized_dom.div","com.wsscode.pathom.viz.index-explorer/index-explorer","js/com.wsscode.pathom.book.index-explorer.AttributeGraphPanelWrapper","x56215","*reconciler*-orig-val__56217","*depth*-orig-val__56218","*shared*-orig-val__56219","*instrument*-orig-val__56220","*parent*-orig-val__56221","*reconciler*-temp-val__56222","*depth*-temp-val__56223","*shared*-temp-val__56224","*instrument*-temp-val__56225","*parent*-temp-val__56226","map__56227","x56229","p__56230","map__56232","x56235","p__56236","map__56237","com.wsscode.pathom.book.index-explorer/AttributeGraphPanelWrapper","index","data","com.wsscode.pathom.viz.index-explorer/AttributeGraphPanel","com.wsscode.pathom.viz.index-explorer/AttributeIndex","com.wsscode.pathom.viz.index-explorer/ResolverIndex","com.wsscode.pathom.viz.index-explorer/MutationIndex","com.wsscode.pathom.viz.index-explorer/attribute-graph-panel","fulcro.client.mutations/mutate","fulcro-incoming-env","cljs.core.merge","map__56239","reconciler","js/setTimeout","fulcro.client.primitives/force-root-render!","com.wsscode.pathom.connect/resolver","G__56241","p__56242","map__56243","com.wsscode.pathom.book.index-explorer/index-resolver","indexes","com.wsscode.pathom.book.index-explorer/parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/reader2","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/elide-special-outputs-plugin","com.wsscode.pathom.book.index-explorer/index-parsers","resolvers","env","tx","cljs.core.assoc","p1__56245#","p2__56246#","cljs.core.reduce","com.wsscode.pathom.connect.add","com.wsscode.pathom.book.index-explorer/parsers","com.wsscode.pathom.book.interactive-parser/parsers","com.wsscode.pathom.book.app-types/register-app","p__56248","map__56249","node","map__56252","parser-name","parser","iparser","app-id","js/Error","p1__56247#","fulcro.client.make_fulcro_client","fulcro.client.primitives/get-initial-state","fulcro.client.data_fetch.load","com.wsscode.pathom.fulcro.network/pathom-remote","com.wsscode.pathom.book.index-explorer/prepare-index","registry","com.wsscode.pathom.connect/register","p1__56254#","cljs.core.mapv","<>","com.wsscode.pathom.viz.index-explorer/process-index","com.wsscode.pathom.book.index-explorer/graph-demos","com.wsscode.pathom.book.index-explorer/parse-attribute","str","clojure.string/starts-with?","cljs.reader.read_string","cljs.core.keyword","p__56258","map__56259","map__56262","index-group","attribute"],"sourcesContent":["(ns com.wsscode.pathom.book.index-explorer\n  (:require [clojure.reader :refer [read-string]]\n            [clojure.string :as str]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]\n            [com.wsscode.pathom.book.app-types :as app-types]\n            [com.wsscode.pathom.book.interactive-parser :as iparsers]\n            [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.fulcro.network :as network]\n            [com.wsscode.pathom.viz.index-explorer :as iex]\n            [fulcro.client :as fulcro]\n            [fulcro.client.data-fetch :as df]\n            [fulcro.client.localized-dom :as dom]\n            [fulcro.client.mutations :as fm]\n            [fulcro.client.primitives :as fp]))\n\n(fp/defsc IndexExplorerWrapper\n  [this {:ui/keys [root]}]\n  {:initial-state (fn [_]\n                    {:ui/root {::iex/id \"singleton\"}})\n   :query         [{:ui/root (fp/get-query iex/IndexExplorer)}]\n   :css           [[:.container {:height  \"800px\"\n                                 :display \"flex\"}]]}\n  (dom/div :.container\n    (iex/index-explorer root)))\n\n(fp/defsc AttributeGraphPanelWrapper\n  [this {:ui/keys [root] ::keys [index]}]\n  {:initial-state (fn [{::keys [index] :as data}]\n                    {:ui/root data\n                     ::index  index})\n   :query         [{:ui/root (fp/get-query iex/AttributeGraphPanel)}\n                   {::index\n                    [{::iex/attributes (fp/get-query iex/AttributeIndex)}\n                     {::iex/resolvers (fp/get-query iex/ResolverIndex)}\n                     {::iex/mutations (fp/get-query iex/MutationIndex)}]}]\n   :css           [[:.container {}]]}\n  (dom/div :.container\n    (iex/attribute-graph-panel root index)))\n\n(fm/defmutation force-refresh [_]\n  (action [{:keys [reconciler]}]\n    (js/setTimeout\n      #(fp/force-root-render! reconciler)\n      300)))\n\n(pc/defresolver index-resolver [{::keys [indexes]} _]\n  {::pc/output [:com.wsscode.pathom.viz.index-explorer/index]}\n  {:com.wsscode.pathom.viz.index-explorer/index indexes})\n\n(def parser\n  (p/parser\n    {::p/env     {::p/reader [p/map-reader\n                              pc/reader2\n                              pc/open-ident-reader]}\n     ::p/plugins [(pc/connect-plugin {::pc/register [index-resolver]})\n                  p/error-handler-plugin\n                  p/elide-special-outputs-plugin]}))\n\n(defn index-parsers [resolvers]\n  (fn [env tx]\n    (parser (assoc env ::indexes (reduce #(pc/add % (::pc/sym %2) %2) {} resolvers)) tx)))\n\n(def parsers iparsers/parsers)\n\n(app-types/register-app \"index-explorer\"\n  (fn [{::app-types/keys [node]}]\n    (let [parser-name (.getAttribute node \"data-parser\")\n\n          {::iparsers/keys [parser] :as iparser} (get parsers parser-name)\n          app-id      (str \"index-explorer-\" parser-name)]\n      (assert iparser (str \"parser \" parser-name \" not found\"))\n      {::app-types/app\n       (fulcro/make-fulcro-client\n         {:initial-state    (-> (fp/get-initial-state IndexExplorerWrapper {})\n                                (assoc :fulcro.inspect.core/app-id app-id))\n\n          :client-did-mount #(df/load % [::iex/id \"singleton\"] iex/IndexExplorer\n                               {:refresh       [:ui/root]\n                                :target        [:ui/root]\n                                :post-mutation `force-refresh})\n\n          :networking       (network/pathom-remote parser)})\n\n       ::app-types/root\n       IndexExplorerWrapper})))\n\n(defn prepare-index [registry]\n  (as-> (pc/register {} (mapv #(assoc % ::pc/resolve (fn [_ _])) registry)) <>\n    (assoc (iex/process-index <>) ::iex/index <>)))\n\n(def graph-demos\n  {\"index-explorer.user\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:user/id}\n      ::pc/output [:user/name]}]}\n\n   \"index-explorer.user2\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:user/id}\n      ::pc/output [:user/name\n                   :user/email\n                   :user/dob\n                   :twitter/url]}]}\n\n   \"index-explorer.user3\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:user/id}\n      ::pc/output [:user/name\n                   :user/email\n                   :user/dob\n                   :twitter/url]}\n\n     {::pc/sym    'user-by-email\n      ::pc/input  #{:user/email}\n      ::pc/output [:user/name\n                   :user/id\n                   :user/dob\n                   :twitter/url]}]}\n\n   \"index-explorer.user4\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:user/id}\n      ::pc/output [:user/name\n                   :user/email\n                   :user/dob\n                   :twitter/url]}\n\n     {::pc/sym    'user-by-email\n      ::pc/input  #{:user/email}\n      ::pc/output [:user/name\n                   :user/id\n                   :user/dob\n                   :twitter/url]}\n\n     {::pc/sym    'user-groups\n      ::pc/input  #{:user/id}\n      ::pc/output [{:user/groups\n                    [:group/id :group/name]}]}]}\n\n   \"index-explorer.sizes\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:user/id}\n      ::pc/output [:user/name\n                   :user/email\n                   :user/dob\n                   :twitter/url\n                   :youtube/url\n                   :linked-in/url\n                   :user/attr1\n                   :user/attr2\n                   :user/attr3\n                   :user/attr4\n                   :user/attr5]}\n\n     {::pc/sym    'email-by-twitter\n      ::pc/input  #{:twitter/url}\n      ::pc/output [:user/email]}\n\n     {::pc/sym    'email-by-youtube\n      ::pc/input  #{:youtube/url}\n      ::pc/output [:user/email]}\n\n     {::pc/sym    'email-by-linkedin\n      ::pc/input  #{:linked-in/url}\n      ::pc/output [:user/email]}]}\n\n   \"index-explorer.groups\"\n   {::index\n    [{::pc/sym    'user-by-id\n      ::pc/input  #{:github.repository/name :github.repository/owner}\n      ::pc/output [:github.repository/id\n                   :github.repository/url\n                   :github.repository/name-with-owner]}]}\n\n   \"index-explorer.globals\"\n   {::index\n    [{::pc/sym    'time\n      ::pc/output [:time/now]}\n     {::pc/sym    'pi\n      ::pc/output [:math/pi]}]}})\n\n(defn parse-attribute [str]\n  (if (str/starts-with? str \"#\")\n    (read-string str)\n    (keyword str)))\n\n(app-types/register-app \"index-explorer-attr-graph\"\n  (fn [{::app-types/keys [node]}]\n    (let [index-group (.getAttribute node \"data-index-group\")\n          attribute   (parse-attribute (.getAttribute node \"data-attribute\"))\n\n          {::keys [index]} (get graph-demos index-group)\n          app-id      (str \"attribute-graph-\" index-group)]\n      (assert index (str \"no index found for group  \" index-group))\n      (let [index (prepare-index index)]\n        {::app-types/app\n         (fulcro/make-fulcro-client\n           {:initial-state (-> (fp/get-initial-state AttributeGraphPanelWrapper {::pc/attribute attribute\n                                                                                 ::index        index})\n                               (assoc :fulcro.inspect.core/app-id app-id))\n\n            :networking    (network/pathom-remote parser)})\n\n         ::app-types/root\n         AttributeGraphPanelWrapper}))))\n"]}