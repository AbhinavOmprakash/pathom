{"version":3,"sources":["orchestra_cljs/spec/test.cljs"],"mappings":";;;;;;;;;AAoBA,AAAA,AAAMA,AACFC,AAAEC;AADN,AAEG,AAAMC,AAAK,AAAUC,AAAGC;AAAb,AACE,AAAAC,AAAA,AAAA;AAAA,AACE,AAAAC,AAAC,AAAAC,AAAgBH;;AAAhB,AAAA,AAAAI,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAANF,AAAYL;AAAZ,AACE,AAAAQ,AAAa,AAACE,AAAIV;AAAlB,AAAA,AAAAQ;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAME,AAAE,AAACd,AAAAA,AAAAA,AAAEU,AAAAA;AAAX,AACE,AAAI,AAACK,AAAUX,AAAKU;AAClB,AAAO,AAACE,AAAKJ;AAAGR;;;;;AAChB,AAACa,AAAKP,AAAE,AAACR,AAAK,AAACc,AAAKJ,AAAG,AAACM,AAAKd,AAAKU;;;AAJxC;;;;;AADH,AAAA,AAAAR,AAMEH,AAAGC;AAPP,AAAA;;AADb,AASE,AAAA,AAACF,AAAKD;;AAEX,AAAA,AAAOkB,AACJL,AAAEM;AADL,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQ,AAAA,AAAA,AAAcP,AACRA,AAAQM;;AAEzB,AAAA,AAAOE,AACJR,AAAEM;AADL,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQ,AAAA,AAAA,AAAiBP,AACXA,AAAQM;;AAIzB;;;AAAA,AAAyBG;AAIzB,AAAA,AAAMC;AAAN,AACE,AAAI,AAAA,AAACC,AAAeC;AAApB;;AAAA,AAAA,AAAA,AAES,AAAA,AAAIC,AACJ,AAAA,AAAIA;;;AAEf,AAAA,AAAMC;AAAN,AACE,AAAI,AAAA,AAACH,AAAeC;AAClB,AAACG,AAAQH;;AACT,AACEI;AADF;;AAAA,AAEEC;AAFF;;AAAA,AAGEC;AAHF;;AAAA,AAIEC;AAJF;;AAAA;;;;;;;AAMJ,AAAA,AAAMC;AAAN,AAAA,AAAA,AACe,AAACN;;AAEhB,AAAA,AAAOO,AAAaC;AAApB,AACE,AAAA,AAAyBC;AAAzB,AACU,AAAMA;AAAN,AACE,AAAMzB,AAAE,AAAA,AAAWyB;AAAnB,AACE,AAAAC,AAAK,AAAS1B;AAAd,AAAA,AAAA0B;AAAA,AAAAA,AAAiB,AAAK,AAACC,AAAc3B;AAArC,AAAA,AAAA0B;AACK,AAAA,AAACE,AAA8C5B;;AADpD0B;;;AAAAA;;;AAFJ;;;AADV,AAKE,AACE,AAAA,AAAAG,AAACC,AACD,AAACA,AAAWE,AACZC;AAFA,AAAa,AAACF,AAAI,AAAAF,AAACG;AADhBR;;AAOT,AAAA,AAAOU,AACJhC,AAAEd,AAAE+C;AADP,AAEE,AAAMC,AAAQ,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA;AAAA,AAAA,AAAAF,AAAAA,AAAAA,AAAiBF,AAAAA;;AACzBK,AAAS;AAAKtC,AAAEuC,AAAKjC,AAAKkC,AAAKC;AAAtB,AACE,AAAMC,AAAU,AAACC,AAAUrC,AAAKkC;AAAhC,AACE,AAAI,AAAA,AAACI,AAAcF;AACjB,AAAMG,AAAO,AAACxB,AACC,AAAAyB,AACE,AAACpC;AADHqC,AAEE,AAAS,AAAAI;AAFXH,AAGE,AAAC5B;AAHH6B,AAAA;AAAA,AAAA,AAAAH,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAIVE,AAAI,AAAAC,AAAY,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA,AAAAA,AAAejD,AAAAA;;AAA3B,AAAA,AAAA,AAAA+C,AAAA;AAAA;;AAAA,AAAAA,AAAUC;AAAV,AAAA,AACGA;;;AAEPG,AAAG,AAACC,AAAM,AAAA,AAAA,AAACC,AAAM,AAAA,AAAA,AAACC,AAAgBtD,AAAMiC,AACNa,AAEAZ,AACjBC,AAASD,AAEhB,AAAA,AAAA,AAAA,AAAA,AAAMK,AACMA;AAf5B,AAgBE,AAAO,AAACtC,AACC,AAAA,AAAA,AAAgBP,AACX,AAAA6D,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAC;AAAAC,AAAAC;AAAAC,AAAA;AAAAC,AAAA;AAAAC;AAAA,AAAA,AAAAR,AAAAQ;;;AAAA,AAAA,AAAAL,AAAAG;;AAAA,AAAAD,AAAAE;;AAAA,AAAA,AAAc,AAACE,AAAcb;AAA7B,AAAA,AAAAS,AAAAD;;AAAA,AAAAD,AAAAD;;AAAA,AAAAF;AACLJ;;AACXf;;;;AAxBrB,AAyBE,AAAA6B,AACE;;AACKC;AADL,AAEE,AAAI/D;AACF,AAAAgE,AAAAhE;AAAAiE,AAAA;AAAA,AAAA,AAAAjE,AAAAiE;;AAAA,AAAA,AACE,AAAMC,AAAM,AAAA,AAAA,AAAM,AAAA,AAAOzC,AACX,AAAA,AAAA,AAACI,AAAStC,AAAQ,AAAA,AAAOkC,AAASsC;AAC1CI,AAAI,AAAAC,AAAUpE;AAAVqE,AAAA;AAAA,AAAA,AAAAA,AAAUrE;;AAAV,AAAA,AACE,AAACsE,AAAM7F,AAAEsF;AADX,AAAA,AAAAK,AAAUpE;;AAFpB,AAIE,AAAM,AAAA,AAAMyB;AAAZ,AACE,AAAA,AAAA,AAACI,AAAStC,AAAO,AAAA,AAAMkC,AAAS0C;;AADlC;;AAEA,AAAA/E,AAAgB,AAAA,AAAKqC;AAArB,AAAA,AAAArC;AAAA,AAAA,AAAAA,AAAWS;AAAX,AACE,AAAI,AAAA,AAAMqE;AACR,AAAO,AAACnE,AAAaR,AAAEkC;;AACvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAAStC,AAAMM,AAAWsE,AAAUD;;;AAHzC;;AAIAC;AAXJ,AAAA,AAAAnE,AAAAgE;;AAYA,AAACM,AAAM7F,AAAEsF;;;;AAdRA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAFP,AAAA,AAAAD,AAiBGS,AAAY9F;;AAjBfqF;;AAmBJ,AAAA,AAAAU,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAmBC,AAAkB,AAAA,AAACC;;AAEtC;;;AAAA,AAAAC,AAAOK,AAEJ1G,AAAEoB,AAAKuF;AAFV,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAW,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AAEeM;AAFf,AAAAH,AAAAH,AAAA,AAEgCO;AAFhC,AAAAJ,AAAAH,AAAA,AAEqCQ;AAFrC,AAGE,AAAI,AAAA,AAACC,AAAOJ,AAAKE;AACf,AAAIzF,AAAK,AAAC4F,AAAMJ,AAAMK;;AACtB,AAACC,AAAIJ,AAAQH,AAAI3G;;;AAErB;;;AAAA,AAAAmH,AAAOE,AAEJjG,AAAKuF;AAFR,AAAA,AAAAS,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAW,AAAAY,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAEaE;AAFb,AAGE,AAACJ,AAAII,AAAUX,AAAIvF;;AAErB,AAAA,AAAOmG,AACJ3G,AAAEE,AAAE0G;AADP,AAEE,AAAMpG,AAAK,AAACsG,AAAW5G;AAAvB2G,AAC4B,AAAA,AAAAvE,AAACuD,AAAKN,AAAkBrF;AADpD2G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAAW,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AACcE;AADd,AAAAlB,AAAAgB,AAAA,AACkBG;AADlB,AAAA1E,AAEM2E,AAAS/G;AACTgH,AAAQ,AAAI,AAACpE,AAAEkE,AAAQC,AAASF,AAAIE;AACpCE,AAAM,AAAAC,AAAI,AAACX,AAAuBjG,AAAKR,AAAE4G;AAAnC,AAAA,AAAAQ;AAAAA;;AACI,AAAO,AAAC7G,AAASL,AAAEM;;;AAC7B6G,AAAI,AAACvB,AAAqBoB,AAAQC,AAAMnH,AAAE4G;AAC1CU,AAAQ,AAACpF,AAAiBhC,AAAEmH,AAAIF;AAPtC,AAQE,AAAA,AAAA,AAAA,AAACI,AAAMhC,AAAkBiC,AAAMtH,AAAQgH,AAAiBI;;AACxDA;;AAEJ,AAAA,AAAOG,AACJzH,AAAEE;AADL,AAEE,AAAMA;AAAN,AACE,AAAAH,AAAiC,AAAA,AAAAuC,AAACuD,AAAKN,AAAkBrF;AAAzD,AAAA,AAAAH;AAAA,AAAA,AAAA2H,AAAA3H;AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/B,AAAA,AAAA+B,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAW,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAmBX;AAAnB,AAAAlB,AAAA6B,AAAA,AAAuBV;AAAvB,AACE,AAACW,AAAMpC,AAAkBqC,AAAO1H;;AAChC,AAAA,AAAAoC,AAAM2E,AAAS/G;AAAf,AACE,AAAM,AAAC4C,AAAEkE,AAAQC;AAAjB,AACEF;;AADF;;;AAHJ;;;AADF;;;AAOF,AAAA,AAAOc,AACJ7H;AADH,AAEE,AAAA8H,AAAS9H;;AAEX,AAAA;;;;AAAA,AAAA+H,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA5E,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM4E;AAAN,AAGM,AAAA,AAACC;;;AAHP,AAAA,AAAA,AAAMD,AAIFrB;AAJJ,AAKG,AAAQ,AAACuB,AAAOC,AAAO,AAACC,AAAK,AAAA,AAAMzB;AAAnC;AAAA,AAAA,AAAA,AAAAvD,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAA,AAAA,AAACiF,AAAOC,AAAU,AAACC,AAAOX,AAAc,AAACQ,AAAK,AAACI,AAC7B,AAACJ,AAAK,AAAA,AAAOzB,AACb,AAAA,AAAOA,AACP,AAACyB,AAAK,AAAA,AAAUzB;;;AATrC,AAAA,AAAA,AAAMqB;;AAAN","names":["orchestra-cljs.spec.test/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","fexpr__73879","p__73882","vec__73883","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","x","temp__5720__auto__","s","cljs.core/seq","v","cljs.core/contains?","cljs.core/rest","cljs.core/cons","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","orchestra-cljs.spec.test/no-fspec","spec","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","orchestra-cljs.spec.test/no-args-spec","orchestra-cljs.spec.test/*instrument-enabled*","orchestra-cljs.spec.test/get-host-port","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/*target*","js/window","orchestra-cljs.spec.test/get-ua-product","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","orchestra-cljs.spec.test/get-env","orchestra-cljs.spec.test/find-caller","st","frame","and__4120__auto__","clojure.string/blank?","cljs.core/re-find","p1__73913#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not","search-spec-fn","cljs.core/first","orchestra-cljs.spec.test/spec-checking-fn","raw-fn-spec","fn-spec","fexpr__73932","cljs.core/deref","cljs.spec.alpha/maybe-spec","conform!","role","data","data-key","conformed","cljs.spec.alpha/conform","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","caller","G__73933","G__73934","G__73935","G__73936","cljs.stacktrace/parse-stacktrace","js/Error","via","temp__5722__auto__","n","fexpr__73937","cljs.spec.alpha/spec-name","ed","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha/explain-data*","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__73942","cljs.core/*print-newline*","*print-fn*-orig-val__73943","cljs.core/*print-fn*","*print-newline*-temp-val__73944","*print-fn*-temp-val__73945","x__4662__auto__","cljs.spec.alpha/explain-out","G__73948","args","*instrument-enabled*-orig-val__73951","*instrument-enabled*-temp-val__73952","cargs","ret","*instrument-enabled*-orig-val__73954","*instrument-enabled*-temp-val__73955","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","goog.object/extend","js/orchestra-cljs","js/orchestra-cljs.spec","js/orchestra-cljs.spec.test","js/orchestra-cljs.spec.test.instrumented-vars","orchestra-cljs.spec.test/instrumented-vars","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__73967","map__73969","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","orchestra-cljs.spec.test/instrument-choose-fn","sym","over","stub","replace","cljs.core/some","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2","cljs.spec.gen.alpha/generate","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p__73978","map__73979","orchestra-cljs.spec.test/instrument-choose-spec","overrides","orchestra-cljs.spec.test/instrument-1*","opts","map__73990","cljs.spec.alpha/get-spec","raw","wrapped","current","to-wrap","ospec","or__4131__auto__","ofn","checked","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","orchestra-cljs.spec.test/unstrument-1*","map__74001","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","orchestra-cljs.spec.test/fn-spec-name?","cljs.core/Symbol","var_args","G__74010","orchestra-cljs.spec.test/instrumentable-syms","orchestra_cljs.spec.test.instrumentable_syms.cljs$core$IFn$_invoke$arity$1","cljs.core/every?","cljs.core/ident?","cljs.core/keys","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/registry"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns orchestra-cljs.spec.test\n  (:require-macros [orchestra-cljs.spec.test :as m\n                    :refer [instrument unstrument with-instrument-disabled]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-fspec}))\n\n(defn- no-args-spec\n  [v spec]\n  (ex-info (str \"Args for \" v \" are not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-args-spec}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n      (drop-while #(not (search-spec-fn %)))\n      (drop-while search-spec-fn)\n      first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f raw-fn-spec]\n  (let [fn-spec (@#'s/maybe-spec raw-fn-spec)\n        conform! (fn [v role spec data data-key]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             via (if-some [n (#'s/spec-name spec)]\n                                   [n]\n                                   [])\n                             ed (merge (assoc (s/explain-data* spec [role]\n                                                               via\n                                                               []\n                                                               data)\n                                              data-key data\n                                              ::s/failure :instrument)\n                                       (when caller\n                                         {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \" v \" did not conform to spec:\\n\"\n                                       (with-out-str (s/explain-out ed)))\n                                  ed)))\n                       conformed)))]\n    (doto\n      (fn\n        [& args]\n        (if *instrument-enabled*\n          (with-instrument-disabled\n            (let [cargs (when (:args fn-spec)\n                          (conform! v :args (:args fn-spec) args ::s/args))\n                  ret (binding [*instrument-enabled* true]\n                        (apply f args))]\n              (when (:ret fn-spec)\n                (conform! v :ret (:ret fn-spec) ret ::s/ret))\n              (when-let [spec (:fn fn-spec)]\n                (if (nil? cargs)\n                  (throw (no-args-spec v fn-spec))\n                  (conform! v :fn spec {:ret ret :args cargs} ::s/fn)))\n              ret))\n          (apply f args)))\n      (gobj/extend f))))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn- instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                  (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn- unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\n   that can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n"]}