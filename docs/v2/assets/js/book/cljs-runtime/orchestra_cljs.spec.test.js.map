{"version":3,"sources":["orchestra_cljs/spec/test.cljs"],"mappings":"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","names":["orchestra-cljs.spec.test/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","p__84491","vec__84492","cljs.core.nth","x","temp__5720__auto__","s","cljs.core/seq","v","cljs.core/contains?","cljs.core/rest","cljs.core/cons","cljs.core.conj","orchestra-cljs.spec.test/no-fspec","spec","cljs.core.ex_info","orchestra-cljs.spec.test/no-args-spec","orchestra-cljs.spec.test/*instrument-enabled*","orchestra-cljs.spec.test/get-host-port","cljs.core.not_EQ_","cljs.core/*target*","js/window","orchestra-cljs.spec.test/get-ua-product","cljs.core.keyword","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","orchestra-cljs.spec.test/get-env","orchestra-cljs.spec.test/find-caller","st","frame","and__4120__auto__","clojure.string/blank?","cljs.core/re-find","p1__84532#","cljs.core.drop_while","cljs.core/not","search-spec-fn","cljs.core/first","orchestra-cljs.spec.test/spec-checking-fn","raw-fn-spec","fn-spec","fexpr__84566","cljs.core/deref","cljs.spec.alpha/maybe-spec","conform!","role","data","data-key","conformed","cljs.spec.alpha/conform","cljs.core._EQ_","caller","cljs.stacktrace/parse-stacktrace","js/Error","via","temp__5722__auto__","n","fexpr__84575","cljs.spec.alpha/spec-name","ed","cljs.core.merge","cljs.core.assoc","cljs.spec.alpha/explain-data*","fexpr__84599","cljs.spec.alpha/->sym","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__84603","cljs.core/*print-newline*","*print-fn*-orig-val__84604","cljs.core/*print-fn*","*print-newline*-temp-val__84605","*print-fn*-temp-val__84606","x__4662__auto__","cljs.spec.alpha/explain-out","pure-variadic?","cljs.core/meta","apply'","args","cljs.core.apply","ret","orig__84385__auto__","cargs","*instrument-enabled*-orig-val__84630","*instrument-enabled*-temp-val__84631","cret","or__4131__auto__","arg0","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","arg14","arg15","arg16","arg17","arg18","arg19","temp__5724__auto__","variadic","js/orchestra-cljs","js/orchestra-cljs.spec","js/orchestra-cljs.spec.test","js/orchestra-cljs.spec.test.instrumented-vars","orchestra-cljs.spec.test/instrumented-vars","cljs.core.atom","p__84806","map__84808","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","orchestra-cljs.spec.test/instrument-choose-fn","sym","over","stub","replace","cljs.core/some","cljs.spec.alpha.gen","cljs.spec.gen.alpha/generate","p__84820","map__84822","orchestra-cljs.spec.test/instrument-choose-spec","overrides","orchestra-cljs.spec.test/instrument-1*","opts","map__84842","cljs.spec.alpha/get-spec","raw","wrapped","current","to-wrap","ospec","ofn","checked","cljs.core.swap_BANG_","cljs.core/assoc","orchestra-cljs.spec.test/unstrument-1*","map__84868","cljs.core/dissoc","orchestra-cljs.spec.test/fn-spec-name?","cljs.core/Symbol","var_args","G__84906","orchestra-cljs.spec.test/instrumentable-syms","orchestra_cljs.spec.test.instrumentable_syms","cljs.core/every?","cljs.core/ident?","cljs.core/keys","cljs.core.reduce","cljs.core/into","cljs.core.filter","cljs.spec.alpha/registry"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns orchestra-cljs.spec.test\n  (:require-macros [orchestra-cljs.spec.test :as m\n                    :refer [instrument unstrument with-instrument-disabled setup-static-dispatches]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-fspec}))\n\n(defn- no-args-spec\n  [v spec]\n  (ex-info (str \"Args for \" v \" are not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-args-spec}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n      (drop-while #(not (search-spec-fn %)))\n      (drop-while search-spec-fn)\n      first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f raw-fn-spec]\n  (let [fn-spec (@#'s/maybe-spec raw-fn-spec)\n        conform! (fn [v role spec data data-key]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             via (if-some [n (#'s/spec-name spec)]\n                                   [n]\n                                   [])\n                             ed (merge (assoc (s/explain-data* spec [role]\n                                                               via\n                                                               []\n                                                               data)\n                                              ;::s/fn (#'s/->sym v)\n                                              data-key data\n                                              ::s/failure :instrument)\n                                       (when caller\n                                         {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \"\n                                       (#'s/->sym v)\n                                       \" did not conform to spec:\\n\"\n                                       (with-out-str (s/explain-out ed)))\n                                  (assoc ed :orchestra.spec/var v))))\n                       conformed)))\n        pure-variadic? (and (-> (meta v) :top-fn :variadic?)\n                            (zero? (-> (meta v) :top-fn :max-fixed-arity)))\n        apply' (fn [f args]\n                 (if (and (nil? args)\n                          pure-variadic?)\n                   (.cljs$core$IFn$_invoke$arity$variadic f)\n                   (apply f args)))\n        ret (fn [& args]\n              (if *instrument-enabled*\n                (with-instrument-disabled\n                  (let [cargs (when (:args fn-spec)\n                                (conform! v :args (:args fn-spec) args ::s/args))\n                        ret (binding [*instrument-enabled* true]\n                              (apply' f args))\n                        cret (when (:ret fn-spec)\n                               (conform! v :ret (:ret fn-spec) ret ::s/ret))]\n                    (when-let [spec (:fn fn-spec)]\n                      (if (nil? cargs)\n                        (throw (no-args-spec v fn-spec))\n                        (conform! v :fn spec {:ret (or cret ret) :args cargs} ::s/fn)))\n                    ret))\n                (apply' f args)))]\n    (when-not pure-variadic?\n      (setup-static-dispatches f ret 20)\n      (when-some [variadic (.-cljs$core$IFn$_invoke$arity$variadic f)]\n        (set! (.-cljs$core$IFn$_invoke$arity$variadic ret)\n              (fn [& args]\n                (apply variadic args)))))\n    ret))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                  (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\n   that can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n"]}