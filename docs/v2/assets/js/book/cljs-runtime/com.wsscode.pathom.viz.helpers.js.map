{"version":3,"sources":["com/wsscode/pathom/viz/helpers.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","G__64106","cljs.core/keyword?","cljs.core/vector?","cljs.spec.alpha.tuple_impl","G__64110","cljs.core/map?","i__13227__auto__","v__13228__auto__","cljs.core.nth","cljs.spec.alpha/map-spec-impl","G__64114","G__64134","cljs.core/coll?","com.wsscode.pathom.viz.helpers/pd","f","e","com.wsscode.pathom.viz.helpers/target-value","goog.object/getValueByKeys","com.wsscode.pathom.viz.helpers/stringify-keyword-values","x","clojure.walk/prewalk","cljs.core/simple-keyword?","cljs.core/name","cljs.core.keyword","com.wsscode.pathom.viz.helpers/pprint-str","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__64148","cljs.core/*print-newline*","*print-fn*-orig-val__64149","cljs.core/*print-fn*","*print-newline*-temp-val__64150","*print-fn*-temp-val__64151","x__4662__auto__","cljs.pprint.pprint","p__64158","map__64159","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.viz.helpers/drag-resize","this","attribute","default","axis","props","child","js/React.createElement","js/module$node_modules$react_draggable$dist$react_draggable.DraggableCore","dd","goog.object/set","goog.object/get","or__4131__auto__","fulcro.client.primitives.get_state","start","size","value","new-size","cljs.core._EQ_","fulcro.client.primitives.set_state_BANG_","fulcro.client.dom.macro_create_element","fulcro.util/force-children","cljs.core.merge","com.wsscode.pathom.viz.helpers/pprint","*print-newline*-orig-val__64174","*print-fn*-orig-val__64175","*print-newline*-temp-val__64176","*print-fn*-temp-val__64177","com.wsscode.pathom.viz.helpers/map-vals","m","cljs.core.into","p__64183","vec__64184","k","v","com.wsscode.pathom.viz.helpers/index-by","coll","cljs.core/persistent!","cljs.core.reduce","ret","cljs.core.assoc_BANG_","cljs.core/transient","fulcro.client.mutations/mutate","fulcro-incoming-env","_","p__64195","map__64196","map__64201","key","fn","args","state","ref","p1__64191#","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/update","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","com.wsscode.pathom.viz.helpers/update-value!","seq64208","G__64209","cljs.core/first","cljs.core/next","G__64210","G__64211","self__4717__auto__","component","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/array-map","fulcro.client.primitives.transact_BANG_","com.wsscode.pathom.viz.helpers/toggle-set-item","set","item","cljs.core/contains?","cljs.core.disj","cljs.core.conj","p__64224","p__64225","vec__64226","seq__64227","first__64228","vec__64229","seq__64230","first__64231","com.wsscode.pathom.viz.helpers/vector-compare","value1","rest1","value2","rest2","result","cljs.core/compare","com.wsscode.pathom.viz.helpers/remove-not-found","com.wsscode.pathom.core/transduce-maps","cljs.core.remove","p__64233","vec__64234","com.wsscode.pathom.viz.helpers/path-map->tree","path-map","map__64253","items","p__64254","map__64256","index","path","cljs.core/count","prev","cljs.core.subvec","cljs.core.update_in","cljs.core.fnil","cljs.core/conj","cljs.core/keys","p1__64238#","p2__64237#","cljs.core.sort"],"sourcesContent":["(ns com.wsscode.pathom.viz.helpers\n  (:require [\"react-draggable\" :refer [DraggableCore]]\n            [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n            [clojure.pprint]\n            [fulcro.client.dom :as dom]\n            [fulcro.client.primitives :as fp]\n            [fulcro.client.mutations :as fm]\n            [goog.object :as gobj]\n            [clojure.walk :as walk]\n            [cljs.spec.alpha :as s]\n            [com.wsscode.pathom.core :as p]))\n\n(s/def ::path (s/coll-of keyword? :kind vector?))\n(s/def ::path-map (s/map-of ::path map?))\n(s/def ::node (s/keys :opt-un [::children]))\n(s/def ::children (s/coll-of ::node))\n\n(defn pd [f]\n  (fn [e]\n    (.preventDefault e)\n    (f e)))\n\n(defn target-value [e] (gobj/getValueByKeys e \"target\" \"value\"))\n\n(defn stringify-keyword-values [x]\n  (walk/prewalk\n    (fn [x]\n      (cond\n        (simple-keyword? x)\n        (name x)\n\n        (keyword x)\n        (str x)\n\n        :else\n        x))\n    x))\n\n(defn pprint-str [x]\n  (with-out-str\n    (clojure.pprint/pprint x)))\n\n(defn drag-resize [this {:keys [attribute default axis props] :or {axis \"y\"}} child]\n  (js/React.createElement DraggableCore\n    #js {:key     \"dragHandler\"\n         :onStart (fn [e dd]\n                    (gobj/set this \"start\" (gobj/get dd axis))\n                    (gobj/set this \"startSize\" (or (fp/get-state this attribute) default)))\n         :onDrag  (fn [e dd]\n                    (let [start    (gobj/get this \"start\")\n                          size     (gobj/get this \"startSize\")\n                          value    (gobj/get dd axis)\n                          new-size (+ size (if (= \"x\" axis) (- value start) (- start value)))]\n                      (fp/set-state! this {attribute new-size})))}\n    (dom/div (merge {:style {:pointerEvents \"all\"\n                             :cursor        (if (= \"x\" axis) \"ew-resize\" \"ns-resize\")}}\n               props)\n      child)))\n\n(defn pprint [x]\n  (with-out-str (cljs.pprint/pprint x)))\n\n(defn map-vals [f m]\n  (into {} (fn [[k v]] [k (f v)]) m))\n\n(defn index-by [f coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k x)))\n      (transient {}) coll)))\n\n(fm/defmutation update-value [{:keys [key fn args]}]\n  (action [{:keys [state ref]}]\n    (swap! state update-in ref update key #(apply fn % args))))\n\n(defn update-value!\n  \"Helper to call transaction to update some key from current component.\"\n  [component key fn & args]\n  (fp/transact! component [`(update-value {:key ~key :fn ~fn :args ~args})]))\n\n(defn toggle-set-item [set item]\n  (if (contains? set item)\n    (disj set item)\n    (conj set item)))\n\n(defn vector-compare [[value1 & rest1] [value2 & rest2]]\n  (let [result (compare value1 value2)]\n    (cond\n      (not (zero? result)) result\n      (nil? value1) 0\n      :else (recur rest1 rest2))))\n\n(defn remove-not-found [x]\n  (p/transduce-maps\n    (remove (fn [[_ v]] (contains? #{::p/not-found ::fp/not-found} v)))\n    x))\n\n(>defn path-map->tree\n  \"Generate a tree structure from a map of maps to data. For example, the given structure:\n\n  {[:a] {:any data}\n   [:a :b] {:more data}\n   [:c] {:key foo}}\n\n   It will return:\n\n   {:children [{:any data\n                :children [{:more data}]}\n               {:key foo}]}\"\n  [path-map]\n  [::path-map => ::node]\n  (let [{:keys [items]}\n        (reduce\n          (fn [{:keys [items index]} path]\n            (if (> (count path) 1)\n              (let [prev (subvec path 0 (dec (count path)))]\n                {:items items\n                 :index (update-in index [prev :children] (fnil conj [])\n                          (get index path))})\n              {:items (conj items (get index path))\n               :index index}))\n          {:items []\n           :index path-map}\n          (->> path-map\n               (keys)\n               (sort #(vector-compare %2 %))))]\n    {:children items}))\n"]}