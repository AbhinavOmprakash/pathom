{"version":3,"sources":["com/wsscode/pathom/book/connect/mutation_context.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/mutation","p__93300","map__93303","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.book.connect.mutation-context/create-user","db","user","map__93337","id","new-user","cljs.core/select-keys","cljs.core.merge","cljs.core/random-uuid","js/Date","cljs.core.swap_BANG_","cljs.core/assoc-in","com.wsscode.pathom.connect/resolver","G__93407","p__93425","p__93426","map__93434","map__93437","com.wsscode.pathom.book.connect.mutation-context/user-data","cljs.core/deref","cljs.core.get_in","G__93493","p__93560","map__93561","com.wsscode.pathom.book.connect.mutation-context/all-users","_","cljs.core/vals","G__93571","p__93576","map__93579","com.wsscode.pathom.book.connect.mutation-context/n++","value","com.wsscode.pathom.book.connect.mutation-context/api-registry","com.wsscode.pathom.book.connect.mutation-context/parser","com.wsscode.pathom.core/parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/reader2","com.wsscode.pathom.connect/open-ident-reader","cljs.core.atom","com.wsscode.pathom.connect/mutate","com.wsscode.pathom.connect.connect_plugin","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.mutation-context\n  (:require [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]))\n\n(pc/defmutation create-user [{::keys [db]} user]\n  {::pc/sym    'user/create\n   ::pc/params [:user/name :user/email]\n   ::pc/output [:user/id]}\n  (let [{:keys [user/id] :as new-user}\n        (-> user\n            (select-keys [:user/name :user/email])\n            (merge {:user/id         (random-uuid)\n                    :user/created-at (js/Date.)}))]\n    (swap! db assoc-in [:users id] new-user)\n    {:user/id id}))\n\n(pc/defresolver user-data [{::keys [db]} {:keys [user/id]}]\n  {::pc/input  #{:user/id}\n   ::pc/output [:user/id :user/name :user/email :user/created-at]}\n  (get-in @db [:users id]))\n\n(pc/defresolver all-users [{::keys [db]} _]\n  {::pc/output [{:user/all [:user/id :user/name :user/email :user/created-at]}]}\n  {:user/all (vals (get @db :users))})\n\n(pc/defresolver n++ [_ {:keys [number/value]}]\n  {::pc/input  #{:number/value}\n   ::pc/output [:number/value++]}\n  {:number/value++ (inc value)})\n\n(def api-registry [create-user user-data all-users n++])\n\n(def parser\n  (p/parser\n    {::p/env     {::p/reader [p/map-reader pc/reader2 pc/open-ident-reader]\n                  ::db       (atom {})}\n     ::p/mutate  pc/mutate\n     ::p/plugins [(pc/connect-plugin {::pc/register api-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n"]}