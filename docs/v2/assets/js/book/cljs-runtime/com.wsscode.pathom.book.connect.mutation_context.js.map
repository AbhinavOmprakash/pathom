{"version":3,"sources":["com/wsscode/pathom/book/connect/mutation_context.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/mutation","p__53492","map__53495","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.book.connect.mutation-context/create-user","db","user","map__53535","id","new-user","cljs.core/select-keys","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/random-uuid","js/Date","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","com.wsscode.pathom.connect/resolver","p__53551","p__53552","map__53566","map__53569","com.wsscode.pathom.book.connect.mutation-context/user-data","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__53588","map__53589","com.wsscode.pathom.book.connect.mutation-context/all-users","_","cljs.core/vals","p__53592","map__53595","com.wsscode.pathom.book.connect.mutation-context/n++","value","com.wsscode.pathom.book.connect.mutation-context/api-registry","com.wsscode.pathom.book.connect.mutation-context/parser","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.book.connect.mutation-context\n  (:require [com.wsscode.pathom.connect :as pc]\n            [com.wsscode.pathom.core :as p]))\n\n(pc/defmutation create-user [{::keys [db]} user]\n  {::pc/sym    'user/create\n   ::pc/params [:user/name :user/email]\n   ::pc/output [:user/id]}\n  (let [{:keys [user/id] :as new-user}\n        (-> user\n            (select-keys [:user/name :user/email])\n            (merge {:user/id         (random-uuid)\n                    :user/created-at (js/Date.)}))]\n    (swap! db assoc-in [:users id] new-user)\n    {:user/id id}))\n\n(pc/defresolver user-data [{::keys [db]} {:keys [user/id]}]\n  {::pc/input  #{:user/id}\n   ::pc/output [:user/id :user/name :user/email :user/created-at]}\n  (get-in @db [:users id]))\n\n(pc/defresolver all-users [{::keys [db]} _]\n  {::pc/output [{:user/all [:user/id :user/name :user/email :user/created-at]}]}\n  (vals (get db :users)))\n\n(pc/defresolver n++ [_ {:keys [number/value]}]\n  {::pc/input  #{:number/value}\n   ::pc/output [:number/value++]}\n  {:number/value++ (inc value)})\n\n(def api-registry [create-user user-data all-users n++])\n\n(def parser\n  (p/parallel-parser\n    {::p/env     {::p/reader [p/map-reader pc/parallel-reader pc/open-ident-reader]\n                  ::db       (atom {})}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register api-registry})\n                  p/error-handler-plugin\n                  p/trace-plugin]}))\n"]}