{"version":3,"sources":["com/wsscode/pathom/graphql.cljc"],"mappings":"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","names":["com.wsscode.pathom.graphql/*unbounded-recursion-count*","com.wsscode.pathom.graphql/camel-case","s","camel-snake-kebab.core/->camelCase","com.wsscode.pathom.graphql/kebab-case","camel-snake-kebab.core/->kebab-case","com.wsscode.pathom.graphql/pad-depth","depth","clojure.string.join","cljs.core.repeat","com.wsscode.pathom.graphql/has-call?","children","cljs.core.filter","p__55360","map__55361","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","type","cljs.core._EQ_","cljs.core/first","cljs.core/boolean","com.wsscode.pathom.graphql/find-id","m","tempid?","p__55379","vec__55381","cljs.core.nth","_","v","com.wsscode.pathom.graphql/stringify","x","js/JSON.stringify","G__55407","cljs.core/clj->js","cljs.core/uuid?","var_args","G__55418","com.wsscode.pathom.graphql/params->graphql","js/Error","js-name","com.wsscode.pathom.graphql.params__GT_graphql","root?","cljs.core/map?","params","cljs.core.into","cljs.core.comp","cljs.core.remove","p__55437","vec__55441","cljs.core.map","p__55449","vec__55450","k","cljs.core/sequential?","p1__55415#","cljs.core.mapv","cljs.core/Symbol","cljs.core/name","p__55464","vec__55465","com.wsscode.pathom.graphql/ident->alias","base","value","cljs.core/vector?","clojure.string/replace","p__55513","vec__55514","com.wsscode.pathom.graphql/ident-transform","key","fields","temp__5718__auto__","field-part","clojure.string.split","cljs.core/count","cljs.core.ex_info","cljs.core/namespace","cljs.core/last","cljs.core/zipmap","com.wsscode.pathom.graphql/group-inline-unions","map__55560","general","groups","p1__55549#","cljs.core/group-by","cljs.core.get_in","cljs.core.dissoc","p__55590","vec__55593","p1__55552#","cljs.core.update","cljs.core/dissoc","cljs.core.concat","com.wsscode.pathom.graphql/special-params","p__55604","map__55606","com.wsscode.pathom.graphql/node->graphql","dispatch-key","union-key","query","ident-transform","parent-children","cljs.core/constantly","com$wsscode$pathom$graphql$node__GT_graphql_$_continue","cljs.core/inc","depth-iterate","G__55616","cljs.core.assoc","or__4131__auto__","map__55617","alias","G__55620","cljs.core/Keyword","continue","header","cljs.core.merge","parent","com.wsscode.pathom.core.update_child","cljs.core/assoc","p1__55600#","cljs.core/pos-int?","com.wsscode.pathom.core.update_recursive_depth","cljs.core/dec","p1__55602#","G__55632","cljs.core/seq","map__55633","mutate-join","G__55640","com.wsscode.pathom.core/query->ast","vec__55657","p1__55603#","cljs.core/identity","G__55671","com.wsscode.pathom.graphql/query->graphql","com.wsscode.pathom.graphql.query__GT_graphql","options","ast","com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__55687","cljs.core/contains?"],"sourcesContent":["(ns com.wsscode.pathom.graphql\n  (:require\n    [camel-snake-kebab.core :as csk]\n    #?(:clj [clojure.data.json :as json])\n    [clojure.spec.alpha :as s]\n    [clojure.string :as str]\n    [com.wsscode.pathom.core :as p]\n    [com.wsscode.pathom.misc :as p.misc]))\n\n(def ^:dynamic *unbounded-recursion-count* 5)\n\n(defn camel-case [s]\n  (csk/->camelCase s))\n\n(defn kebab-case [s]\n  (csk/->kebab-case s))\n\n(defn pad-depth [depth]\n  (str/join (repeat depth \"  \")))\n\n(defn has-call? [children]\n  (->> children\n       (filter (fn [{:keys [type]}] (= :call type)))\n       first boolean))\n\n(defn find-id [m tempid?]\n  (->> m\n       (filter (fn [[_ v]] (tempid? v)))\n       first))\n\n(defn stringify [x]\n  #?(:clj  (json/write-str (cond-> x\n                             (uuid? x) str))\n     :cljs (js/JSON.stringify (cond-> (clj->js x)\n                                (uuid? x) str))))\n\n(defn params->graphql\n  ([x js-name tempid?] (params->graphql x js-name tempid? true))\n  ([x js-name tempid? root?]\n   (cond\n     (map? x)\n     (let [params (->> (into [] (comp\n                                  (remove (fn [[_ v]] (tempid? v)))\n                                  (map (fn [[k v]] (str (js-name k) \": \" (params->graphql v js-name tempid? false))))) x)\n                       (str/join \", \"))]\n       (if root?\n         (str \"(\" params \")\")\n         (str \"{\" params \"}\")))\n\n     (sequential? x)\n     (str \"[\" (str/join \", \" (mapv #(params->graphql % js-name tempid? false) x)) \"]\")\n\n     (symbol? x)\n     (name x)\n\n     :else\n     (stringify x))))\n\n(defn ident->alias\n  \"Convert ident like [:Contact/by-id 123] to an usable GraphQL alias (eg: _COLON_Contact_SLASH_by_id_123).\"\n  [[base value]]\n  (let [value (if (vector? value) (str/join \"_\" value) value)]\n    (-> (str base \"_\" value) (str/replace #\"[^a-zA-Z0-9_]\" \"_\"))))\n\n(defn ident-transform [[key value]]\n  (let [fields (if-let [field-part (name key)]\n                 (str/split field-part #\"-and-|And\") [\"id\"])\n        value  (if (vector? value) value [value])]\n    (if-not (= (count fields) (count value))\n      (throw (ex-info \"The number of fields on value needs to match the entries\" {:key key :value value})))\n    {::selector (-> (namespace key) (str/split #\"\\.\") last)\n     ::params   (zipmap fields value)}))\n\n(defn group-inline-unions [children]\n  (let [{general nil :as groups} (group-by #(get-in % [:params ::on]) children)\n        groups (->> (dissoc groups nil)\n                    (into [] (map (fn [[k v]] {:type      :union-entry\n                                               :union-key k\n                                               :children  (mapv #(update % :params dissoc ::on) v)}))))]\n    (concat general groups)))\n\n(def special-params #{::on ::alias})\n\n(defn node->graphql [{:keys  [type children key dispatch-key params union-key query]\n                      ::keys [js-name depth ident-transform parent-children tempid?]\n                      :or    {depth   0\n                              tempid? (constantly false)}}]\n  (letfn [(continue\n            ([x] (continue x inc))\n            ([x depth-iterate]\n             (node->graphql (assoc x ::depth (depth-iterate depth)\n                              ::parent-children (or (::parent-children x) children)\n                              ::js-name js-name\n                              ::tempid? tempid?\n                              ::ident-transform ident-transform))))]\n    (let [{::keys [alias]} params\n          params (apply dissoc params special-params)]\n      (case type\n        :root\n        (str (if (has-call? children) \"mutation \" \"query \")\n             \"{\\n\" (str/join (map continue (group-inline-unions children))) \"}\\n\")\n\n        :join\n        (if (= 0 query)\n          \"\"\n          (let [header   (if (vector? key)\n                           (assoc (ident-transform key)\n                             ::index (ident->alias key))\n                           {::index    alias\n                            ::selector dispatch-key\n                            ::params   nil})\n                params   (merge (::params header) params)\n                children (cond\n                           (= '... query)\n                           (let [parent (-> (p/update-child {:children parent-children} key assoc :query (dec *unbounded-recursion-count*))\n                                            :children)]\n                             (mapv #(assoc % ::parent-children parent) parent))\n\n                           (pos-int? query)\n                           (let [parent (-> (p/update-recursive-depth {:children parent-children} key dec)\n                                            :children)]\n                             (mapv #(assoc % ::parent-children parent) parent))\n\n                           :else\n                           children)]\n            (str (pad-depth depth)\n                 (if (::index header) (str (::index header) \": \"))\n                 (js-name (::selector header)) (if (seq params) (params->graphql params js-name tempid?)) \" {\\n\"\n                 (str/join (map continue (group-inline-unions children)))\n                 (pad-depth depth) \"}\\n\")))\n\n        :call\n        (let [{::keys [mutate-join]} params\n              children (->> (or (some-> mutate-join p/query->ast :children)\n                                children)\n                            (remove (comp #{'*} :key)))]\n          (str (pad-depth depth) (js-name dispatch-key)\n               (params->graphql (dissoc params ::mutate-join) js-name tempid?)\n               (if (seq children)\n                 (str\n                   \" {\\n\"\n                   (str/join (map continue (group-inline-unions children)))\n                   (pad-depth depth)\n                   \"}\\n\")\n                 (if-let [[k _] (find-id params tempid?)]\n                   (str\n                     \" {\\n\"\n                     (pad-depth (inc depth))\n                     (js-name k)\n                     \"}\\n\")))))\n\n        :union\n        (str (pad-depth depth) \"__typename\\n\"\n             (str/join (map #(continue % identity) children)))\n\n        :union-entry\n        (str (pad-depth depth) \"... on \" (if (string? union-key) union-key (js-name union-key)) \" {\\n\"\n             (str/join (map continue children))\n             (pad-depth depth) \"}\\n\")\n\n        :prop\n        (str (pad-depth depth)\n             (if alias (str alias \": \"))\n             (js-name dispatch-key)\n             (if (seq params) (params->graphql params js-name tempid?))\n             \"\\n\")))))\n\n(defn query->graphql\n  \"Convert query from EDN format to GraphQL string.\"\n  ([query] (query->graphql query {}))\n  ([query options]\n   (let [ast (p/query->ast query)]\n     (node->graphql (merge\n                      ast\n                      {::js-name         name\n                       ::ident-transform ident-transform\n                       ::parent-children (:children ast)}\n                      options)))))\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef node->graphql\n    :args (s/cat :input (s/keys :req [::js-name]\n                                :opt [::ident-transform]))))\n\n(comment\n  (str/join (repeat 1 \"  \"))\n  (println (query->graphql '[({:all [:id :name]}\n                               {:last \"csaa\"})] {}))\n\n  (p/query->ast '[(call-something {:a 1 :b {:c 3}})])\n  (ident-transform [:Counter/by-id 123])\n  (println (query->graphql [{[:Counter/by-id 123] [:a :b]}])))\n"]}