{"version":3,"sources":["com/wsscode/pathom/graphql.cljc"],"mappings":"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","names":["com.wsscode.pathom.graphql/*unbounded-recursion-count*","com.wsscode.pathom.graphql/camel-case","s","camel-snake-kebab.core/->camelCase","com.wsscode.pathom.graphql/kebab-case","camel-snake-kebab.core/->kebab-case","com.wsscode.pathom.graphql/pad-depth","depth","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.graphql/has-call?","children","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__48848","map__48851","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/boolean","com.wsscode.pathom.graphql/find-id","m","tempid?","p__48875","vec__48877","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","v","com.wsscode.pathom.graphql/stringify","x","js/JSON.stringify","G__48884","cljs.core/clj->js","cljs.core/uuid?","var_args","G__48894","com.wsscode.pathom.graphql/params->graphql","js/Error","js-name","com.wsscode.pathom.graphql.params__GT_graphql.cljs$core$IFn$_invoke$arity$4","root?","cljs.core/map?","params","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","p__48902","vec__48904","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__48911","vec__48913","k","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","p1__48889#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/Symbol","cljs.core/name","p__48926","vec__48928","com.wsscode.pathom.graphql/ident->alias","base","value","cljs.core/vector?","clojure.string/replace","p__48934","vec__48935","com.wsscode.pathom.graphql/ident-transform","key","fields","temp__5718__auto__","field-part","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core/last","cljs.core/zipmap","com.wsscode.pathom.graphql/group-inline-unions","map__48951","general","groups","p1__48949#","cljs.core/group-by","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__48960","vec__48961","p1__48950#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.graphql/special-params","p__48978","map__48979","cljs.core.get.cljs$core$IFn$_invoke$arity$3","com.wsscode.pathom.graphql/node->graphql","dispatch-key","union-key","query","ident-transform","parent-children","cljs.core/constantly","com$wsscode$pathom$graphql$node__GT_graphql_$_continue.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","depth-iterate","G__48994","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","map__48997","alias","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","G__49001","cljs.core/Keyword","cljs.core.map.cljs$core$IFn$_invoke$arity$2","continue","header","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","parent","com.wsscode.pathom.core.update_child.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","p1__48968#","cljs.core/pos-int?","com.wsscode.pathom.core.update_recursive_depth.cljs$core$IFn$_invoke$arity$variadic","cljs.core/dec","p1__48969#","G__49035","cljs.core/seq","com.wsscode.pathom.graphql.params__GT_graphql.cljs$core$IFn$_invoke$arity$3","map__49039","mutate-join","G__49046","com.wsscode.pathom.core/query->ast","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","vec__49081","p1__48974#","continue$.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","G__49094","com.wsscode.pathom.graphql/query->graphql","com.wsscode.pathom.graphql.query__GT_graphql.cljs$core$IFn$_invoke$arity$2","options","ast","com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__49203","cljs.core/contains?"],"sourcesContent":["(ns com.wsscode.pathom.graphql\n  (:require\n    #?(:clj [clojure.data.json :as json])\n    [camel-snake-kebab.core :as csk]\n    [clojure.string :as str]\n    [com.wsscode.pathom.misc :as p.misc]\n    [clojure.spec.alpha :as s]\n    [com.wsscode.pathom.core :as p]))\n\n(def ^:dynamic *unbounded-recursion-count* 5)\n\n(defn camel-case [s]\n  (csk/->camelCase s))\n\n(defn kebab-case [s]\n  (csk/->kebab-case s))\n\n(defn pad-depth [depth]\n  (str/join (repeat depth \"  \")))\n\n(defn has-call? [children]\n  (->> children\n       (filter (fn [{:keys [type]}] (= :call type)))\n       first boolean))\n\n(defn find-id [m tempid?]\n  (->> m\n       (filter (fn [[_ v]] (tempid? v)))\n       first))\n\n(defn stringify [x]\n  #?(:clj  (json/write-str (cond-> x\n                             (uuid? x) str))\n     :cljs (js/JSON.stringify (cond-> (clj->js x)\n                                (uuid? x) str))))\n\n(defn params->graphql\n  ([x js-name tempid?] (params->graphql x js-name tempid? true))\n  ([x js-name tempid? root?]\n   (cond\n     (map? x)\n     (let [params (->> (into [] (comp\n                                  (remove (fn [[_ v]] (tempid? v)))\n                                  (map (fn [[k v]] (str (js-name k) \": \" (params->graphql v js-name tempid? false))))) x)\n                       (str/join \", \"))]\n       (if root?\n         (str \"(\" params \")\")\n         (str \"{\" params \"}\")))\n\n     (sequential? x)\n     (str \"[\" (str/join \", \" (mapv #(params->graphql % js-name tempid? false) x)) \"]\")\n\n     (symbol? x)\n     (name x)\n\n     :else\n     (stringify x))))\n\n(defn ident->alias\n  \"Convert ident like [:Contact/by-id 123] to an usable GraphQL alias (eg: _COLON_Contact_SLASH_by_id_123).\"\n  [[base value]]\n  (let [value (if (vector? value) (str/join \"_\" value) value)]\n    (-> (str base \"_\" value) (str/replace #\"[^a-zA-Z0-9_]\" \"_\"))))\n\n(defn ident-transform [[key value]]\n  (let [fields (if-let [field-part (name key)]\n                 (str/split field-part #\"-and-|And\") [\"id\"])\n        value  (if (vector? value) value [value])]\n    (if-not (= (count fields) (count value))\n      (throw (ex-info \"The number of fields on value needs to match the entries\" {:key key :value value})))\n    {::selector (-> (namespace key) (str/split #\"\\.\") last)\n     ::params   (zipmap fields value)}))\n\n(defn group-inline-unions [children]\n  (let [{general nil :as groups} (group-by #(get-in % [:params ::on]) children)\n        groups (->> (dissoc groups nil)\n                    (into [] (map (fn [[k v]] {:type      :union-entry\n                                               :union-key k\n                                               :children  (mapv #(update % :params dissoc ::on) v)}))))]\n    (concat general groups)))\n\n(def special-params #{::on ::alias})\n\n(defn node->graphql [{:keys  [type children key dispatch-key params union-key query]\n                      ::keys [js-name depth ident-transform parent-children tempid?]\n                      :or    {depth   0\n                              tempid? (constantly false)}}]\n  (letfn [(continue\n            ([x] (continue x inc))\n            ([x depth-iterate]\n             (node->graphql (assoc x ::depth (depth-iterate depth)\n                                     ::parent-children (or (::parent-children x) children)\n                                     ::js-name js-name\n                                     ::tempid? tempid?\n                                     ::ident-transform ident-transform))))]\n    (let [{::keys [alias]} params\n          params (apply dissoc params special-params)]\n      (case type\n        :root\n        (str (if (has-call? children) \"mutation \" \"query \")\n          \"{\\n\" (str/join (map continue (group-inline-unions children))) \"}\\n\")\n\n        :join\n        (if (= 0 query)\n          \"\"\n          (let [header   (if (vector? key)\n                           (assoc (ident-transform key)\n                             ::index (ident->alias key))\n                           {::index    alias\n                            ::selector dispatch-key\n                            ::params   nil})\n                params   (merge (::params header) params)\n                children (cond\n                           (= '... query)\n                           (let [parent (-> (p/update-child {:children parent-children} key assoc :query (dec *unbounded-recursion-count*))\n                                            :children)]\n                             (mapv #(assoc % ::parent-children parent) parent))\n\n                           (pos-int? query)\n                           (let [parent (-> (p/update-recursive-depth {:children parent-children} key dec)\n                                            :children)]\n                             (mapv #(assoc % ::parent-children parent) parent))\n\n                           :else\n                           children)]\n            (str (pad-depth depth)\n              (if (::index header) (str (::index header) \": \"))\n              (js-name (::selector header)) (if (seq params) (params->graphql params js-name tempid?)) \" {\\n\"\n              (str/join (map continue (group-inline-unions children)))\n              (pad-depth depth) \"}\\n\")))\n\n        :call\n        (let [{::keys [mutate-join]} params\n              children (->> (or (some-> mutate-join p/query->ast :children)\n                                children)\n                            (remove (comp #{'*} :key)))]\n          (str (pad-depth depth) (js-name dispatch-key)\n            (params->graphql (dissoc params ::mutate-join) js-name tempid?)\n            (if (seq children)\n              (str\n                \" {\\n\"\n                (str/join (map continue children))\n                (pad-depth depth)\n                \"}\\n\")\n              (if-let [[k _] (find-id params tempid?)]\n                (str\n                  \" {\\n\"\n                  (pad-depth (inc depth))\n                  (js-name k)\n                  \"}\\n\")))))\n\n        :union\n        (str (pad-depth depth) \"__typename\\n\"\n          (str/join (map #(continue % identity) children)))\n\n        :union-entry\n        (str (pad-depth depth) \"... on \" (if (string? union-key) union-key (js-name union-key)) \" {\\n\"\n          (str/join (map continue children))\n          (pad-depth depth) \"}\\n\")\n\n        :prop\n        (str (pad-depth depth)\n          (if alias (str alias \": \"))\n          (js-name dispatch-key)\n          (if (seq params) (params->graphql params js-name tempid?))\n          \"\\n\")))))\n\n(defn query->graphql\n  \"Convert query from EDN format to GraphQL string.\"\n  ([query] (query->graphql query {}))\n  ([query options]\n   (let [ast (p/query->ast query)]\n     (node->graphql (merge\n                      ast\n                      {::js-name         name\n                       ::ident-transform ident-transform\n                       ::parent-children (:children ast)}\n                      options)))))\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef node->graphql\n    :args (s/cat :input (s/keys :req [::js-name]\n                          :opt [::ident-transform]))))\n\n(comment\n  (str/join (repeat 1 \"  \"))\n  (println (query->graphql '[({:all [:id :name]}\n                               {:last \"csaa\"})] {}))\n\n  (params->graphql {:a 1 :b {:c 3}} name)\n  (p/query->ast '[(call-something {:a 1 :b {:c 3}})])\n  (ident-transform [:Counter/by-id 123])\n  (println (query->graphql [{[:Counter/by-id 123] [:a :b]}])))\n"]}