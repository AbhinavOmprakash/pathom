{"version":3,"sources":["com/wsscode/pathom/book/util/indexeddb.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__77871","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__77909","i__13227__auto__","v__13228__auto__","cljs.core.nth","G__77915","G__77969","cljs.core/coll?","cljs.spec.alpha/or-spec-impl","G__78017","G__78043","com.wsscode.pathom.book.util.indexeddb/indexeddb","js/indexedDB","com.wsscode.pathom.book.util.indexeddb/event-result","e","goog.object/getValueByKeys","p__78058","map__78060","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.book.util.indexeddb/setup-db","db-name","migrations","c","cljs.core.async.promise_chan","open-req","cljs.core/count","G__78068","p1__78050#","goog.object/set","cljs.core.async.put_BANG_","goog.object/get","db","seq__78075","cljs.core/seq","chunk__78076","count__78077","i__78078","map__78521","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__78734","cljs.core/first","cljs.core/next","stores","seq__78526","chunk__78528","count__78529","i__78530","vec__78625","map__78628","map__78637","vec__78682","map__78685","map__78689","seq__78739","chunk__78741","count__78742","i__78743","vec__78822","map__78825","map__78831","vec__78862","map__78865","map__78868","store-name","key","indexes","path","cljs.spec.alpha/conform","store","seq__78643","chunk__78644","count__78645","i__78646","vec__78664","vec__78669","seq__78696","chunk__78697","count__78698","i__78699","vec__78717","vec__78720","seq__78836","chunk__78837","count__78838","i__78839","vec__78851","vec__78856","seq__78871","chunk__78872","count__78873","i__78874","vec__78884","vec__78889","index-name","options","cljs.core/clj->js","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","G__78898","p__78922","map__78923","com.wsscode.pathom.book.util.indexeddb/create!","entity","tx","req","com.wsscode.pathom.book.util.indexeddb/convert-back","x","cljs.core.js__GT_clj","p__78925","map__78926","com.wsscode.pathom.book.util.indexeddb/scan-store","cljs.core.async.chan","G__78929","temp__5718__auto__","cursor","cljs.core.assoc","cljs.core.async/close!","p__78932","map__78933","com.wsscode.pathom.book.util.indexeddb/read-object","id","p1__78931#","or__4131__auto__","G__78937"],"sourcesContent":["(ns com.wsscode.pathom.book.util.indexeddb\n  (:require [cljs.spec.alpha :as s]\n            [goog.object :as gobj]\n            [cljs.core.async :as async :refer [go <! put! chan]]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]))\n\n(s/def ::db any?)\n(s/def ::db-name string?)\n(s/def ::unique boolean?)\n(s/def ::store (s/keys :req [::key] :opt [::indexes]))\n(s/def ::store-name string?)\n(s/def ::stores (s/map-of ::store-name ::store))\n(s/def ::schema (s/keys :req [::stores]))\n(s/def ::migrations (s/coll-of ::schema))\n(s/def ::key (s/or :path string? :auto #{::auto-increment}))\n(s/def ::index (s/keys :opt [::unique]))\n(s/def ::index-name string?)\n(s/def ::indexes (s/map-of ::index-name ::index))\n\n(defn indexeddb [] js/indexedDB)\n\n(defn event-result [e] (gobj/getValueByKeys e #js [\"target\" \"result\"]))\n\n(defn setup-db [{::keys [db-name migrations]}]\n  (let [c        (async/promise-chan)\n        open-req (.open (indexeddb) db-name (count migrations))]\n    (doto open-req\n      (gobj/set \"onerror\" #(put! c %))\n      (gobj/set \"onsuccess\" #(put! c (gobj/get open-req \"result\")))\n      (gobj/set \"onupgradeneeded\"\n        (fn [e]\n          (let [db (event-result e)]\n            (doseq [{::keys [stores]} migrations]\n              (doseq [[store-name {::keys [key indexes]}] stores\n                      :let [{:keys [path]} (s/conform ::key key)\n                            store (.createObjectStore db store-name\n                                    (cond\n                                      path\n                                      #js {:keyPath path}\n\n                                      :else\n                                      #js {:autoIncrement true}))]]\n                (doseq [[index-name options] indexes]\n                  (.createIndex store index-name index-name (clj->js options)))))))))\n    c))\n\n(s/fdef setup-db\n  :args (s/cat :settings (s/keys :req [::db-name ::migrations]))\n  :ret ::db)\n\n(defn create! [{::keys [db store-name]} entity]\n  (let [c     (async/promise-chan)\n        tx    (.transaction db #js [store-name] \"readwrite\")\n        store (.objectStore tx store-name)\n        req   (.add store (clj->js entity))]\n    (gobj/set req \"onsuccess\"\n      (fn [e]\n        (put! c (event-result e))))\n    c))\n\n(defn convert-back [x]\n  (js->clj x :keywordize-keys true))\n\n(defn scan-store [{::keys [db store-name]}]\n  (let [c     (async/chan 50)\n        tx    (.transaction db #js [store-name] \"readonly\")\n        store (.objectStore tx store-name)]\n    (doto (.openCursor store)\n      (gobj/set \"onsuccess\"\n        (fn [e]\n          (if-let [cursor (event-result e)]\n            (do\n              (put! c (-> (convert-back (gobj/get cursor \"value\"))\n                          (assoc ::key (gobj/get cursor \"key\"))))\n              (.continue cursor))\n            (async/close! c)))))\n    c))\n\n(defn read-object [{::keys [db store-name]} id]\n  (let [c     (async/promise-chan)\n        tx    (.transaction db #js [store-name] \"readonly\")\n        store (.objectStore tx store-name)]\n    (-> (.get store id)\n        (gobj/set \"onsuccess\" #(put! c (or (some-> (convert-back (event-result %))\n                                                   (assoc ::key id))\n                                           ::not-found))))\n    c))\n\n(comment\n  setup-db\n\n  (defn make-db []\n    (setup-db {::db-name    \"connectAsyncDemo\"\n               ::migrations [{::stores {\"users\" {::key     ::auto-increment\n                                                 ::indexes {\"name\" {::unique false}}}}}]}))\n\n  (go\n    (let [db (<? (make-db))\n          id (<? (create! {::db         db\n                           ::store-name \"users\"}\n                   {:name \"Strangeeeer\"}))]\n      (js/console.log \"CREATED ITEM\" id)))\n\n  (go\n    (let [db (<? (make-db))]\n      (js/console.log \"users\" (<? (async/into [] (scan-store {::db db ::store-name \"users\"}))))))\n\n  (go\n    (let [db (<? (make-db))]\n      (js/console.log \"user\" (<? (read-object {::db db ::store-name \"users\"} 4))))))\n"]}