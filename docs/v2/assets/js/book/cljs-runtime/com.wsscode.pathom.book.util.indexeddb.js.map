{"version":3,"sources":["com/wsscode/pathom/book/util/indexeddb.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__49632","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__49642","i__12838__auto__","v__12839__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__49650","G__49752","cljs.core/coll?","cljs.spec.alpha/or-spec-impl","G__49762","G__49770","com.wsscode.pathom.book.util.indexeddb/indexeddb","js/indexedDB","com.wsscode.pathom.book.util.indexeddb/event-result","e","G__49790","G__49791","goog.object/getValueByKeys","p__49796","map__49797","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.book.util.indexeddb/setup-db","db-name","migrations","c","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","open-req","cljs.core/count","G__49807","G__49821","G__49822","G__49823","p1__49794#","G__49831","G__49832","G__49833","G__49858","G__49859","G__49860","goog.object/set","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","goog.object/get","db","seq__49872","cljs.core/seq","chunk__49873","count__49874","i__49875","map__50461","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__50694","cljs.core/first","cljs.core/next","stores","seq__50466","chunk__50468","count__50469","i__50470","vec__50619","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__50622","map__50630","vec__50666","map__50669","map__50671","seq__50701","chunk__50703","count__50704","i__50705","vec__50801","map__50804","map__50810","vec__50845","map__50848","map__50851","store-name","key","indexes","path","cljs.spec.alpha/conform","store","seq__50633","chunk__50634","count__50635","i__50636","vec__50654","vec__50660","seq__50673","chunk__50674","count__50675","i__50676","vec__50685","vec__50690","seq__50815","chunk__50816","count__50817","i__50818","vec__50827","vec__50838","seq__50857","chunk__50858","count__50859","i__50860","vec__50870","vec__50878","index-name","options","cljs.core/clj->js","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","G__50887","p__50918","map__50919","com.wsscode.pathom.book.util.indexeddb/create!","entity","tx","req","G__50924","G__50925","G__50926","com.wsscode.pathom.book.util.indexeddb/convert-back","x","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","p__50930","map__50931","com.wsscode.pathom.book.util.indexeddb/scan-store","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","G__50936","G__50937","G__50938","G__50939","temp__5718__auto__","cursor","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","p__50955","map__50958","com.wsscode.pathom.book.util.indexeddb/read-object","id","G__50969","G__50970","G__50971","p1__50947#","or__4131__auto__","G__50973"],"sourcesContent":["(ns com.wsscode.pathom.book.util.indexeddb\n  (:require [cljs.spec.alpha :as s]\n            [goog.object :as gobj]\n            [cljs.core.async :as async :refer [go <! put! chan]]\n            [com.wsscode.common.async-cljs :refer [go-catch <?]]))\n\n(s/def ::db any?)\n(s/def ::db-name string?)\n(s/def ::unique boolean?)\n(s/def ::store (s/keys :req [::key] :opt [::indexes]))\n(s/def ::store-name string?)\n(s/def ::stores (s/map-of ::store-name ::store))\n(s/def ::schema (s/keys :req [::stores]))\n(s/def ::migrations (s/coll-of ::schema))\n(s/def ::key (s/or :path string? :auto #{::auto-increment}))\n(s/def ::index (s/keys :opt [::unique]))\n(s/def ::index-name string?)\n(s/def ::indexes (s/map-of ::index-name ::index))\n\n(defn indexeddb [] js/indexedDB)\n\n(defn event-result [e] (gobj/getValueByKeys e #js [\"target\" \"result\"]))\n\n(defn setup-db [{::keys [db-name migrations]}]\n  (let [c        (async/promise-chan)\n        open-req (.open (indexeddb) db-name (count migrations))]\n    (doto open-req\n      (gobj/set \"onerror\" #(put! c %))\n      (gobj/set \"onsuccess\" #(put! c (gobj/get open-req \"result\")))\n      (gobj/set \"onupgradeneeded\"\n        (fn [e]\n          (let [db (event-result e)]\n            (doseq [{::keys [stores]} migrations]\n              (doseq [[store-name {::keys [key indexes]}] stores\n                      :let [{:keys [path]} (s/conform ::key key)\n                            store (.createObjectStore db store-name\n                                    (cond\n                                      path\n                                      #js {:keyPath path}\n\n                                      :else\n                                      #js {:autoIncrement true}))]]\n                (doseq [[index-name options] indexes]\n                  (.createIndex store index-name index-name (clj->js options)))))))))\n    c))\n\n(s/fdef setup-db\n  :args (s/cat :settings (s/keys :req [::db-name ::migrations]))\n  :ret ::db)\n\n(defn create! [{::keys [db store-name]} entity]\n  (let [c     (async/promise-chan)\n        tx    (.transaction db #js [store-name] \"readwrite\")\n        store (.objectStore tx store-name)\n        req   (.add store (clj->js entity))]\n    (gobj/set req \"onsuccess\"\n      (fn [e]\n        (put! c (event-result e))))\n    c))\n\n(defn convert-back [x]\n  (js->clj x :keywordize-keys true))\n\n(defn scan-store [{::keys [db store-name]}]\n  (let [c     (async/chan 50)\n        tx    (.transaction db #js [store-name] \"readonly\")\n        store (.objectStore tx store-name)]\n    (doto (.openCursor store)\n      (gobj/set \"onsuccess\"\n        (fn [e]\n          (if-let [cursor (event-result e)]\n            (do\n              (put! c (-> (convert-back (gobj/get cursor \"value\"))\n                          (assoc ::key (gobj/get cursor \"key\"))))\n              (.continue cursor))\n            (async/close! c)))))\n    c))\n\n(defn read-object [{::keys [db store-name]} id]\n  (let [c     (async/promise-chan)\n        tx    (.transaction db #js [store-name] \"readonly\")\n        store (.objectStore tx store-name)]\n    (-> (.get store id)\n        (gobj/set \"onsuccess\" #(put! c (or (some-> (convert-back (event-result %))\n                                                   (assoc ::key id))\n                                           ::not-found))))\n    c))\n\n(comment\n  setup-db\n\n  (defn make-db []\n    (setup-db {::db-name    \"connectAsyncDemo\"\n               ::migrations [{::stores {\"users\" {::key     ::auto-increment\n                                                 ::indexes {\"name\" {::unique false}}}}}]}))\n\n  (go\n    (let [db (<? (make-db))\n          id (<? (create! {::db         db\n                           ::store-name \"users\"}\n                   {:name \"Strangeeeer\"}))]\n      (js/console.log \"CREATED ITEM\" id)))\n\n  (go\n    (let [db (<? (make-db))]\n      (js/console.log \"users\" (<? (async/into [] (scan-store {::db db ::store-name \"users\"}))))))\n\n  (go\n    (let [db (<? (make-db))]\n      (js/console.log \"user\" (<? (read-object {::db db ::store-name \"users\"} 4))))))\n"]}