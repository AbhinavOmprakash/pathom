shadow$provide.module$node_modules$codemirror$addon$fold$foldcode=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){function doFold(cm,pos,options,force){function getRange(allowFolded){var range=finder(cm,pos);if(!range||range.to.line-range.from.line<minSize)return null;
for(var marks=cm.findMarksAt(range.from),i=0;i<marks.length;++i)if(marks[i].__isFold&&"fold"!==force){if(!allowFolded)return null;range.cleared=!0;marks[i].clear()}return range}if(options&&options.call){var finder=options;options=null}else finder=getOption(cm,options,"rangeFinder");"number"==typeof pos&&(pos=CodeMirror.Pos(pos,0));var minSize=getOption(cm,options,"minFoldSize"),range$jscomp$0=getRange(!0);if(getOption(cm,options,"scanUp"))for(;!range$jscomp$0&&pos.line>cm.firstLine();)pos=CodeMirror.Pos(pos.line-
1,0),range$jscomp$0=getRange(!1);if(range$jscomp$0&&!range$jscomp$0.cleared&&"unfold"!==force){var myWidget=makeWidget(cm,options);CodeMirror.on(myWidget,"mousedown",function(e){myRange.clear();CodeMirror.e_preventDefault(e)});var myRange=cm.markText(range$jscomp$0.from,range$jscomp$0.to,{replacedWith:myWidget,clearOnEnter:getOption(cm,options,"clearOnEnter"),__isFold:!0});myRange.on("clear",function(from,to){CodeMirror.signal(cm,"unfold",cm,from,to)});CodeMirror.signal(cm,"fold",cm,range$jscomp$0.from,
range$jscomp$0.to)}}function makeWidget(cm,options){cm=getOption(cm,options,"widget");"string"==typeof cm?(options=document.createTextNode(cm),cm=document.createElement("span"),cm.appendChild(options),cm.className="CodeMirror-foldmarker"):cm&&(cm=cm.cloneNode(!0));return cm}function getOption(cm,options,name){return options&&void 0!==options[name]?options[name]:(cm=cm.options.foldOptions)&&void 0!==cm[name]?cm[name]:defaultOptions[name]}CodeMirror.newFoldFunction=function(rangeFinder,widget){return function(cm,
pos){doFold(cm,pos,{rangeFinder:rangeFinder,widget:widget})}};CodeMirror.defineExtension("foldCode",function(pos,options,force){doFold(this,pos,options,force)});CodeMirror.defineExtension("isFolded",function(pos){pos=this.findMarksAt(pos);for(var i=0;i<pos.length;++i)if(pos[i].__isFold)return!0});CodeMirror.commands.toggleFold=function(cm){cm.foldCode(cm.getCursor())};CodeMirror.commands.fold=function(cm){cm.foldCode(cm.getCursor(),null,"fold")};CodeMirror.commands.unfold=function(cm){cm.foldCode(cm.getCursor(),
null,"unfold")};CodeMirror.commands.foldAll=function(cm){cm.operation(function(){for(var i=cm.firstLine(),e=cm.lastLine();i<=e;i++)cm.foldCode(CodeMirror.Pos(i,0),null,"fold")})};CodeMirror.commands.unfoldAll=function(cm){cm.operation(function(){for(var i=cm.firstLine(),e=cm.lastLine();i<=e;i++)cm.foldCode(CodeMirror.Pos(i,0),null,"unfold")})};CodeMirror.registerHelper("fold","combine",function(){var funcs=Array.prototype.slice.call(arguments,0);return function(cm,start){for(var i=0;i<funcs.length;++i){var found=
funcs[i](cm,start);if(found)return found}}});CodeMirror.registerHelper("fold","auto",function(cm,start){for(var helpers=cm.getHelpers(start,"fold"),i=0;i<helpers.length;i++){var cur=helpers[i](cm,start);if(cur)return cur}});var defaultOptions={rangeFinder:CodeMirror.fold.auto,widget:"â†”",minFoldSize:0,scanUp:!1,clearOnEnter:!0};CodeMirror.defineOption("foldOptions",null);CodeMirror.defineExtension("foldOption",function(options,name){return getOption(this,options,name)})})}
//# sourceMappingURL=module$node_modules$codemirror$addon$fold$foldcode.js.map
