shadow$provide.module$node_modules$codemirror$addon$search$matchesonscrollbar=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror"),require("module$node_modules$codemirror$addon$search$searchcursor"),require("module$node_modules$codemirror$addon$scroll$annotatescrollbar")):"function"==typeof define&&define.amd?define(["../../lib/codemirror","./searchcursor","../scroll/annotatescrollbar"],
mod):mod(CodeMirror)})(function(CodeMirror){function SearchAnnotation(cm,query,caseFold,options){this.cm=cm;this.options=options;var annotateOptions={listenForChanges:!1},prop;for(prop in options)annotateOptions[prop]=options[prop];annotateOptions.className||(annotateOptions.className="CodeMirror-search-match");this.annotation=cm.annotateScrollbar(annotateOptions);this.query=query;this.caseFold=caseFold;this.gap={from:cm.firstLine(),to:cm.lastLine()+1};this.matches=[];this.update=null;this.findMatches();
this.annotation.update(this.matches);var self=this;cm.on("change",this.changeHandler=function(_cm,change){self.onChange(change)})}function offsetLine(line,changeStart,sizeChange){return line<=changeStart?line:Math.max(changeStart,line+sizeChange)}CodeMirror.defineExtension("showMatchesOnScrollbar",function(query,caseFold,options){"string"==typeof options&&(options={className:options});options||(options={});return new SearchAnnotation(this,query,caseFold,options)});SearchAnnotation.prototype.findMatches=
function(){if(this.gap){for(var i=0;i<this.matches.length;i++){var match=this.matches[i];if(match.from.line>=this.gap.to)break;match.to.line>=this.gap.from&&this.matches.splice(i--,1)}for(var cursor=this.cm.getSearchCursor(this.query,CodeMirror.Pos(this.gap.from,0),this.caseFold),maxMatches=this.options&&this.options.maxMatches||1E3;cursor.findNext();){match={from:cursor.from(),to:cursor.to()};if(match.from.line>=this.gap.to)break;this.matches.splice(i++,0,match);if(this.matches.length>maxMatches)break}this.gap=
null}};SearchAnnotation.prototype.onChange=function(change){var startLine=change.from.line,endLine=CodeMirror.changeEnd(change).line,sizeChange=endLine-change.to.line;this.gap?(this.gap.from=Math.min(offsetLine(this.gap.from,startLine,sizeChange),change.from.line),this.gap.to=Math.max(offsetLine(this.gap.to,startLine,sizeChange),change.from.line)):this.gap={from:change.from.line,to:endLine+1};if(sizeChange)for(change=0;change<this.matches.length;change++){endLine=this.matches[change];var newFrom=
offsetLine(endLine.from.line,startLine,sizeChange);newFrom!=endLine.from.line&&(endLine.from=CodeMirror.Pos(newFrom,endLine.from.ch));newFrom=offsetLine(endLine.to.line,startLine,sizeChange);newFrom!=endLine.to.line&&(endLine.to=CodeMirror.Pos(newFrom,endLine.to.ch))}clearTimeout(this.update);var self=this;this.update=setTimeout(function(){self.updateAfterChange()},250)};SearchAnnotation.prototype.updateAfterChange=function(){this.findMatches();this.annotation.update(this.matches)};SearchAnnotation.prototype.clear=
function(){this.cm.off("change",this.changeHandler);this.annotation.clear()}})}
//# sourceMappingURL=module$node_modules$codemirror$addon$search$matchesonscrollbar.js.map
