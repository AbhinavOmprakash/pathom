{"version":3,"sources":["com/wsscode/pathom/viz/codemirror.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/string?","cljs.core/map?","cljs.core/pos-int?","cljs.core/boolean?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__53860","G__53877","cljs.core/contains?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__53906","i__12838__auto__","v__12839__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","com.wsscode.pathom.viz.codemirror/prop-call","seq53913","G__53914","cljs.core/first","cljs.core/next","G__53915","self__4717__auto__","comp","name","args","temp__5720__auto__","f","G__53921","fulcro.client.primitives/props","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.viz.codemirror/html-props","props","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__53927","vec__53928","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","_","cljs.core/namespace","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","com.wsscode.pathom.viz.codemirror/pathom-cache","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.viz","js/com.wsscode.pathom.viz.codemirror","js/com.wsscode.pathom.viz.codemirror.Editor","this__44526__auto__","js/React.Component","G__53952","G__53953","js/React.Component.prototype","G__53954","fulcro.client.primitives/default-component-prototype","goog.object/extend","fulcro.client.primitives/-register-component!","x53955","this__43428__auto__","reconciler__43429__auto__","fulcro.client.primitives/get-reconciler","lifecycle__43430__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","indexer__43431__auto__","goog.object/set","fulcro.client.impl.protocols/index-component!","G__53960","G__53961","next-props__43415__auto__","this__43414__auto__","map__53974","goog.object/get","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","this__43432__auto__","reconciler__43433__auto__","lifecycle__43434__auto__","cfg__43435__auto__","st__43436__auto__","indexer__43437__auto__","and__4120__auto__","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc","G__53994","G__53995","fulcro.client.impl.protocols/drop-component!","this__43444__auto__","*reconciler*-orig-val__53998","fulcro.client.primitives/*reconciler*","*depth*-orig-val__53999","fulcro.client.primitives/*depth*","*shared*-orig-val__54000","fulcro.client.primitives/*shared*","*instrument*-orig-val__54001","fulcro.client.primitives/*instrument*","*parent*-orig-val__54002","fulcro.client.primitives/*parent*","*reconciler*-temp-val__54003","*depth*-temp-val__54004","fulcro.client.primitives/depth","*shared*-temp-val__54005","fulcro.client.primitives.shared.cljs$core$IFn$_invoke$arity$1","*instrument*-temp-val__54006","fulcro.client.primitives/instrument","*parent*-temp-val__54007","x54026","x54029","this__44529__auto__","writer__44530__auto__","opt__44531__auto__","cljs.core/-write","com.wsscode.pathom.viz.codemirror/Editor","this","textarea","options","or__4131__auto__","process","codemirror","js/CodeMirror.fromTextArea","cljs.core/reset!","e53965","p1__53938#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","js/clearTimeout","G__53969","G__53970","G__53971","js/setTimeout","com.wsscode.pathom.viz.codemirror.prop_call.cljs$core$IFn$_invoke$arity$variadic","e","js/console.warn","value","force-index-update?","indexes","cm","cur-index","G__53978","G__53979","goog.object/getValueByKeys","G__53983","G__53984","G__53985","G__53987","G__53988","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.viz.codemirror/autocomplete","cljs.core/not","cur-value","temp__5718__auto__","fulcro.client.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","fulcro.util/force-children","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p1__53940#","js/React.createElement","com.wsscode.pathom.viz.codemirror/editor","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.viz.codemirror/escape-re","input","re","js/RegExp","com.wsscode.pathom.viz.codemirror/fuzzy-re","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","c","com.wsscode.pathom.viz.codemirror/str->keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__54037","map__54038","com.wsscode.pathom.viz.codemirror/token-context","index-io","token","state","mode","path-stack","find-ctx","com$wsscode$pathom$viz$codemirror$token_context_$_find_ctx.cljs$core$IFn$_invoke$arity$2","ctx","key","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1","find_ctx.cljs$core$IFn$_invoke$arity$1","prev","obj54051","obj54064","com.wsscode.pathom.viz.codemirror/completions","index","reg","G__54070","cljs.core/Keyword","com.wsscode.pathom.connect/discover-attrs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__54066#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/PersistentHashMap","js/window","com.wsscode.pathom.viz.codemirror/cm-completions","cur","ch","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","com.wsscode.pathom.viz.codemirror/fuzzy-match","blank?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__54080#","com.wsscode.fuzzy/fuzzy-match","line","fexpr__54093","start","js/CodeMirror","cljs.core/count","end","words","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.viz.codemirror/def-cm-command","G__54101","G__54102","G__54103","com.wsscode.pathom.viz.codemirror/key-has-children?","completions","cljs.core/seq","com.wsscode.pathom.viz.codemirror/str-repeat","n","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","indent","G__54117","G__54118","G__54122","G__54123","vec__54124","cursor-end","joined","p__54130","map__54132","com.wsscode.pathom.viz.codemirror/pathom","G__54139","G__54148","G__54149","js/CodeMirror.showHint","G__54157","G__54158","G__54159","js/module$node_modules$parinfer_codemirror$parinfer_codemirror.init","p1__54127#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.wsscode.pathom.viz.codemirror/clojure","G__54166","p1__54163#"],"sourcesContent":["(ns com.wsscode.pathom.viz.codemirror\n  (:require [cljs.reader :refer [read-string]]\n            [com.wsscode.fuzzy :as fuzzy]\n            [cljs.spec.alpha :as s]\n            [clojure.string :as str]\n            [cljsjs.codemirror]\n            [com.wsscode.pathom.connect :as pc]\n            [fulcro.client.dom :as dom]\n            [fulcro.client.primitives :as fp]\n            [goog.object :as gobj]\n\n            [\"codemirror/mode/clojure/clojure\"]\n            [\"codemirror/addon/edit/matchbrackets\"]\n            [\"codemirror/addon/edit/closebrackets\"]\n            [\"codemirror/addon/fold/foldcode\"]\n            [\"codemirror/addon/fold/foldgutter\"]\n            [\"codemirror/addon/fold/brace-fold\"]\n            [\"codemirror/addon/fold/indent-fold\"]\n            [\"codemirror/addon/selection/active-line\"]\n            [\"codemirror/addon/search/match-highlighter\"]\n            [\"codemirror/addon/search/search\"]\n            [\"codemirror/addon/search/searchcursor\"]\n            [\"codemirror/addon/hint/anyword-hint\"]\n            [\"codemirror/addon/hint/show-hint\"]\n            [\"codemirror/addon/display/placeholder\"]\n            [\"parinfer-codemirror\" :as parinfer-cm]\n            [\"./pathom-mode\"]))\n\n(s/def ::mode (s/or :string string? :obj map?))\n(s/def ::theme string?)\n(s/def ::indentUnit pos-int?)\n(s/def ::smartIndent boolean?)\n(s/def ::lineNumbers boolean?)\n(s/def ::readOnly boolean?)\n\n(s/def ::value string?)\n(s/def ::onChange (s/fspec :args (s/cat :code string?)))\n\n(s/def ::options (s/keys :opt [::mode\n                               ::theme\n                               ::indentUnit\n                               ::smartIndent\n                               ::lineNumbers]))\n\n(s/def ::props (s/keys :req-un [::value]\n                 :opt [::options]))\n\n(s/def ::extraKeys\n  (s/map-of string? (s/or :str string? :fn fn?)))\n\n(defn prop-call [comp name & args]\n  (when-let [f (-> comp fp/props name)]\n    (apply f args)))\n\n(defn html-props [props]\n  (->> props\n       (remove (fn [[k _]] (namespace k)))\n       (into {})\n       (clj->js)))\n\n(def pathom-cache (atom {}))\n\n(declare autocomplete)\n\n(fp/defui ^:once Editor\n  Object\n  (componentDidMount [this]\n    (let [textarea   (gobj/get this \"textNode\")\n          options    (-> this fp/props ::options (or {}) clj->js)\n          process    (-> this fp/props ::process)\n          codemirror (js/CodeMirror.fromTextArea textarea options)]\n      (reset! pathom-cache {})\n\n      (try\n        (.on codemirror \"change\" #(when (not= (gobj/get % \"origin\") \"setValue\")\n                                    (js/clearTimeout (gobj/get this \"editorHold\"))\n                                    (gobj/set this \"editorHold\"\n                                      (js/setTimeout\n                                        (fn []\n                                          (gobj/set this \"editorHold\" false))\n                                        300))\n                                    (prop-call this :onChange (.getValue %))))\n        (.setValue codemirror (-> this fp/props :value))\n        (if process (process codemirror))\n        (catch :default e (js/console.warn \"Error setting up CodeMirror\" e)))\n      (gobj/set this \"codemirror\" codemirror)))\n\n  (componentWillReceiveProps [this {:keys     [value force-index-update?]\n                                    ::pc/keys [indexes]}]\n    (let [cm        (gobj/get this \"codemirror\")\n          cur-index (gobj/getValueByKeys cm #js [\"options\" \"pathomIndex\"])]\n      (when (and cur-index (or force-index-update? (not= indexes @cur-index)))\n        (reset! pathom-cache {})\n        (reset! cur-index indexes)\n        (gobj/set (gobj/getValueByKeys cm #js [\"options\" \"hintOptions\"]) \"hint\" (partial autocomplete indexes)))\n\n      ; there is a race condition that happens when user types something, react updates state and try to update\n      ; the state back to the editor, which moves the cursor in the editor in weird ways. the workaround is to\n      ; stop accepting external values after a short period after user key strokes.\n      (if-not (gobj/get this \"editorHold\")\n        (let [cur-value (.getValue cm)]\n          (if (and cm value (not= value cur-value))\n            (.setValue cm value))))))\n\n  (componentWillUnmount [this]\n    (if-let [cm (gobj/get this \"codemirror\")]\n      (.toTextArea cm)))\n\n  (render [this]\n    (let [props (fp/props this)]\n      (dom/div (-> props (dissoc :value :onChange :force-index-update?) (html-props))\n        (js/React.createElement \"textarea\"\n          #js {:ref          #(gobj/set this \"textNode\" %)\n               :defaultValue (:value props)})))))\n\n(def editor (fp/factory Editor))\n\n(defn escape-re [input]\n  (let [re (js/RegExp. \"([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])\" \"g\")]\n    (-> input str (.replace re \"\\\\$1\"))))\n\n(defn fuzzy-re [input]\n  (-> (reduce (fn [s c] (str s (escape-re c) \".*\")) \"\" input)\n      (js/RegExp \"i\")))\n\n(defn str->keyword [s] (keyword (subs s 1)))\n\n(defn token-context [{::pc/keys [index-io] :as indexes} token]\n  (let [state      (gobj/get token \"state\")\n        mode       (gobj/get state \"mode\")\n        path-stack (gobj/get state \"pathStack\")\n\n        find-ctx   (fn find-ctx\n                     ([s] (find-ctx s []))\n                     ([s ctx]\n                      (let [mode (gobj/get s \"mode\")\n                            key  (gobj/get s \"key\")]\n                        (cond\n                          ; ident join: [{[:ident x] [|]}]\n                          (and (= \"join\" mode)\n                               (= \"ident\" (gobj/getValueByKeys s \"key\" \"mode\")))\n                          (let [key (str->keyword (gobj/getValueByKeys s \"key\" \"key\"))]\n                            {:type :attribute :context (conj ctx key)})\n\n                          ; join: [{:child [|]}]\n                          (and (= \"join\" mode)\n                               (= (string? key)))\n                          (let [key (str->keyword key)]\n                            (if (contains? (get index-io #{}) key)\n                              {:type :attribute :context (conj ctx key)}\n                              (recur (gobj/getValueByKeys s \"prev\" \"prev\") (conj ctx key))))\n\n                          :else\n                          {:type :attribute :context ctx}))))]\n\n    (cond\n      (and (= \"ident\" mode)\n           (or (nil? (gobj/get path-stack \"key\"))\n               (= (gobj/get token \"string\") (gobj/get path-stack \"key\"))))\n      {:type :ident}\n\n      (and (= \"join\" mode)\n           (or (= (gobj/get token \"string\") (gobj/get path-stack \"key\"))\n               (nil? (gobj/get path-stack \"key\"))))\n      (find-ctx (if (= \"param-exp\" (gobj/getValueByKeys path-stack \"prev\" \"mode\"))\n                  (gobj/getValueByKeys path-stack \"prev\" \"prev\" \"prev\")\n                  (gobj/getValueByKeys path-stack \"prev\" \"prev\")))\n\n      (= \"attr-list\" mode)\n      (if (gobj/getValueByKeys path-stack \"prev\" \"mode\")\n        (find-ctx (gobj/get path-stack \"prev\"))\n        ; no stack, empty context\n        {:type :attribute :context []})\n\n      (= \"param-exp\" mode)\n      (let [prev (gobj/getValueByKeys path-stack \"prev\")]\n        (recur indexes (js-obj \"state\" (js-obj \"mode\" (gobj/get prev \"mode\") \"pathStack\" prev)))))))\n\n(defn ^:export completions [index token reg]\n  (let [ctx (token-context index token)]\n    (when reg\n      (case (:type ctx)\n        :attribute (->> (pc/discover-attrs (assoc index ::pc/cache pathom-cache)\n                          (->> ctx :context (remove (comp #{\">\"} namespace)))))\n        :ident (into {} (map #(hash-map % {})) (-> index ::pc/idents))\n        {}))))\n\n(gobj/set js/window \"cljsDeref\" deref)\n\n(defn cm-completions [index cm]\n  (let [cur   (.getCursor cm)\n        ch    (.-ch cur)\n        token (.getTokenAt cm cur)\n        reg   (subs (.-string token) 0 (- ch (.-start token)))]\n    (completions index token reg)))\n\n(defn fuzzy-match [blank? reg options]\n  (if blank?\n    (mapv str options)\n    (->> options\n         (map (comp #(hash-map ::fuzzy/string %) str))\n         (hash-map ::blank? blank?\n                   ::fuzzy/search-input reg\n                   ::fuzzy/options)\n         (fuzzy/fuzzy-match)\n         (map ::fuzzy/string))))\n\n(defn autocomplete [index cm options]\n  (let [cur    (.getCursor cm)\n        line   (.-line cur)\n        ch     (.-ch cur)\n        token  (.getTokenAt cm cur)\n        reg    (subs (.-string token) 0 (- ch (.-start token)))\n        blank? (#{\"[\" \"{\" \" \" \"(\"} reg)\n        start  (if blank? cur (-> js/CodeMirror (.Pos line (- ch (count reg)))))\n        end    (if blank? cur (-> js/CodeMirror (.Pos line (gobj/get token \"end\"))))\n        words  (->> (cm-completions index cm) (mapv first))]\n\n    (if words\n      #js {:list (->> words\n                      (remove (get index ::pc/autocomplete-ignore #{}))\n                      (fuzzy-match blank? reg)\n                      sort\n                      clj->js)\n           :from start\n           :to   end})))\n\n(defn def-cm-command [name f]\n  (gobj/set (gobj/get js/CodeMirror \"commands\") name f))\n\n(defn ^:export key-has-children? [completions token]\n  (let [reg (str->keyword (gobj/get token \"string\"))]\n    (and (= \"atom\" (gobj/get token \"type\"))\n         (or (seq (get completions reg))\n             (= \">\" (namespace reg))))))\n\n(defn str-repeat [s n]\n  (str/join (repeat n s)))\n\n(def-cm-command \"pathomJoin\"\n  (fn [cm]\n    (let [cur    (.getCursor cm)\n          token  (.getTokenAt cm cur)\n          indent (or (gobj/getValueByKeys token #js [\"state\" \"pathStack\" \"indent\"])\n                     0)]\n\n      (if (and (= \"attr-list\" (gobj/getValueByKeys token #js [\"state\" \"mode\"]))\n               (= \"atom-composite\" (gobj/get token \"type\")))\n        (let [line  (.-line cur)\n              start (.Pos js/CodeMirror line (gobj/get token \"start\"))\n              end   (.Pos js/CodeMirror line (gobj/get token \"end\"))\n              s     (gobj/get token \"string\")\n\n              [cursor-end joined]\n              (if (= (.-ch start) indent)\n                [(.Pos js/CodeMirror (inc line) (+ 2 indent))\n                 (str \"{\" s \"\\n\" (str-repeat \" \" (inc indent)) \"[]}\")]\n\n                [(.Pos js/CodeMirror line (+ (gobj/get token \"start\")\n                                            (count s)\n                                            3))\n                 (str \"{\" s \" []}\")])]\n          (.replaceRange cm joined start end)\n          (.setCursor cm cursor-end)\n          (.showHint cm))))))\n\n(defn pathom [{::pc/keys [indexes] :as props}]\n  (let [options {::lineNumbers               true\n                 ::mode                      \"pathom\"\n                 ::matchBrackets             true\n                 ::autoCloseBrackets         true\n                 ::highlightSelectionMatches true\n                 ::foldGutter                true\n                 ::hintOptions               {:hint           (partial autocomplete indexes)\n                                              :completeSingle false}\n                 ::extraKeys                 {\"Ctrl-Space\" \"autocomplete\"\n                                              \"Cmd-J\"      \"pathomJoin\"}\n                 ::gutters                   [\"CodeMirror-linenumbers\" \"CodeMirror-foldgutter\"]\n                 :pathomIndex                (atom indexes)}]\n    (editor (-> props\n                (assoc ::process (fn [cm]\n                                   (.on cm \"keyup\" (fn [cm e] (when (and (not (gobj/getValueByKeys cm #js [\"state\" \"completionActive\"]))\n                                                                         (= 1 (-> (gobj/get e \"key\") (count))))\n                                                                (js/CodeMirror.showHint cm))))\n                                   (parinfer-cm/init cm \"smart\" #js {:forceBalance true})))\n                (update ::options #(merge options %))))))\n\n(defn clojure [props]\n  (let [options {::lineNumbers               true\n                 ::mode                      \"clojure\"\n                 ::matchBrackets             true\n                 ::highlightSelectionMatches true\n                 ::foldGutter                true\n                 ::gutters                   [\"CodeMirror-linenumbers\" \"CodeMirror-foldgutter\"]}]\n    (editor (-> props\n                (update ::options #(merge options %))))))\n"]}