{"version":3,"sources":["fulcro/inspect/client.cljs"],"mappings":"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","names":["js/fulcro","js/fulcro.inspect","js/fulcro.inspect.client","js/fulcro.inspect.client.started?*","fulcro.inspect.client/started?*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/fulcro.inspect.client.tools-app*","fulcro.inspect.client/tools-app*","js/fulcro.inspect.client.apps*","fulcro.inspect.client/apps*","js/fulcro.inspect.client.send-ch","fulcro.inspect.client/send-ch","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async/dropping-buffer","fulcro.inspect.client/app-uuid-key","fulcro.inspect.client/post-message","type","data","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.client/event-data","event","G__60729","goog.object/getValueByKeys","fulcro.inspect.remote.transit/read","fulcro.inspect.client/start-send-message-loop","c__44617__auto__","cljs.core.async.impl.dispatch/run","f__44618__auto__","switch__44304__auto__","state_60762","state_val_60763","statearr-60765","cljs.core.async.impl.ioc-helpers/take!","inst_60760","cljs.core.async.impl.ioc-helpers/return-chan","inst_60735","statearr-60769","statearr-60770","statearr-60773","inst_60740","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","inst_60741","inst_60744","inst_60746","inst_60747","js/Date","inst_60748","inst_60749","cljs.core/PersistentHashMap","inst_60750","inst_60751","inst_60752","inst_60753","inst_60754","statearr-60785","statearr-60786","statearr-60788","inst_60758","statearr-60794","statearr-60795","state-machine__44305__auto__","ret-value__44306__auto__","result__44307__auto__","cljs.core/keyword-identical?","e60799","js/Object","ex__44308__auto__","statearr-60800","cljs.core.async.impl.ioc-helpers/process-exception","state__44619__auto__","statearr-60802","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","fulcro.inspect.remote.transit/write","fulcro.inspect.client/listen-local-messages","and__4120__auto__","G__60809","fulcro.inspect.client/handle-devtool-message","fulcro.inspect.client/app-uuid","reconciler","G__60811","fulcro.client.primitives/app-state","cljs.core/deref","fulcro.inspect.client/app-id","or__4131__auto__","G__60819","G__60822","fulcro.client.primitives/app-root","fulcro.inspect.ui.helpers/react-display-name","fulcro.inspect.client/inspect-network-init","network","app","cljs.core/reset!","var_args","G__60828","fulcro.inspect.client/transact-inspector!","js/Error","tx","ref","fulcro.inspect.client/MAX_HISTORY_SIZE","fulcro.inspect.client/update-state-history","state","p1__60838#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","fulcro.inspect.lib.misc/fixed-size-assoc","cljs.core/hash","fulcro.inspect.client/db-update","app-uuid","old-state","new-state","diff","fulcro.inspect.lib.diff/diff","fulcro.inspect.client/db-from-history","state-hash","G__60865","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.client/dispose-app","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","fulcro.inspect.client/set-active-app","p__60906","map__60908","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","fulcro.inspect.client/inspect-app","networking","state*","G__60920","cljs.core/random-uuid","seq__60921","cljs.core/seq","chunk__60922","count__60923","i__60924","vec__60938","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__60944","cljs.core/first","cljs.core/next","_","n","cljs.core/assoc","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__60894#","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/keys","p1__60897#","p2__60898#","p3__60895#","p4__60896#","cljs.core/add-watch","p__60951","p__60952","map__60954","map__60956","fulcro.inspect.client/inspect-tx","env","db-before","db-after","info","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","p1__60950#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__60964","G__60965","goog.object/get","fulcro.client.primitives/react-type","clojure.set/rename-keys","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","this__4385__auto__","k__4386__auto__","this__4387__auto__","k60978","else__4388__auto__","G__61003","cljs.core/Keyword","options","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__61022","vec__61028","k__4408__auto__","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__60977","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","this__4381__auto__","h__4243__auto__","fexpr__61044","coll__4382__auto__","cljs.core/hash-unordered-coll","this60979","other60980","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__61130","expr__61131","G__61134","G__61135","G__61137","G__61138","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","fulcro.inspect.client/TransformNetwork","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__60991","extmap__4424__auto__","G__61157","cljs.core/record?","fulcro.inspect.client/->TransformNetwork","fulcro.inspect.client/map->TransformNetwork","this","e61128","fulcro.client.network/serialize-requests?","edn","ok","error","map__61063","transform-query","transform-response","transform-error","app*","x","req-id","temp__5718__auto__","edn'","p1__60975#","p1__60976#","fulcro.client.network/send","G__61097","G__61099","c__4167__auto__","x__4168__auto__","e61109","fulcro.client.network/start","e","js/console.log","fulcro.inspect.client/transform-network","k61170","G__61179","p__61186","vec__61187","G__61169","fexpr__61230","this61171","other61172","pred__61297","expr__61298","G__61306","G__61307","G__61314","G__61315","p__61328","map__61329","fulcro.inspect.client/TransformNetworkI","G__61174","G__61372","fulcro.inspect.client/->TransformNetworkI","fulcro.inspect.client/map->TransformNetworkI","cljs.core/native-satisfies?","fulcro.client.network/NetworkBehavior","ok-handler","error-handler","progress-handler","map__61337","p1__61164#","p1__61167#","fulcro.client.network/transmit","G__61343","G__61344","abort-id","fulcro.client.network/abort","fulcro.inspect.client/transform-network-i","fulcro.inspect.client/inspect-network","remote","ts","p__61399","map__61401","request-id","start","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","fulcro.inspect.client.transact_inspector_BANG_.cljs$core$IFn$_invoke$arity$2","p__61423","map__61424","response","finished","p__61435","map__61436","tr","p__61449","map__61451","body","js/console.warn","p__61471","map__61475","G__61488","seq__61490","chunk__61491","count__61492","i__61493","map__61519","map__61549","cljs.core/vals","p1__61455#","map__61570","target-state","map__61587","G__61592","js/setTimeout","fulcro.client.primitives/force-root-render!","map__61593","tx-ref","map__61604","fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$3","fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$2","map__61616","fulcro.inspect.ui.element-picker/pick-element","comp","details","fulcro.inspect.ui.element-picker/inspect-component","cljs.core/array-map","map__61646","G__61648","app-state","G__61652","app-root-class","app-root-class-factory","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$1","root-query","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2","view-tree","fulcro.client.primitives.db__GT_tree.cljs$core$IFn$_invoke$arity$3","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","map__61657","query","msg-id","G__61660","response-handler","res","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","map__61671","log","log-js","warn","js/console.error","fulcro.inspect.lib.version/last-inspect-version","js/fulcro.inspect.client.ClientRoot","this__55957__auto__","js/React.Component","G__61686","G__61687","js/React.Component.prototype","G__61688","fulcro.client.primitives/default-component-prototype","goog.object/extend","fulcro.client.primitives/-register-component!","x61690","this__54322__auto__","*reconciler*-orig-val__61693","fulcro.client.primitives/*reconciler*","*depth*-orig-val__61694","fulcro.client.primitives/*depth*","*shared*-orig-val__61695","fulcro.client.primitives/*shared*","*instrument*-orig-val__61696","fulcro.client.primitives/*instrument*","*parent*-orig-val__61697","fulcro.client.primitives/*parent*","*reconciler*-temp-val__61698","fulcro.client.primitives/get-reconciler","*depth*-temp-val__61699","fulcro.client.primitives/depth","*shared*-temp-val__61700","fulcro.client.primitives.shared.cljs$core$IFn$_invoke$arity$1","*instrument*-temp-val__61701","fulcro.client.primitives/instrument","*parent*-temp-val__61702","map__61707","fulcro.client.primitives/props","x61711","c","params","fulcro.client.primitives/make-state-map","p__61720","map__61721","x61730","p__61731","map__61732","this__55960__auto__","writer__55961__auto__","opt__55962__auto__","fulcro.inspect.client/ClientRoot","history","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$1","fulcro.inspect.ui.dom-history-viewer/DOMHistoryView","fulcro.inspect.ui.element-picker/MarkerCSS","fulcro.client.localized_dom.div.cljs$core$IFn$_invoke$arity$variadic","fulcro-css.css/style-element","fulcro.inspect.ui.dom-history-viewer/ui-dom-history-view","fulcro.inspect.client/install","js/document.documentElement.setAttribute","fulcro.client/new-fulcro-client","node","js/document.createElement","js/document.body.appendChild","fulcro.client/mount","fulcro.client/register-tool","networks","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__61805","vec__61806","k","v"],"sourcesContent":["(ns fulcro.inspect.client\n  (:require [cljs.core.async :as async]\n            [clojure.set :as set]\n            [fulcro-css.css :as css]\n            [fulcro.client :as fulcro]\n            [fulcro.client.localized-dom :as dom]\n            [fulcro.client.mutations :as fm]\n            [fulcro.client.network :as f.network]\n            [fulcro.client.primitives :as fp]\n            [fulcro.inspect.lib.diff :as diff]\n            [fulcro.inspect.lib.misc :as misc]\n            [fulcro.inspect.lib.version :as version]\n            [fulcro.inspect.remote.transit :as encode]\n            [fulcro.inspect.ui.dom-history-viewer :as dom-history]\n            [fulcro.inspect.ui.element-picker :as picker]\n            [fulcro.inspect.ui.helpers :as ui.h]\n            [goog.object :as gobj]))\n\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(defonce send-ch (async/chan (async/dropping-buffer 1024)))\n\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defn post-message [type data]\n  (async/put! send-ch [type data]))\n\n(declare handle-devtool-message)\n\n(defn event-data [event]\n  (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read))\n\n(defn start-send-message-loop []\n  (async/go-loop []\n    (when-let [[type data] (async/<! send-ch)]\n      (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n      (recur))))\n\n(defn listen-local-messages []\n  (.addEventListener js/window \"message\"\n    (fn [event]\n      (cond\n        (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n        (handle-devtool-message (event-data event))\n\n        (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n        (start-send-message-loop)))\n    false))\n\n(defn app-uuid [reconciler]\n  (some-> reconciler fp/app-state deref app-uuid-key))\n\n(defn app-id [reconciler]\n  (or (some-> reconciler fp/app-state deref :fulcro.inspect.core/app-id)\n      (some-> reconciler fp/app-root ui.h/react-display-name)))\n\n(defn inspect-network-init [network app]\n  (-> network :options ::app* (reset! app)))\n\n(defn transact-inspector!\n  ([tx]\n   (post-message ::transact-inspector {::tx tx}))\n  ([ref tx]\n   (post-message ::transact-inspector {::tx-ref ref ::tx tx})))\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn update-state-history [app state]\n  (swap! (-> app :reconciler :state) update ::state-history\n    #(misc/fixed-size-assoc MAX_HISTORY_SIZE % (hash state) state)))\n\n(defn db-update [app app-uuid old-state new-state]\n  (update-state-history app new-state)\n  (let [diff (diff/diff old-state new-state)]\n    (post-message ::db-update {app-uuid-key      app-uuid\n                               ::prev-state-hash (hash old-state)\n                               ::state-hash      (hash new-state)\n                               ::state-delta     diff\n                               ;::state           new-state\n                               })))\n\n(defn db-from-history [app state-hash]\n  (some-> app :reconciler :state deref ::state-history (get state-hash)))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message ::dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message ::set-active-app {app-uuid-key app-uuid}))\n\n(defn inspect-app [{:keys [reconciler networking] :as app}]\n  (let [state*   (some-> app :reconciler :config :state)\n        app-uuid (random-uuid)]\n\n    (doseq [[_ n] networking]\n      (inspect-network-init n app))\n\n    (swap! apps* assoc app-uuid app)\n\n    (update-state-history app @state*)\n    (post-message ::init-app {app-uuid-key                app-uuid\n                              :fulcro.inspect.core/app-id (app-id reconciler)\n                              ::remotes                   (sort-by (juxt #(not= :remote %) str) (keys networking))\n                              ::initial-state             @state*\n                              ::state-hash                (hash @state*)})\n\n    (add-watch state* app-uuid\n      #(db-update app app-uuid %3 %4))\n\n    (swap! state* assoc app-uuid-key app-uuid)\n\n    app))\n\n(defn inspect-tx [{:keys [reconciler] :as env}\n                  {:fulcro.history/keys [db-before db-after]\n                   :as                  info}]\n  (if (fp/app-root reconciler)\n    (let [tx       (-> (merge info (select-keys env [:ref :component]))\n                       (update :component #(gobj/get (fp/react-type %) \"displayName\"))\n                       (set/rename-keys {:ref :ident-ref})\n                       (dissoc :old-state :new-state :tx :ret\n                         :fulcro.history/db-before :fulcro.history/db-after)\n                       (assoc :fulcro.history/db-before-hash (hash db-before)\n                              :fulcro.history/db-after-hash (hash db-after)))\n          app-uuid (app-uuid reconciler)]\n      ; ensure app is initialized\n      (when (-> reconciler fp/app-state deref :fulcro.inspect.core/app-uuid)\n        (post-message ::new-client-transaction {app-uuid-key app-uuid\n                                                ::tx         tx})))))\n\n;;; network\n\n(defrecord TransformNetwork [network options]\n  f.network/NetworkBehavior\n  (serialize-requests? [this]\n    (try\n      (f.network/serialize-requests? network)\n      (catch :default _ true)))\n\n  f.network/FulcroNetwork\n  (send [_ edn ok error]\n    (let [{::keys [transform-query transform-response transform-error app*]\n           :or    {transform-query    (fn [_ x] x)\n                   transform-response (fn [_ x] x)\n                   transform-error    (fn [_ x] x)}} options\n          req-id (random-uuid)\n          env    {::request-id req-id\n                  ::app        @app*}]\n      (if-let [edn' (transform-query env edn)]\n        (f.network/send network edn'\n          #(->> % (transform-response env) ok)\n          #(->> % (transform-error env) error))\n        (ok nil))))\n\n  (start [this]\n    (try\n      (f.network/start network)\n      (catch ::default e\n        (js/console.log \"Error starting sub network\" e)))\n    this))\n\n(defn transform-network [network options]\n  (->TransformNetwork network (assoc options ::app* (atom nil))))\n\n(defrecord TransformNetworkI [network options]\n  f.network/NetworkBehavior\n  (serialize-requests? [this]\n    (if (satisfies? f.network/NetworkBehavior network)\n      (f.network/serialize-requests? network)\n      true))\n\n  f.network/FulcroRemoteI\n  (transmit [_ {::f.network/keys [edn ok-handler error-handler progress-handler]}]\n    (let [{::keys [transform-query transform-response transform-error app*]\n           :or    {transform-query    (fn [_ x] x)\n                   transform-response (fn [_ x] x)\n                   transform-error    (fn [_ x] x)}} options\n          req-id (random-uuid)\n          env    {::request-id req-id\n                  ::app        @app*}]\n      (if-let [edn' (transform-query env edn)]\n        (f.network/transmit network\n          {::f.network/edn              edn'\n           ::f.network/ok-handler       #(->> % (transform-response env) ok-handler)\n           ::f.network/error-handler    #(->> % (transform-error env) error-handler)\n           ::f.network/progress-handler progress-handler})\n        (ok-handler nil))))\n\n  (abort [_ abort-id] (f.network/abort network abort-id)))\n\n(defn transform-network-i [network options]\n  (->TransformNetworkI network (assoc options ::app* (atom nil))))\n\n(defn inspect-network\n  ([remote network]\n   (let [ts {::transform-query\n             (fn [{::keys [request-id app]} edn]\n               (let [start    (js/Date.)\n                     app-uuid (app-uuid (:reconciler app))]\n                 (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n                   [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                                :fulcro.inspect.ui.network/request-id         request-id\n                                                                :fulcro.inspect.ui.network/request-started-at start\n                                                                :fulcro.inspect.ui.network/request-edn        edn})]))\n               edn)\n\n             ::transform-response\n             (fn [{::keys [request-id app]} response]\n               (let [finished (js/Date.)\n                     app-uuid (app-uuid (:reconciler app))]\n                 (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n                   [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          request-id\n                                                                 :fulcro.inspect.ui.network/request-finished-at finished\n                                                                 :fulcro.inspect.ui.network/response-edn        response})]))\n               response)\n\n             ::transform-error\n             (fn [{::keys [request-id app]} error]\n               (let [finished (js/Date.)\n                     app-uuid (app-uuid (:reconciler app))]\n                 (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n                   [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          request-id\n                                                                 :fulcro.inspect.ui.network/request-finished-at finished\n                                                                 :fulcro.inspect.ui.network/error               error})]))\n               error)}]\n     (cond\n       (implements? f.network/FulcroNetwork network)\n       (transform-network network ts)\n\n       (implements? f.network/FulcroRemoteI network)\n       (transform-network-i network\n         (update ts ::transform-response (fn [tr] (fn [env {:keys [body] :as response}]\n                                                    (tr env body)\n                                                    response))))\n\n       :else\n       (js/console.warn \"Invalid network\" {:network network})))))\n\n(defn handle-devtool-message [{:keys [type data]}]\n  (case type\n    ::request-page-apps\n    (doseq [{:keys [reconciler networking]} (vals @apps*)]\n      (post-message ::init-app {app-uuid-key                (app-uuid reconciler)\n                                :fulcro.inspect.core/app-id (app-id reconciler)\n                                ::remotes                   (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                ::initial-state             @(fp/app-state reconciler)\n                                ::state-hash                (hash @(fp/app-state reconciler))}))\n\n    ::reset-app-state\n    (let [{:keys                     [target-state]\n           :fulcro.inspect.core/keys [app-uuid]} data]\n      (if-let [{:keys [reconciler]} (get @apps* app-uuid)]\n        (do\n          (if target-state\n            (let [target-state (assoc target-state :fulcro.inspect.core/app-uuid app-uuid)]\n              (some-> reconciler fp/app-state (reset! target-state))))\n          (js/setTimeout #(fp/force-root-render! reconciler) 10))\n        (js/console.log \"Reset app on invalid uuid\" app-uuid)))\n\n    ::transact\n    (let [{:keys                     [tx tx-ref]\n           :fulcro.inspect.core/keys [app-uuid]} data]\n      (if-let [{:keys [reconciler]} (get @apps* app-uuid)]\n        (if tx-ref\n          (fp/transact! reconciler tx-ref tx)\n          (fp/transact! reconciler tx))\n        (js/console.log \"Transact on invalid uuid\" app-uuid)))\n\n    ::pick-element\n    (let [{:fulcro.inspect.core/keys [app-uuid]} data]\n      (picker/pick-element\n        {:fulcro.inspect.core/app-uuid\n         app-uuid\n         ::picker/on-pick\n         (fn [comp]\n           (if comp\n             (let [details (picker/inspect-component comp)]\n               (transact-inspector! [:fulcro.inspect.ui.element/panel-id [:fulcro.inspect.core/app-uuid app-uuid]]\n                 [`(fulcro.inspect.ui.element/set-element ~details)]))\n             (transact-inspector! [:fulcro.inspect.ui.element/panel-id [:fulcro.inspect.core/app-uuid app-uuid]]\n               [`(fm/set-props {:ui/picking? false})])))}))\n\n    ::show-dom-preview\n    (let [{:fulcro.inspect.core/keys [app-uuid]} data\n          app                    (some-> @apps* (get app-uuid))\n          app-state              (db-from-history app (::state-hash data))\n          reconciler             (some-> @apps* (get app-uuid) :reconciler)\n          app-root-class         (fp/react-type (fp/app-root reconciler))\n          app-root-class-factory (fp/factory app-root-class)\n          root-query             (fp/get-query app-root-class app-state)\n          view-tree              (fp/db->tree root-query app-state app-state)\n          data                   (assoc data :state (vary-meta view-tree assoc :render-fn app-root-class-factory))]\n      (fp/transact! (:reconciler @tools-app*) [::dom-history/dom-viewer :singleton] [`(dom-history/show-dom-preview ~data)]))\n\n    ::hide-dom-preview\n    (fp/transact! (:reconciler @tools-app*) [::dom-history/dom-viewer :singleton] [`(dom-history/hide-dom-preview {})])\n\n    ::network-request\n    (let [{:keys                          [query]\n           ::keys                         [remote]\n           :fulcro.inspect.ui-parser/keys [msg-id]\n           :fulcro.inspect.core/keys      [app-uuid]} data]\n      (when-let [app (get @apps* app-uuid)]\n        (let [remote           (-> app :networking remote)\n              response-handler (fn [res]\n                                 (post-message ::message-response {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                   :fulcro.inspect.ui-parser/msg-response res}))]\n          (cond\n            (implements? f.network/FulcroNetwork remote)\n            (f.network/send remote query response-handler response-handler)\n\n            (implements? f.network/FulcroRemoteI remote)\n            (f.network/transmit remote\n              {::f.network/edn           query\n               ::f.network/ok-handler    (comp response-handler :body)\n               ::f.network/error-handler (comp response-handler :body)})))))\n\n    ::console-log\n    (let [{:keys [log log-js warn error]} data]\n      (cond\n        log\n        (js/console.log log)\n\n        log-js\n        (js/console.log (clj->js log-js))\n\n        warn\n        (js/console.warn warn)\n\n        error\n        (js/console.error error)))\n\n    ::check-client-version\n    (post-message ::client-version {:version version/last-inspect-version})\n\n    (js/console.log \"Unknown message\" type)))\n\n(fp/defsc ClientRoot [this {:keys [history]}]\n  {:initial-state {:history {}}\n   :ident         (fn [] [::root \"main\"])\n   :query         [{:history (fp/get-query dom-history/DOMHistoryView)}]\n   :css-include   [picker/MarkerCSS dom-history/DOMHistoryView]}\n\n  (dom/div\n    (css/style-element this)\n    (dom-history/ui-dom-history-view history)))\n\n(defn install [_]\n  (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n  (when-not @started?*\n    (js/console.log \"Installing Fulcro Inspect\" {})\n\n    (reset! started?* true)\n\n    (let [app  (fulcro/new-fulcro-client)\n          node (js/document.createElement \"div\")]\n      (js/document.body.appendChild node)\n      (reset! tools-app* (fulcro/mount app ClientRoot node)))\n\n    (fulcro/register-tool\n      {::fulcro/tool-id\n       ::fulcro-inspect-remote\n\n       ::fulcro/app-started\n       inspect-app\n\n       ::fulcro/network-wrapper\n       (fn [networks]\n         (into {} (map (fn [[k v]] [k (inspect-network k v)])) networks))\n\n       ::fulcro/tx-listen\n       inspect-tx})\n\n    (listen-local-messages)))\n"]}