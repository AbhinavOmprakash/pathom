{"version":3,"sources":["com/wsscode/pathom/diplomat/http/fetch.cljs"],"mappings":"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","names":["p__68105","map__68106","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.diplomat.http.fetch/build-headers","headers","content-type","base-headers","G__68108","cljs.core.assoc","com.wsscode.pathom.diplomat.http/encode-type->header","cljs.core.merge","p__68111","map__68116","com.wsscode.pathom.diplomat.http.fetch/build-body","form-params","G__68120","cljs.core/Keyword","js/JSON.stringify","cljs.core/clj->js","p__68128","map__68129","com.wsscode.pathom.diplomat.http.fetch/normalize-as","as","req","G__68137","p__68152","map__68160","com.wsscode.pathom.diplomat.http.fetch/build-request-map","G__68171","com.wsscode.pathom.diplomat.http/request-method","p__68180","map__68181","com.wsscode.pathom.diplomat.http.fetch/request-async","url","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","c__45808__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45809__auto__","switch__45525__auto__","state_68300","state_val_68302","inst_68223","statearr-68312","statearr-68313","inst_68255","inst_68278","inst_68285","inst_68286","inst_68287","cljs.core/PersistentHashMap","inst_68288","statearr-68319","statearr-68324","inst_68204","_","cljs.core.async.impl.ioc-helpers/add-exception-frame","inst_68207","inst_68208","cljs.core/not","statearr-68326","statearr-68327","statearr-68330","inst_68257","inst_68274","inst_68275","inst_68276","inst_68279","inst_68280","inst_68281","inst_68282","statearr-68335","statearr-68339","statearr-68341","statearr-68343","inst_68228","inst_68229","inst_68230","inst_68232","inst_68233","inst_68234","inst_68235","inst_68236","inst_68237","inst_68238","inst_68248","inst_68249","inst_68250","inst_68251","com.wsscode.common.async-cljs/promise->chan","statearr-68352","cljs.core.async.impl.ioc-helpers/take!","inst_68291","inst_68292","statearr-68355","statearr-68356","cljs.core.async.impl.ioc-helpers/process-exception","statearr-68359","inst_68262","inst_68263","com.wsscode.common.async-cljs/consumer-pair","inst_68264","statearr-68363","inst_68195","statearr-68364","statearr-68366","inst_68294","cljs.core.async.impl.ioc-helpers/return-chan","inst_68270","inst_68271","statearr-68367","inst_68225","statearr-68369","statearr-68370","inst_68212","inst_68213","inst_68214","inst_68215","inst_68216","statearr-68372","statearr-68373","inst_68254","inst_68253","statearr-68376","G__68377","statearr-68379","statearr-68380","inst_68259","inst_68260","inst_68220","statearr-68384","inst_68267","inst_68268","statearr-68388","statearr-68390","state-machine__45526__auto__","ret-value__45527__auto__","result__45528__auto__","cljs.core/keyword-identical?","e68393","js/Object","ex__45529__auto__","statearr-68395","state__45810__auto__","statearr-68400","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","com.wsscode.pathom.trace.trace_enter","clojure.string/upper-case","cljs.core/name","js/fetch","goog.object/get","cljs.core.js__GT_clj","com.wsscode.pathom.trace.trace_leave","com.wsscode.pathom.trace/trace-tree-collect","x","row","com.wsscode.pathom.trace/trace-style","com.wsscode.pathom.trace/tree-assoc-detail","com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl"],"sourcesContent":["(ns com.wsscode.pathom.diplomat.http.fetch\n  (:require [cljs.spec.alpha :as s]\n            [clojure.string :as str]\n            [com.wsscode.common.async-cljs :refer [let-chan <!p go-catch <? <?maybe]]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.pathom.diplomat.http :as http]\n            [com.wsscode.pathom.misc :as p.misc]\n            [com.wsscode.pathom.trace :as pt]\n            [goog.object :as gobj]))\n\n(defn build-headers [{::http/keys [headers content-type]}]\n  (let [base-headers\n        (cond-> nil\n          content-type (assoc :content-type (http/encode-type->header content-type)))]\n    (merge base-headers headers)))\n\n(defn build-body [{::http/keys [form-params content-type]}]\n  (case content-type\n    ::http/json (js/JSON.stringify (clj->js form-params))\n    (str form-params)))\n\n(defn normalize-as [{::http/keys [as] :as req}]\n  (cond-> req\n    as (assoc ::http/content-type as ::http/accept as)))\n\n(defn build-request-map [{::http/keys [form-params] :as req}]\n  (let [req     (normalize-as req)\n        headers (build-headers req)]\n    (cond-> {:method (http/request-method req)}\n      headers (assoc :headers headers)\n      form-params (assoc :body (build-body req)))))\n\n(defn request-async [{::http/keys [url] :as req}]\n  (s/assert ::http/request req)\n  (go-catch\n    (let [{::http/keys [accept]} (normalize-as req)\n          method   (http/request-method req)\n          tid      (pt/trace-enter req {::pt/event ::http-request\n                                        ::pt/label (str (str/upper-case (name method)) \" \" url)\n                                        ::url      url\n                                        ::method   method})\n          response (<!p (js/fetch url (clj->js (build-request-map req))))\n          status   (gobj/get response \"status\")\n          out      {::http/status status\n                    ::http/body   (case accept\n                                    ::http/json (js->clj (<!p (.json response)) :keywordize-keys true)\n                                    (<!p (.text response)))}]\n      (pt/trace-leave req tid\n        (cond-> {} (not (< 199 status 300)) (assoc ::p/error {:status status})))\n      out)))\n\n(defmethod pt/trace-tree-collect ::http-request [x row]\n  (-> row\n      (pt/trace-style {:fill (if (::p/error row) \"#ff8181\" \"#73abff\")})\n      (pt/tree-assoc-detail x [::url ::method ::p/error])))\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef request-async\n    :args (s/cat :request ::http/request)))\n"]}