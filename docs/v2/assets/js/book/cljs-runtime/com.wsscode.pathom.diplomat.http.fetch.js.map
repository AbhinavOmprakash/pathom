{"version":3,"sources":["com/wsscode/pathom/diplomat/http/fetch.cljs"],"mappings":"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","names":["p__59169","map__59170","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.diplomat.http.fetch/build-headers","headers","content-type","base-headers","G__59173","cljs.core.assoc","com.wsscode.pathom.diplomat.http/encode-type->header","cljs.core.merge","p__59174","map__59176","com.wsscode.pathom.diplomat.http.fetch/build-body","form-params","G__59180","cljs.core/Keyword","js/JSON.stringify","cljs.core/clj->js","p__59185","map__59186","com.wsscode.pathom.diplomat.http.fetch/normalize-as","as","req","G__59201","p__59228","map__59229","com.wsscode.pathom.diplomat.http.fetch/build-request-map","G__59240","com.wsscode.pathom.diplomat.http/request-method","p__59250","map__59253","com.wsscode.pathom.diplomat.http.fetch/request-async","url","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","c__48839__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__48840__auto__","switch__48139__auto__","state_59390","state_val_59392","statearr-59406","inst_59354","inst_59355","com.wsscode.async.async-cljs/consumer-pair","statearr-59410","statearr-59416","inst_59279","statearr-59420","inst_59320","inst_59337","inst_59336","inst_59338","inst_59339","statearr-59424","G__59428","statearr-59431","statearr-59434","inst_59364","inst_59372","inst_59373","inst_59374","cljs.core/PersistentHashMap","inst_59375","statearr-59440","inst_59290","statearr-59442","statearr-59446","inst_59299","inst_59300","inst_59304","inst_59305","inst_59306","statearr-59453","statearr-59454","inst_59342","inst_59344","com.wsscode.async.async-cljs/promise->chan","cljs.core.async.impl.ioc-helpers/take!","inst_59383","cljs.core.async.impl.ioc-helpers/return-chan","inst_59315","statearr-59458","_","statearr-59460","cljs.core/cons","inst_59293","inst_59294","cljs.core/not","statearr-59463","statearr-59464","statearr-59465","inst_59329","inst_59360","inst_59378","inst_59379","statearr-59466","cljs.core/rest","statearr-59467","statearr-59468","inst_59351","inst_59352","inst_59310","statearr-59471","statearr-59472","statearr-59477","ex59470","statearr-59481","statearr-59485","inst_59319","inst_59321","inst_59322","inst_59324","inst_59325","inst_59326","inst_59327","inst_59328","inst_59331","inst_59332","inst_59333","inst_59334","statearr-59492","inst_59358","inst_59359","inst_59365","inst_59366","inst_59367","inst_59368","statearr-59496","statearr-59498","statearr-59501","statearr-59504","inst_59346","inst_59347","inst_59348","statearr-59506","inst_59313","statearr-59510","statearr-59511","statearr-59518","state-machine__48140__auto__","ret-value__48141__auto__","result__48142__auto__","cljs.core/keyword-identical?","ex__48143__auto__","e59520","statearr-59521","cljs.core/seq","statearr-59523","cljs.core/first","state__48841__auto__","statearr-59526","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","com.wsscode.pathom.trace.trace_enter","clojure.string/upper-case","cljs.core/name","js/fetch","goog.object/get","cljs.core.js__GT_clj","com.wsscode.pathom.trace.trace_leave","com.wsscode.pathom.trace/trace-tree-collect","x","row","com.wsscode.pathom.trace/trace-style","com.wsscode.pathom.trace/tree-assoc-detail","com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl"],"sourcesContent":["(ns com.wsscode.pathom.diplomat.http.fetch\n  (:require\n    [cljs.spec.alpha :as s]\n    [clojure.string :as str]\n    [com.wsscode.async.async-cljs :refer [let-chan <!p go-catch <? <?maybe]]\n    [com.wsscode.pathom.core :as p]\n    [com.wsscode.pathom.diplomat.http :as http]\n    [com.wsscode.pathom.misc :as p.misc]\n    [com.wsscode.pathom.trace :as pt]\n    [goog.object :as gobj]))\n\n(defn build-headers [{::http/keys [headers content-type]}]\n  (let [base-headers\n        (cond-> nil\n          content-type (assoc :content-type (http/encode-type->header content-type)))]\n    (merge base-headers headers)))\n\n(defn build-body [{::http/keys [form-params content-type]}]\n  (case content-type\n    ::http/json (js/JSON.stringify (clj->js form-params))\n    (str form-params)))\n\n(defn normalize-as [{::http/keys [as] :as req}]\n  (cond-> req\n    as (assoc ::http/content-type as ::http/accept as)))\n\n(defn build-request-map [{::http/keys [form-params] :as req}]\n  (let [req     (normalize-as req)\n        headers (build-headers req)]\n    (cond-> {:method (http/request-method req)}\n      headers (assoc :headers headers)\n      form-params (assoc :body (build-body req)))))\n\n(defn request-async [{::http/keys [url] :as req}]\n  (s/assert ::http/request req)\n  (go-catch\n    (let [{::http/keys [accept]} (normalize-as req)\n          method   (http/request-method req)\n          tid      (pt/trace-enter req {::pt/event ::http-request\n                                        ::pt/label (str (str/upper-case (name method)) \" \" url)\n                                        ::url      url\n                                        ::method   method})\n          response (<!p (js/fetch url (clj->js (build-request-map req))))\n          status   (gobj/get response \"status\")\n          out      {::http/status status\n                    ::http/body   (case accept\n                                    ::http/json (js->clj (<!p (.json response)) :keywordize-keys true)\n                                    (<!p (.text response)))}]\n      (pt/trace-leave req tid\n        (cond-> {} (not (< 199 status 300)) (assoc ::p/error {:status status})))\n      out)))\n\n(defmethod pt/trace-tree-collect ::http-request [x row]\n  (-> row\n      (pt/trace-style {:fill (if (::p/error row) \"#ff8181\" \"#73abff\")})\n      (pt/tree-assoc-detail x [::url ::method ::p/error])))\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef request-async\n    :args (s/cat :request ::http/request)))\n"]}