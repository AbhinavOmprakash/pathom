{"version":3,"sources":["com/wsscode/pathom/viz/ui/expandable_tree.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__56735","cljs.core/any?","cljs.core/vector?","G__56736","cljs.core/set?","cljs.core/boolean?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.core/map?","G__56737","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__56740","G__56752","cljs.core/contains?","cljs.core/fn?","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.viz","js/com.wsscode.pathom.viz.ui","js/com.wsscode.pathom.viz.ui.expandable-tree","js/com.wsscode.pathom.viz.ui.expandable-tree.TreeItem","this__44526__auto__","js/React.Component","G__56780","G__56781","js/React.Component.prototype","G__56782","fulcro.client.primitives/default-component-prototype","goog.object/extend","fulcro.client.primitives/-register-component!","x56783","this__43444__auto__","*reconciler*-orig-val__56784","fulcro.client.primitives/*reconciler*","*depth*-orig-val__56785","fulcro.client.primitives/*depth*","*shared*-orig-val__56786","fulcro.client.primitives/*shared*","*instrument*-orig-val__56787","fulcro.client.primitives/*instrument*","*parent*-orig-val__56788","fulcro.client.primitives/*parent*","*reconciler*-temp-val__56789","fulcro.client.primitives/get-reconciler","*depth*-temp-val__56790","fulcro.client.primitives/depth","*shared*-temp-val__56791","fulcro.client.primitives.shared.cljs$core$IFn$_invoke$arity$1","*instrument*-temp-val__56792","fulcro.client.primitives/instrument","*parent*-temp-val__56793","map__56798","fulcro.client.primitives/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","x56819","_","x56824","this__44529__auto__","writer__44530__auto__","opt__44531__auto__","cljs.core/-write","com.wsscode.pathom.viz.ui.expandable-tree/TreeItem","this","key","children","expanded","expanded?","path","toggle-expanded","render","sort-by","node","fulcro.client.localized_dom.div.cljs$core$IFn$_invoke$arity$variadic","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","cljs.core/not","iter__4523__auto__","s__56802","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__56804","cljs.core/chunk-buffer","i__56803","map__56806","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56801","cljs.core/chunk-rest","map__56809","cljs.core/first","cljs.core/cons","cljs.core/rest","G__56818","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__56808","G__56811","com.wsscode.pathom.viz.ui.expandable-tree/tree-item","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p1__56825#","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$2","js/com.wsscode.pathom.viz.ui.expandable-tree.ExpandableTree","G__56831","G__56832","G__56833","x56834","*reconciler*-orig-val__56837","*depth*-orig-val__56838","*shared*-orig-val__56839","*instrument*-orig-val__56840","*parent*-orig-val__56841","*reconciler*-temp-val__56842","*depth*-temp-val__56843","*shared*-temp-val__56844","*instrument*-temp-val__56845","*parent*-temp-val__56846","map__56848","map__56849","fulcro.client.primitives.get_computed.cljs$core$IFn$_invoke$arity$1","ret__43419__auto__","obj56854","x56855","p__56857","map__56858","props","x56860","p__56861","map__56862","com.wsscode.pathom.viz.ui.expandable-tree/ExpandableTree","root","current-normalized","data-tree","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/random-uuid","com.wsscode.pathom.viz.helpers.update_value_BANG_.cljs$core$IFn$_invoke$arity$variadic","com.wsscode.pathom.viz.helpers/toggle-set-item","G__56852","fulcro.client.primitives.get_state.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.viz.ui.expandable-tree/expandable-tree","fulcro.client.primitives.computed_factory.cljs$core$IFn$_invoke$arity$1","cljs.core/chunk-first"],"sourcesContent":["(ns com.wsscode.pathom.viz.ui.expandable-tree\n  (:require [cljs.spec.alpha :as s]\n            [com.wsscode.pathom.viz.helpers :as h]\n            [fulcro.client.localized-dom :as dom]\n            [fulcro.client.primitives :as fp]\n            [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]))\n\n(s/def ::path (s/coll-of any? :kind vector?))\n(s/def ::expanded (s/coll-of ::path :kind set?))\n(s/def ::expanded? boolean?)\n(s/def ::render (s/fspec :args (s/cat :props map?) :ret any?))\n(s/def ::key any?)\n(s/def ::children (s/coll-of ::node))\n(s/def ::node (s/keys :opt-un [::key ::children]))\n(s/def ::root (s/keys :req-un [::children]))\n(s/def ::sort-by fn?)\n\n(declare tree-item)\n\n(fp/defsc TreeItem\n  [this {:keys  [key children]\n         ::keys [expanded expanded? path toggle-expanded render sort-by] :as node}]\n  {:css [[:.item {:display     \"flex\"\n                  :align-items \"center\"\n                  :padding     \"0 2px\"}]\n         [:.expander {:display      \"flex\"\n                      :align-items  \"center\"\n                      :color        \"#656565\"\n                      :cursor       \"pointer\"\n                      :font-size    \"10px\"\n                      :margin-top   \"1px\"\n                      :margin-right \"3px\"\n                      :width        \"10px\"\n                      :flex-shrink  \"0\"}]\n         [:.children-container {:margin-left \"13px\"}]]}\n  (dom/div {:key (pr-str key)}\n    (if key\n      (dom/div :.item\n        (dom/div :.expander {:onClick #(toggle-expanded path)}\n          (if children (if expanded? \"\u25bc\" \"\u25b6\")))\n        (render node)))\n    (if (or expanded? (not key))\n      (dom/div {:classes [(if key :.children-container)]}\n        (for [{:keys [key] :as node} (cond->> children sort-by (cljs.core/sort-by sort-by))\n              :let [path (conj path key)]]\n          (tree-item\n            (assoc node ::path path\n                        ::expanded expanded\n                        ::toggle-expanded toggle-expanded\n                        ::render render\n                        ::sort-by sort-by\n                        ::expanded? (contains? expanded path))))))))\n\n(def tree-item (fp/factory TreeItem {:keyfn #(pr-str (:key %))}))\n\n(fp/defsc ExpandableTree\n  [this\n   {::keys [expanded]}\n   {::keys [render root sort-by]}]\n  {:pre-merge      (fn [{:keys [current-normalized data-tree]}]\n                     (merge\n                       {:ui/id     (random-uuid)\n                        ::expanded #{}}\n                       current-normalized\n                       data-tree))\n   :ident          [:ui/id :ui/id]\n   :query          [:ui/id ::expanded]\n   :css-include    [TreeItem]\n   :initLocalState (fn [] {:toggle-expanded (fn [path]\n                                              (h/update-value! this ::expanded h/toggle-set-item path))})}\n  (dom/div\n    (tree-item\n      (assoc root ::path []\n                  ::expanded expanded\n                  ::render render\n                  ::sort-by sort-by\n                  ::toggle-expanded (fp/get-state this :toggle-expanded)))))\n\n(def expandable-tree (fp/computed-factory ExpandableTree))\n"]}