{"version":3,"sources":["expound/printer.cljc"],"mappings":"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","names":["expound.printer/indent-level","expound.printer/max-spec-str-width","expound.printer/anon-fn-str","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha/or-spec-impl","cljs.core/qualified-keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","G__68752","cljs.core/coll?","cljs.core/keyword?","expound.printer/keywords","form","cljs.core/tree-seq","cljs.core/seq","cljs.core.filter","expound.printer/singleton?","xs","cljs.core._EQ_","cljs.core/count","expound.printer/specs-from-form","via","G__68796","cljs.core/last","cljs.spec.alpha/form","conformed","cljs.spec.alpha/conform","and__4120__auto__","cljs.core.not_EQ_","cljs.core.map","x","cljs.core/vector?","cljs.core/first","cljs.core/second","cljs.core/set","expound.printer/key->spec","keys","problems","seq__68814","chunk__68815","count__68816","i__68817","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","p","js/Error","expound.util/assert-message","vias","specs","cljs.core/every?","temp__5718__auto__","cljs.core.apply","clojure.set/union","cljs.core.reduce","m","k","cljs.core.assoc","p1__68810#","cljs.core/name","expound.printer/expand-spec","spec","!seen-specs","cljs.core.atom","clojure.walk/prewalk","sp","cljs.spec.alpha/get-spec","cljs.core/deref","cljs.core/contains?","cljs.core.swap_BANG_","cljs.core/conj","p__68851","vec__68852","cljs.core.nth","expound.printer/summarize-key-clause","branch","match","G__68857","cljs.core/Keyword","cljs.core/list","cljs.core.symbol","expound.printer/missing-key","vec__68871","G__68874","expound.printer/elide-core-ns","s","clojure.string/replace","expound.printer/elide-spec-ns","expound.printer/pprint-fn","f","fn-parts","clojure.string.split","cljs.core/re-find","cljs.core.pr_str","ns-n","clojure.string.join","cljs.core/butlast","fn-n","cljs.core/empty?","cljs.core/demunge-str","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","expound.printer/format","seq68894","G__68895","self__4717__auto__","fmt","args","goog.string/format","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.core/string?","expound.printer/pprint-str","cljs.core/fn?","cljs.pprint.write","expound.printer/simple-spec-or-name","spec-name","spec-str","clojure.string/includes?","expound.printer/print-spec-keys","p1__68935#","cljs.core/some","cljs.core/simple-keyword?","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__68950","cljs.core/*print-newline*","*print-fn*-orig-val__68951","cljs.core/*print-fn*","*print-newline*-temp-val__68952","*print-fn*-temp-val__68953","x__4662__auto__","p__68973","vec__68974","v","p1__68936#","cljs.core.sort_by","cljs.core.get","cljs.pprint.print_table","clojure.string/trim","expound.printer/print-missing-keys","keys-clauses","cljs.core.distinct","cljs.core.comp","p1__68977#","expound.ansi.color","cljs.core.sort","expound.printer/no-trailing-whitespace","s'","clojure.string/split-lines","clojure.string/trimr","cljs.spec.alpha/maybe-impl","cljs.core/nat-int?","G__69094","expound.printer/indent","expound.printer.indent","indent-level","first-line-indent","rest-lines-indent","vec__69100","seq__69101","first__69102","line","lines","p1__69078#","cljs.core/str","cljs.core.repeat","cljs.core.into"],"sourcesContent":["(ns ^:no-doc expound.printer\n  (:require [clojure.string :as string]\n            [clojure.spec.alpha :as s]\n            [clojure.pprint :as pprint]\n            [clojure.walk :as walk]\n            [clojure.set :as set]\n            [expound.util :as util]\n            [expound.ansi :as ansi]\n            #?(:clj [clojure.main :as main]))\n  (:refer-clojure :exclude [format]))\n\n(def indent-level 2)\n(def max-spec-str-width 100)\n(def anon-fn-str \"<anonymous function>\")\n\n(s/def :expound.spec/spec-conjunction\n  (s/cat\n   :op #{'or 'and}\n   :specs (s/+ :expound.spec/kw-or-conjunction)))\n(s/def :expound.spec/kw-or-conjunction\n  (s/or\n   :kw qualified-keyword?\n   :conj :expound.spec/spec-conjunction))\n(s/def :expound.spec/key-spec\n  (s/cat :keys #{'clojure.spec.alpha/keys\n                 'cljs.spec.alpha/keys}\n         :clauses (s/*\n                   (s/cat :qualifier #{:req-un :req :opt-un :opt}\n                          :specs (s/coll-of :expound.spec/kw-or-conjunction)))))\n(s/def :expound.spec/contains-key-pred (s/or\n                                        :simple (s/cat\n                                                 :contains #{`contains? 'contains?}\n                                                 :arg #{'%}\n                                                 :kw keyword?)\n                                        :compound (s/cat\n                                                   :op #{`or `and}\n                                                   :clauses (s/+ :expound.spec/contains-key-pred))))\n\n;;;; private\n\n(defn keywords [form]\n  (->> form\n       (tree-seq coll? seq)\n       (filter keyword?)))\n\n(defn singleton? [xs]\n  (= 1 (count xs)))\n\n(defn specs-from-form [via]\n  (let [form (some-> via last s/form)\n        conformed (s/conform :expound.spec/key-spec form)]\n    ;; The containing spec might not be\n    ;; a simple 'keys' call, in which case we give up\n    (if (and form\n             (not= ::s/invalid conformed))\n      (->> (:clauses conformed)\n           (map :specs)\n           (tree-seq coll? seq)\n           (filter\n            (fn [x]\n              (and (vector? x) (= :kw (first x)))))\n           (map second)\n           set)\n      #{})))\n\n(defn key->spec [keys problems]\n  (doseq [p problems]\n    (assert (some? (:expound/via p)) util/assert-message))\n  (let [vias (map :expound/via problems)\n        specs (if (every? qualified-keyword? keys)\n                keys\n                (if-let [specs (apply set/union (map specs-from-form vias))]\n                  specs\n                  keys))]\n    (reduce\n     (fn [m k]\n       (assoc m\n              k\n              (if (qualified-keyword? k)\n                k\n                (->> specs\n                     (filter #(= (name k) (name %)))\n                     first))))\n     {}\n     keys)))\n\n(defn expand-spec [spec]\n  (let [!seen-specs (atom #{})]\n    (walk/prewalk\n     (fn [x]\n       (if-not (qualified-keyword? x)\n         x\n         (if-let [sp (s/get-spec x)]\n           (if-not (contains? @!seen-specs x)\n             (do\n               (swap! !seen-specs conj x)\n               (s/form sp))\n             x)\n           x)))\n     (if (s/get-spec spec)\n       (s/form spec)\n       spec))))\n\n(defn summarize-key-clause [[branch match]]\n  (case branch\n    :simple\n    (:kw match)\n\n    :compound\n    (apply list\n           (symbol (name (:op match)))\n           (map summarize-key-clause (:clauses match)))))\n\n(defn missing-key [form]\n  (let [[branch match] (s/conform :expound.spec/contains-key-pred (nth form 2))]\n    (case branch\n      :simple\n      (:kw match)\n\n      :compound\n      (summarize-key-clause [branch match]))))\n\n;;;; public\n\n(defn elide-core-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.core/\" \"\")\n               (string/replace \"cljs/core/\" \"\"))\n     :clj (string/replace s \"clojure.core/\" \"\")))\n\n(defn elide-spec-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.spec.alpha/\" \"\")\n               (string/replace \"cljs/spec/alpha\" \"\"))\n     :clj (string/replace s \"clojure.spec.alpha/\" \"\")))\n\n(defn pprint-fn [f]\n  (-> #?(:clj\n         (let [[_ ns-n f-n] (re-matches #\"(.*)\\$(.*?)(__[0-9]+)?\" (str f))]\n           (if (re-matches #\"^fn__\\d+\\@.*$\" f-n)\n             anon-fn-str\n             (str\n              (main/demunge ns-n) \"/\"\n              (main/demunge f-n))))\n         :cljs\n         (let [fn-parts (string/split (second (re-find\n                                               #\"object\\[([^\\( \\]]+).*(\\n|\\])?\"\n                                               (pr-str f)))\n                                      #\"\\$\")\n               ns-n (string/join \".\" (butlast fn-parts))\n               fn-n  (last fn-parts)]\n           (if (empty? ns-n)\n             anon-fn-str\n             (str\n              (demunge-str ns-n) \"/\"\n              (demunge-str fn-n)))))\n      (elide-core-ns)\n      (string/replace #\"--\\d+\" \"\")\n      (string/replace #\"@[a-zA-Z0-9]+\" \"\")))\n\n#?(:cljs\n   (defn format [fmt & args]\n     (apply goog.string/format fmt args))\n   :clj (def format clojure.core/format))\n\n(s/fdef pprint-str\n        :args (s/cat :x any?)\n        :ret string?)\n(defn pprint-str\n  \"Returns the pretty-printed string\"\n  [x]\n  (if (fn? x)\n    (pprint-fn x)\n    (pprint/write x :stream nil)))\n\n(defn simple-spec-or-name [spec-name]\n  (let [spec-str (elide-spec-ns (elide-core-ns (pr-str (expand-spec spec-name))))]\n    (if (or\n         (< max-spec-str-width (count spec-str))\n         (string/includes? spec-str \"\\n\"))\n      spec-name\n      spec-str)))\n\n(defn print-spec-keys [problems]\n  (let [keys (keywords (map #(missing-key (:pred %)) problems))]\n    (if (and (empty? (:expound/via (first problems)))\n             (some simple-keyword? keys))\n      ;; The containing spec is not present in the problems\n      ;; and at least one key is not namespaced, so we can't figure out\n      ;; the spec they intended.\n      nil\n\n      (->> (key->spec keys problems)\n           (map (fn [[k v]] {\"key\" k \"spec\" (simple-spec-or-name v)}))\n           (sort-by #(get % \"key\"))\n           (pprint/print-table [\"key\" \"spec\"])\n           with-out-str\n           string/trim))))\n\n(defn print-missing-keys [problems]\n  (let [keys-clauses (distinct (map (comp missing-key :pred) problems))]\n    (if (every? keyword? keys-clauses)\n      (string/join \", \" (map #(ansi/color % :correct-key) (sort keys-clauses)))\n      (str \"\\n\\n\"\n           (ansi/color (pprint-str\n                        (if (singleton? keys-clauses)\n                          (first keys-clauses)\n                          (apply list\n                                 'and\n                                 keys-clauses))) :correct-key)))))\n\n(s/fdef no-trailing-whitespace\n        :args (s/cat :s string?)\n        :ret string?)\n(defn no-trailing-whitespace\n  \"Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed.\"\n  [s]\n  (let [s' (->> s\n                string/split-lines\n                (map string/trimr)\n                (string/join \"\\n\"))]\n    (if (= \\newline (last s))\n      (str s' \"\\n\")\n      s')))\n\n(s/fdef indent\n        :args (s/cat\n               :first-line-indent-level (s/? nat-int?)\n               :indent-level (s/? nat-int?)\n               :s string?)\n        :ret string?)\n(defn indent\n  \"Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts.\"\n  ([s]\n   (indent indent-level s))\n  ([indent-level s]\n   (indent indent-level indent-level s))\n  ([first-line-indent rest-lines-indent s]\n   (let [[line & lines] (string/split-lines (str s))]\n     (->> lines\n          (map #(str (apply str (repeat rest-lines-indent \" \")) %))\n          (into [(str (apply str (repeat first-line-indent \" \")) line)])\n          (string/join \"\\n\")))))\n"]}