{
"version":3,
"file":"module$node_modules$codemirror$addon$fold$brace_fold.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/codemirror/addon/fold/brace-fold.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$addon$fold$brace_fold\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","registerHelper","cm","start","findOpening","openCh","at","ch","pass","found","lineText","lastIndexOf","length","tokenType","getTokenTypeAt","Pos","line","test","getLine","startToken","endToken","startCh","count","lastLine","i","text","pos","nextOpen","indexOf","nextClose","Math","min","end","endCh","from","to","hasImport","firstLine","getTokenAt","string","type","e","semi","startLine","has","prev","next","clipPos","hasInclude","slice"]
}
