{"version":3,"sources":["fulcro/client/impl/parser.cljc"],"mappings":"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","names":["fulcro.client.impl.parser/mark-meta","source","target","G__50125","cljs.core/meta","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fulcro.client.impl.parser/symbol->ast","k","fulcro.client.impl.parser/keyword->ast","p__50159","vec__50160","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","fulcro.client.impl.parser/union-entry->ast","v","component","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","fulcro.client.impl.parser/expr->ast","fulcro.client.impl.parser/union->ast","m","p__50179","vec__50181","fulcro.client.impl.parser/call->ast","f","args","call","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","ast","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","G__50199","cljs.core/Symbol","fulcro.client.impl.parser/query->ast","query","fulcro.client.impl.parser/join->ast","join","vec__50219","query-root?","cljs.core/first","type","cljs.core/vector?","cljs.core/map?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__50228","vec__50229","fulcro.client.impl.parser/ident->ast","id","ref","x","cljs.core/Keyword","cljs.core/seq?","fulcro.client.impl.parser/wrap-expr","root?","expr","cljs.core/with-meta","G__50233","cljs.core/List","fulcro.client.impl.parser/parameterize","params","cljs.core/empty?","var_args","G__50243","fulcro.client.impl.parser/ast->expr","js/Error","p__50246","map__50248","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$2","ast-meta","unparse?","G__50251","p1__50237#","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","map__50253","key","query-root","and__4120__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","map__50261","children","query-meta","cljs.core/count","G__50263","p__50264","map__50265","union-key","G__50267","p1__50238#","G__50268","p1__50239#","G__50275","fulcro.client.impl.parser/path-meta","data","path","fulcro.client.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$4","union-expr","G__50276","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core/sequential?","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","idx","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","joins","cljs.core/seq","ret","fulcro.util/join?","fulcro.util/ident?","cljs.core/next","vec__50285","G__50288","G__50289","cljs.core/PersistentHashMap","sel","fulcro.util/join-entry","union-entry","fulcro.util/union?","fulcro.util/recursion?","G__50292","fulcro.util/unique-ident?","G__50295","cljs.core/contains?","G__50296","dispatch-key","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","branches","cljs.core/vals","props","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","q","query-props","cljs.core/set","cljs.core/reduced","clojure.set/subset?","fulcro.client.impl.parser/rethrow?","cljs.core/ExceptionInfo","cljs.core/ex-data","fulcro.client.impl.parser/substitute-root-path-for-ident","data-tree","replacement-root-path","map__50298","join-ast-node","subquery","real-data-tree-of-interest","result","fulcro.client.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$3","p__50304","map__50305","fulcro.client.impl.parser/parser","read","mutate","config","env","fulcro$client$impl$parser$parser_$_self.cljs$core$IFn$_invoke$arity$3","map__50307","G__50308","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","self","map__50324","query'","G__50328","call?","res","G__50332","ast'","G__50334","fulcro.client.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$1","p1__50300#","p2__50301#","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5","cljs.core/update","cljs.core.into.cljs$core$IFn$_invoke$arity$2","error","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mut-ret","e50336","cljs.core/reset!","fexpr__50337","e","value","G__50338","cljs.core/deref","G__50342","cljs.core/assoc-in","p1__50302#","p2__50303#","G__50343","step","fulcro.client.impl.parser/dispatch","_"],"sourcesContent":["(ns\n  ^{:doc \"\n   Generic query expression parsing and AST manipulation.\n\n   QUERY EXPRESSIONS\n\n   Query expressions are a variation on Datomic Pull Syntax\n   http://docs.datomic.com/pull.html more suitable for generic client/server\n   state transfer. It's important to note the query expression syntax is\n   *not* a strict superset of Datomic Pull.\n\n   A query expression is composed of EDN values. The grammar for query\n   expressions follows:\n\n   QueryRoot      := EdnVector(QueryExpr*)\n   PlainQueryExpr := (EdnKeyword | IdentExpr | JoinExpr)\n   QueryExpr      := (PlainQueryExpr | ParamExpr)\n   IdentExpr      := EdnVector2(Keyword, EdnValue)\n   ParamExpr      := EdnList2(PlainQueryExpr | EdnSymbol, ParamMapExpr)\n   ParamMapExpr   := EdnMap(Keyword, EdnValue)\n   JoinExpr       := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))\n   UnionExpr      := EdnMap(Keyword, QueryRoot)\n   RecurExpr      := ('... | Integer)\n\n   Note most of the api expects a QueryRoot not a QueryExpr.\n\n   QUERY EXPRESSION AST FORMAT\n\n   Given a QueryExpr you can get the AST via om.next.impl.parser/expr->ast.\n   The following keys can appear in the AST representation:\n\n   {:type         (:prop | :join | :call | :root | :union | :union-entry)\n    :key          (EdnKeyword | EdnSymbol | IdentExpr)\n    :dispatch-key (EdnKeyword | EdnSymbol)\n    :union-key    EdnKeyword\n    :query        (QueryRoot | RecurExpr)\n    :params       ParamMapExpr\n    :children     EdnVector(AST)\n    :component    Object\n    :target       EdnKeyword}\n\n   :query and :params may or may not appear. :type :call is only for\n   mutations.\"}\n  fulcro.client.impl.parser\n  (:require [clojure.set :as set]\n            [fulcro.logging :as log]\n            [fulcro.util :as util]))\n\n(declare expr->ast)\n\n(defn- mark-meta [source target]\n  (cond-> target\n    (meta source) (assoc :meta (meta source))))\n\n(defn symbol->ast [k]\n  {:dispatch-key k\n   :key          k})\n\n(defn keyword->ast [k]\n  {:type         :prop\n   :dispatch-key k\n   :key          k})\n\n(defn union-entry->ast [[k v]]\n  (let [component (-> v meta :component)]\n    (merge\n      {:type      :union-entry\n       :union-key k\n       :query     v\n       :children  (into [] (map expr->ast) v)}\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn union->ast [m]\n  {:type     :union\n   :query    m\n   :children (into [] (map union-entry->ast) m)})\n\n(defn call->ast [[f args :as call]]\n  (if (= 'quote f)\n    (assoc (expr->ast args) :target (or (-> call meta :target) :remote))\n    (let [ast (update-in (expr->ast f) [:params] merge (or args {}))]\n      (cond-> (mark-meta call ast)\n        (symbol? (:dispatch-key ast)) (assoc :type :call)))))\n\n(defn query->ast\n  \"Convert a query to its AST representation.\"\n  [query]\n  (let [component (-> query meta :component)]\n    (merge\n      (mark-meta query\n        {:type     :root\n         :children (into [] (map expr->ast) query)})\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn join->ast [join]\n  (let [query-root? (-> join meta :query-root)\n        [k v] (first join)\n        ast         (expr->ast k)\n        type        (if (= :call (:type ast)) :call :join)\n        component   (-> v meta :component)]\n    (merge ast\n      (mark-meta join {:type type :query v})\n      (when-not (nil? component)\n        {:component component})\n      (when query-root?\n        {:query-root true})\n      (when-not (or (number? v) (= '... v))\n        (cond\n          (vector? v) {:children (into [] (map expr->ast) v)}\n          (map? v) {:children [(union->ast v)]}\n          :else (throw\n                  (ex-info (str \"Invalid join, \" join)\n                    {:type :error/invalid-join})))))))\n\n(defn ident->ast [[k id :as ref]]\n  {:type         :prop\n   :dispatch-key k\n   :key          ref})\n\n(defn expr->ast\n  \"Given a query expression convert it into an AST.\"\n  [x]\n  (cond\n    (symbol? x) (symbol->ast x)\n    (keyword? x) (keyword->ast x)\n    (map? x) (join->ast x)\n    (vector? x) (ident->ast x)\n    (seq? x) (call->ast x)\n    :else (throw\n            (ex-info (str \"Invalid expression \" x)\n              {:type :error/invalid-expression}))))\n\n(defn wrap-expr [root? expr]\n  (if root?\n    (with-meta\n      (cond-> expr (keyword? expr) list)\n      {:query-root true})\n    expr))\n\n(defn parameterize [expr params]\n  (if-not (empty? params)\n    (list expr params)\n    (list expr)))\n\n(defn ast->expr\n  \"Given a query expression AST convert it back into a query expression.\"\n  ([ast]\n   (ast->expr ast false))\n  ([{:keys [type component] ast-meta :meta :as ast} unparse?]\n   (if (= :root type)\n     (cond-> (into (with-meta [] ast-meta) (map #(ast->expr % unparse?)) (:children ast))\n       (not (nil? component)) (vary-meta assoc :component component))\n     (let [{:keys [key query query-root params]} ast]\n       (wrap-expr query-root\n         (if (and params (not= :call type))\n           (let [expr (ast->expr (dissoc ast :params) unparse?)]\n             (parameterize expr params))\n           (let [key (if (= :call type) (parameterize key params) key)]\n             (if (or (= :join type)\n                   (and (= :call type) (:children ast)))\n               (if (and (not= '... query) (not (number? query))\n                     (or (true? unparse?)\n                       (= :call type)))\n                 (let [{:keys [children]} ast\n                       query-meta (meta query)]\n                   (if (and (== 1 (count children))\n                         (= :union (:type (first children)))) ;; UNION\n                     (with-meta\n                       {key (into (cond-> (with-meta {} ast-meta)\n                                    component (vary-meta assoc :component component))\n                              (map (fn [{:keys [union-key children component]}]\n                                     [union-key\n                                      (cond-> (into [] (map #(ast->expr % unparse?)) children)\n                                        (not (nil? component)) (vary-meta assoc :component component))]))\n                              (:children (first children)))}\n                       ast-meta)\n                     (with-meta\n                       {key (cond-> (into (with-meta [] query-meta) (map #(ast->expr % unparse?)) children)\n                              (not (nil? component)) (vary-meta assoc :component component))}\n                       ast-meta)))\n                 (with-meta {key query} ast-meta))\n               key))))))))\n\n(defn path-meta\n  \"Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union.\"\n  ([data path query]\n   (path-meta data path query nil))\n  ([data path query union-expr]\n   (cond\n     (nil? query)\n     (cond-> data\n       #?(:clj  (instance? clojure.lang.IObj data)\n          :cljs (satisfies? IWithMeta data))\n       (vary-meta assoc ::data-path path))\n\n     (sequential? data)\n     (-> (into []\n           (map-indexed\n             (fn [idx v]\n               (path-meta v (conj path idx) query union-expr))) data)\n       (vary-meta assoc ::data-path path))\n\n     (vector? query)\n     (loop [joins (seq query) ret data]\n       (if-not (nil? joins)\n         (let [join (first joins)]\n           (if-not (or (util/join? join)\n                     (util/ident? join)\n                     (and (seq? join)\n                       (util/ident? (first join))))\n             (recur (next joins) ret)\n             (let [join        (cond-> join (seq? join) first)\n                   join        (cond-> join (util/ident? join) (hash-map '[*]))\n                   [key sel] (util/join-entry join)\n                   union-entry (if (util/union? join) sel union-expr)\n                   sel         (if (util/recursion? sel)\n                                 (if-not (nil? union-expr)\n                                   union-entry\n                                   query)\n                                 sel)\n                   key         (cond-> key (util/unique-ident? key) first)\n                   v           (get ret key)]\n               (recur (next joins)\n                 (cond-> ret\n                   (and (map? ret) (contains? ret key))\n                   (assoc key\n                          (path-meta v (conj path key) sel union-entry)))))))\n         (cond-> ret\n           #?(:clj  (instance? clojure.lang.IObj ret)\n              :cljs (satisfies? IWithMeta ret))\n           (vary-meta assoc ::data-path path))))\n\n     :else\n     ;; UNION\n     (if (map? data)\n       (let [dispatch-key (comp :dispatch-key expr->ast)\n             branches     (vals query)\n             props        (map dispatch-key (keys data))\n             query        (reduce (fn [ret q]\n                                    (let [query-props (into #{} (map dispatch-key) q)\n                                          props       (set props)]\n                                      (cond\n                                        (= (set props)\n                                          (set query-props)) (reduced q)\n                                        (set/subset? props query-props) q\n                                        :else ret)))\n                            nil branches)]\n         (path-meta data path query union-expr))\n       data))))\n\n(defn rethrow? [x]\n  (and (instance? #?(:clj clojure.lang.ExceptionInfo :cljs ExceptionInfo) x)\n    (= :fulcro.client.primitives/abort (-> x ex-data :type))))\n\n(defn substitute-root-path-for-ident\n  \"Given the result (and query) of an ident-based query like:\n\n  [{[:TABLE :ID] (get-query C)}]\n\n  a query response data tree:\n\n  { [:TABLE :ID] { ...props for C...} }\n\n  and a replacement-root-path such as [:ROOT/subcomponent :subcomponent/items 0],\n  adds path metadata to the val (props for C) of that data tree as-if it had been\n  queried from the UI root (replacement-root-path). E.g. the path metadata on the val (props of C) will\n  START at replacement-root-path.\"\n  [data-tree replacement-root-path query]\n  (let [join-ast-node              (-> (query->ast query) :children first)\n        {subquery :query :keys [key]} join-ast-node\n        real-data-tree-of-interest (get data-tree key)\n        result                     (path-meta real-data-tree-of-interest replacement-root-path subquery)]\n    {key result}))\n\n(defn parser\n  \"Given a :read and/or :mutate function return a parser. Refer to fulcro.client.primitives/parser\n   for top level documentation.\"\n  [{:keys [read mutate] :as config}]\n  (fn self\n    ([env query] (self env query nil))\n    ([env query target]\n     (let [target (or target (:target env))\n           {:keys [replacement-root-path path] :as env} (cond-> (assoc env :parser self :target target :query-root :fulcro.client.primitives/root)\n                                                          (not (contains? env :path)) (assoc :path []))]\n       (letfn [(step [ret expr]\n                 (let [{query' :query :keys [key dispatch-key params] :as ast} (expr->ast expr)\n                       env   (cond-> (merge env {:ast ast :query query'})\n                               (nil? query') (dissoc :query)\n                               (= '... query') (assoc :query query)\n                               (vector? key) (assoc :query-root key))\n                       type  (:type ast)\n                       call? (= :call type)\n                       res   (case type\n                               :call\n                               (do\n                                 (assert mutate \"Parse mutation attempted but no :mutate function supplied\")\n                                 (mutate env dispatch-key params))\n                               (:prop :join :union)\n                               (do\n                                 (assert read \"Parse read attempted but no :read function supplied\")\n                                 (read env dispatch-key params))\n                               nil)]\n                   (if-not (nil? target)\n                     (let [ast' (get res target)]\n                       (cond-> ret\n                         (true? ast') (conj expr)\n                         (map? ast') (conj (ast->expr ast'))\n                         (seq (:refresh res)) (vary-meta update :fulcro.client.primitives/refresh #(into (or %1 #{}) %2) (:refresh res))))\n                     (if-not (or call? (nil? (:target ast)) (contains? res :value))\n                       ret\n                       (let [error   (atom nil)\n                             mut-ret (atom nil)]\n                         (when (and call? (not (nil? (:action res))))\n                           (try\n                             (reset! mut-ret ((:action res)))\n                             (catch #?(:clj Throwable :cljs :default) e\n                               (if (rethrow? e)\n                                 (throw e)\n                                 (reset! error e)))))\n                         (let [value (:value res)]\n                           (when call?\n                             (assert (or (nil? value) (map? value))\n                               ; FIXME: This no longer applies, but should be editing in a testing context.\n                               (str dispatch-key \" mutation :value must be nil or a map with structure {:refresh [...]}\")))\n                           (cond-> ret\n                             (not (nil? value)) (assoc (cond-> key\n                                                         (util/unique-ident? key)\n                                                         first)\n                                                       value)\n                             @mut-ret (assoc-in [key :result] @mut-ret)\n                             (seq (:refresh res)) (vary-meta update :fulcro.client.primitives/refresh #(into (or %1 #{}) %2) (:refresh res))\n                             @error (assoc key {:fulcro.client.primitives/error @error}))))))))]\n         (cond->\n           (reduce step (if (nil? target) {} []) query)\n           (nil? target) (path-meta path query) ;; FIXME: Don't add meta twice...overhead\n           replacement-root-path (substitute-root-path-for-ident replacement-root-path query)))))))\n\n(defn dispatch [_ k _] k)\n\n"]}