{"version":3,"sources":["fulcro_css/css_implementation.cljc"],"mappings":"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","names":["fulcro-css.css-implementation/cssify","str","clojure.string/replace","fulcro-css.css-implementation/fq-component","comp-class","temp__5718__auto__","nm","var_args","G__49257","fulcro-css.css-implementation/local-class","js/Error","cljs.core/name","fulcro-css.css-implementation/set-classname","m","subclasses","cljs.core/clj->js","cljs.core.assoc","cljs.core.dissoc","fulcro-css.css-implementation/CSS?","x","cljs.core/PROTOCOL_SENTINEL","fulcro-css.css-implementation/Global?","fulcro-css.css-implementation/get-global-rules","component","fulcro-css.css-protocols/global-rules","fulcro-css.css-implementation/get-local-rules","fulcro-css.css-protocols/local-rules","fulcro-css.css-implementation/prefixed-name?","cljs.core/re-matches","fulcro-css.css-implementation/get-prefix","vec__49284","cljs.core.nth","_","prefix","fulcro-css.css-implementation/prefixed-keyword?","kw","cljs.core/Keyword","fulcro-css.css-implementation/remove-prefix","cljs.core.subs","cljs.core/count","fulcro-css.css-implementation/remove-prefix-kw","cljs.core.keyword","fulcro-css.css-implementation/get-includes","fulcro-css.css-protocols/include-children","fulcro-css.css-implementation/get-nested-includes","direct-children","cljs.core/empty?","cljs.core.concat","p1__49298#","p2__49299#","cljs.core.reduce","fulcro-css.css-implementation/localize-name","comp","no-prefix","G__49304","fulcro_css.css_implementation.local_class","fulcro-css.css-implementation/localize-kw","fulcro-css.css-implementation/kw->localized-classname","G__49308","fulcro-css.css-implementation/selector?","e49313","cljs.core._EQ_","js/garden.selectors.CSSSelector","cljs.core/type","e","fulcro-css.css-implementation/get-selector-keywords","selector","val","classnames","p1__49314#","cljs.core.filter","clojure.string.split","cljs.core.map","cljs.core/keyword","fulcro-css.css-implementation/get-class-keys","rules","flattened-rules","cljs.core/flatten","selectors","prefixed-kws","cljs.core.distinct","fulcro-css.css-implementation/get-classnames","local-class-keys","global-class-keys","local-classnames","cljs.core/zipmap","p1__49319#","global-classnames","cljs.core.merge"],"sourcesContent":["(ns fulcro-css.css-implementation\n  \"Implementation details for co-located CSS. Do not use these directly.\"\n  ;; IMPORTANT: DO NOT INCLUDE GARDEN HERE!!!!\n  (:require [cljs.tagged-literals]\n            #?(:clj [garden.selectors :as gs])\n            [fulcro-css.css-protocols :as cp :refer [local-rules include-children global-rules]]\n            [clojure.string :as str]))\n\n;; from core\n(defn cssify\n  \"Replaces slashes and dots with underscore.\"\n  [str] (when str (str/replace str #\"[./]\" \"_\")))\n\n(defn fq-component [comp-class]\n  #?(:clj  (if (nil? (meta comp-class))\n             (str/replace (.getName comp-class) #\"[_]\" \"-\")\n             (str (:component-ns (meta comp-class)) \"/\" (:component-name (meta comp-class))))\n     :cljs (if-let [nm (.. comp-class -displayName)]\n             nm\n             \"unknown/unknown\")))\n\n(defn local-class\n  \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ([comp-class]\n   (str (cssify (fq-component comp-class))))\n  ([comp-class nm]\n   (str (cssify (fq-component comp-class)) \"__\" (name nm))))\n\n(defn set-classname\n  [m subclasses]\n  #?(:clj  (-> m\n             (assoc :className subclasses)\n             (dissoc :class))\n     :cljs (cljs.core/clj->js (-> m\n                                (assoc :className subclasses)\n                                (dissoc :class)))))\n\n;; css\n#?(:clj (defn implements-protocol?\n          [x protocol protocol-key]\n          (if (fn? x)\n            (some? (-> x meta protocol-key))\n            (extends? protocol (class x)))))\n\n(defn CSS?\n  \"Returns true if the given component has css\"\n  [x]\n  #?(:clj  (implements-protocol? x cp/CSS :local-rules)\n     :cljs (implements? cp/CSS x)))\n\n(defn Global?\n  \"Returns true if the component has global rules\"\n  [x]\n  #?(:clj  (implements-protocol? x cp/Global :global-rules)\n     :cljs (implements? cp/Global x)))\n\n(defn get-global-rules\n  \"Get the *raw* value from the global-rules of a component.\"\n  [component]\n  (if (Global? component)\n    #?(:clj  ((:global-rules (meta component)) component)\n       :cljs (global-rules component))\n    []))\n\n(defn get-local-rules\n  \"Get the *raw* value from the local-rules of a component.\"\n  [component]\n  (if (CSS? component)\n    #?(:clj  ((:local-rules (meta component)) component)\n       :cljs (local-rules component))\n    []))\n\n(defn prefixed-name?\n  \"Returns true if the given string starts with one of [. $ &$ &.]\"\n  [nm]\n  (some? (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)))\n\n(defn get-prefix\n  \"Returns the prefix of a string. [. $ &$ &.]\"\n  [nm]\n  (let [[_ prefix] (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)]\n    prefix))\n\n(defn prefixed-keyword?\n  \"Returns true if the given keyword starts with one of [. $ &$ &.]\"\n  [kw]\n  (and (keyword? kw)\n    (prefixed-name? (name kw))))\n\n(defn remove-prefix\n  \"Removes the prefix of a string.\"\n  [nm]\n  (subs nm (count (get-prefix nm))))\n\n(defn remove-prefix-kw\n  \"Removes the prefix of a keyword.\"\n  [kw]\n  (keyword (remove-prefix (name kw))))\n\n(defn get-includes\n  \"Returns the list of components from the include-children method of a component\"\n  [component]\n  (if (CSS? component)\n    #?(:clj  ((:include-children (meta component)) component)\n       :cljs (include-children component))\n    []))\n\n(defn get-nested-includes\n  \"Recursively finds all includes starting at the given component.\"\n  [component]\n  (let [direct-children (get-includes component)]\n    (if (empty? direct-children)\n      []\n      (concat direct-children (reduce #(concat %1 (get-nested-includes %2)) [] direct-children)))))\n\n(defn localize-name\n  [nm comp]\n  (let [no-prefix (remove-prefix nm)\n        prefix    (get-prefix nm)]\n    (case prefix\n      (\".\" \"&.\") (str prefix (local-class comp (keyword no-prefix)))\n      \"$\" (str \".\" no-prefix)\n      \"&$\" (str \"&.\" no-prefix))))\n\n(defn localize-kw\n  [kw comp]\n  (keyword (localize-name (name kw) comp)))\n\n(defn kw->localized-classname\n  \"Gives the localized classname for the given keyword.\"\n  [comp kw]\n  (let [nm        (name kw)\n        prefix    (get-prefix nm)\n        no-prefix (subs nm (count prefix))]\n    (case prefix\n      (\"$\" \"&$\") no-prefix\n      (\".\" \"&.\") (local-class comp no-prefix))))\n\n(defn selector?\n  [x]\n  (try\n    #?(:clj  (= garden.selectors.CSSSelector (type x))\n       :cljs (= js/garden.selectors.CSSSelector (type x)))\n    (catch #?(:cljs :default :clj Throwable) e\n      false)))\n\n(defn get-selector-keywords\n  \"Gets all the keywords that are present in a selector\"\n  [selector]\n  (let [val        (:selector selector)\n        classnames (filter #(re-matches #\"[.$].*\" %) (str/split val #\" \"))]\n    (map keyword classnames)))\n\n(defn get-class-keys\n  \"Gets all used classnames in from the given rules as keywords\"\n  [rules]\n  (let [flattened-rules (flatten rules)\n        selectors       (filter selector? flattened-rules)\n        prefixed-kws    (filter prefixed-keyword? flattened-rules)]\n    (distinct (concat (flatten (map get-selector-keywords selectors)) prefixed-kws))))\n\n(defn get-classnames\n  \"Returns a map from user-given CSS rule names to localized names of the given component.\"\n  [comp]\n  (let [local-class-keys  (get-class-keys (get-local-rules comp))\n        global-class-keys (map remove-prefix-kw (get-class-keys (get-global-rules comp)))\n        local-classnames  (zipmap (map remove-prefix-kw local-class-keys) (map #(kw->localized-classname comp %) local-class-keys))\n        global-classnames (zipmap global-class-keys (map name global-class-keys))]\n    (merge local-classnames global-classnames)))\n"]}