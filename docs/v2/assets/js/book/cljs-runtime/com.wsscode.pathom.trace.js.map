{"version":3,"sources":["com/wsscode/pathom/trace.cljc"],"mappings":"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","names":["com.wsscode.pathom.trace/now","cljs.core/inst-ms","js/Date","com.wsscode.pathom.trace/trace","env","event","temp__5718__auto__","event-trace","cljs.core.get","cljs.core.swap_BANG_","cljs.core/conj","cljs.core.assoc","var_args","G__62114","com.wsscode.pathom.trace/trace-enter","js/Error","id","cljs.core.gensym","trace-id","G__62126","com.wsscode.pathom.trace/trace-leave","com.wsscode.pathom.trace/live-trace!","trace-atom","cljs.core/add-watch","_","n","evt","cljs.core/peek","cljs.core.print","cljs.core.pr_str","cljs.core.dissoc","com.wsscode.pathom.trace/compute-durations","trace","leave-items","cljs.core.into","cljs.core.comp","cljs.core.filter","p1__62141#","cljs.core._EQ_","cljs.core.map","cljs.core.juxt","cljs.core/identity","initial-time","cljs.core/first","cljs.core.remove","e","p__62156","map__62157","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","timestamp","map__62167","et","leave","cljs.core.merge","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.trace","js/com.wsscode.pathom.trace.trace-tree-collect","method-table__4613__auto__","cljs.core.atom","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","fexpr__62180","cljs.core/MultiFn","cljs.core.symbol","com.wsscode.pathom.trace/trace-tree-collect","_x","row","x","com.wsscode.pathom.trace/tree-assoc-detail","keys","cljs.core.update_in","cljs.core.fnil","cljs.core/select-keys","com.wsscode.pathom.trace/trace-style","style","p__62195","map__62197","com.wsscode.pathom.trace/tree-assoc-key-detail","key","com.wsscode.pathom.trace/trace->tree*","paths","path","cljs.core.reduce","p__62221","map__62222","relative-timestamp","G__62227","cljs.core/Keyword","p1__62208#","cljs.core.update","next-path","cljs.core.conj","cljs.core/contains?","cljs.core/assoc-in","count","i","cljs.core.range","cljs.core/keys","cljs.core/assoc","cljs.core.get_in","com.wsscode.pathom.trace/trace->tree","cljs.core/group-by","com.wsscode.pathom.trace/compute-details-duration","res","p1__62256#","cljs.core/vec","cljs.core.sort_by","last-detail","last-ts","p1__62257#","x__4219__auto__","y__4220__auto__","or__4131__auto__","com.wsscode.pathom.trace/normalize-tree-details","trace-tree","clojure.walk/postwalk","G__62276","cljs.core/map?","p__62284","map__62285","com.wsscode.pathom.trace/compute-d3-tree","duration","children","details","G__62295","cljs.core.mapv","p__62297","map__62298","p__62300","vec__62301","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","cljs.core/second","com.wsscode.pathom.trace/trace->viz","com.wsscode.pathom.trace/wrap-parser-trace","parser","tx","cljs.core/some","trace*","env'","parser-trace","com.wsscode.pathom.trace.trace_enter","res__61936__auto__","com.wsscode.common.async-cljs/chan?","c__45808__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__45809__auto__","switch__45525__auto__","state_62349","state_val_62350","statearr-62356","inst_62347","cljs.core.async.impl.ioc-helpers/return-chan","inst_62320","statearr-62362","cljs.core.async.impl.ioc-helpers/process-exception","cljs.core.async.impl.ioc-helpers/add-exception-frame","cljs.core.async.impl.ioc-helpers/take!","inst_62330","inst_62331","com.wsscode.common.async-cljs/throw-err","inst_62332","inst_62334","inst_62335","cljs.core/PersistentHashMap","inst_62336","inst_62338","inst_62339","inst_62340","inst_62341","inst_62343","cljs.core/deref","inst_62344","inst_62345","statearr-62368","statearr-62369","statearr-62372","state-machine__45526__auto__","ret-value__45527__auto__","result__45528__auto__","cljs.core/keyword-identical?","e62374","js/Object","ex__45529__auto__","statearr-62375","state__45810__auto__","statearr-62376","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","com.wsscode.pathom.trace.trace_leave","com.wsscode.pathom.trace/trace-plugin","com.wsscode.pathom.misc/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__62402"],"sourcesContent":["(ns com.wsscode.pathom.trace\n  #?(:cljs (:require-macros [com.wsscode.pathom.trace]))\n  (:require [clojure.spec.alpha :as s]\n            [#?(:clj  com.wsscode.common.async-clj\n                :cljs com.wsscode.common.async-cljs)\n             :refer [let-chan]]\n            [clojure.walk :as walk]\n            [com.wsscode.pathom.misc :as p.misc]))\n\n(defn now []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (inst-ms (js/Date.))))\n\n(defn trace [env event]\n  (if-let [event-trace (get env ::trace*)]\n    (swap! event-trace conj\n      (assoc event\n        :com.wsscode.pathom.core/path (:com.wsscode.pathom.core/path env [])\n        ::timestamp (now)))))\n\n(defn trace-enter\n  ([env event]\n   (let [id (gensym \"pathom-trace-\")]\n     (trace env (assoc event ::direction ::enter ::id id))\n     id))\n  ([env event trace-id]\n   (trace env (assoc event ::direction ::enter ::id trace-id))\n   trace-id))\n\n(defn trace-leave\n  ([env trace-id]\n   (trace env {::direction ::leave ::id trace-id}))\n  ([env trace-id event]\n   (trace env (assoc event ::direction ::leave ::id trace-id))\n   trace-id))\n\n(defmacro tracing [env event & body]\n  `(if (get ~env ::trace*)\n     (let [trace-id# (trace-enter ~env ~event)\n           res#      (do ~@body)]\n       (trace-leave ~env trace-id# ~event)\n       res#)\n     (do ~@body)))\n\n(defn live-trace! [trace-atom]\n  (add-watch trace-atom :live\n    (fn [_ _ _ n]\n      (let [evt (peek n)]\n        (print (str (pr-str [(::event evt) (dissoc evt ::event)]) \"\\n\"))))))\n\n(defn compute-durations [trace]\n  (let [leave-items  (into {} (comp (filter (comp #(= ::leave %) ::direction))\n                                    (map (juxt ::id identity)))\n                           trace)\n\n        initial-time (::timestamp (first trace))]\n\n    (into []\n          (comp (remove (fn [e] e (= ::leave (::direction e))))\n                (map (fn [{::keys [id timestamp] :as e}]\n                       (let [e (assoc e ::relative-timestamp (- timestamp initial-time))]\n                         (if-let [{et ::timestamp :as leave} (get leave-items id)]\n                           (-> e\n                               (assoc\n                                 ::timestamp-leave et\n                                 ::duration (- et timestamp))\n                               (merge (dissoc leave ::timestamp))\n                               (dissoc ::id ::direction))\n                           e)))))\n          trace)))\n\n(defmulti trace-tree-collect (fn [_x row] (::event row)))\n\n(defmethod trace-tree-collect :default [x _] x)\n\n(defn tree-assoc-detail [row x keys]\n  (update-in x [:response ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace-style [row style]\n  (assoc row ::style style))\n\n(defn tree-assoc-key-detail [{:keys [key] :as row} x keys]\n  (update-in x [:response ::children key ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace->tree* [paths path]\n  (-> (reduce\n        (fn [x {::keys [event relative-timestamp]\n                :keys  [key]\n                :as    row}]\n          (case event\n            (:com.wsscode.pathom.core/trace-plugin\n              :com.wsscode.pathom.parser/parse-loop)\n            (update x :response #(merge (select-keys row [::duration\n                                                          ::relative-timestamp\n                                                          :com.wsscode.pathom.core/path]) %))\n\n            :com.wsscode.pathom.parser/process-key\n            (let [next-path (conj path key)]\n              (if (contains? (:visited x) next-path)\n                x\n                (-> x\n                    (assoc-in [:response :com.wsscode.pathom.core/path] path)\n                    (assoc-in [:response ::children key]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [:key\n                                                                                  ::relative-timestamp]))\n                          (assoc :com.wsscode.pathom.core/path next-path)))\n                    (update :visited conj next-path))))\n\n            :com.wsscode.pathom.core/join-seq\n            (let [count (:com.wsscode.pathom.core/seq-count row)]\n              (reduce\n                (fn [x i]\n                  (let [next-path (conj path i)]\n                    (assoc-in x [:response ::children i]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [:key\n                                                                                  ::relative-timestamp]) {:key i})\n                          (assoc :com.wsscode.pathom.core/path next-path)))))\n                x\n                (range count)))\n\n            (:com.wsscode.pathom.parser/async-return\n              :com.wsscode.pathom.parser/call-read\n              :com.wsscode.pathom.parser/external-wait-key\n              :com.wsscode.pathom.parser/skip-resolved-key\n              :com.wsscode.pathom.parser/skip-wait-key)\n            (update-in x [:response ::children key ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::event\n                                ::label\n                                ::style\n                                ::relative-timestamp]))\n\n            (:com.wsscode.pathom.parser/trigger-reader-retry\n              :com.wsscode.pathom.parser/trigger-recheck-schedule)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.parser/processing]))\n\n            :com.wsscode.pathom.parser/max-iterations-reached\n            (update-in x [:response ::children key ::details] (fnil conj [])\n              (select-keys row [::event\n                                ::label\n                                ::style\n                                ::relative-timestamp\n                                :com.wsscode.pathom.parser/max-key-iterations]))\n\n            (::trace-done\n              :com.wsscode.pathom.parser/flush-watchers-loop\n              :com.wsscode.pathom.parser/process-pending\n              :com.wsscode.pathom.parser/reset-loop)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.parser/loop-keys\n                                :com.wsscode.pathom.parser/merge-result?\n                                :com.wsscode.pathom.parser/provides]))\n\n            :com.wsscode.pathom.parser/merge-result\n            (reduce\n              (fn [x key]\n                (update-in x [:response ::children key ::details] (fnil conj [])\n                  (select-keys row [::event\n                                    ::label\n                                    ::relative-timestamp\n                                    ::style])))\n              x\n              (keys (:com.wsscode.pathom.parser/response-value row)))\n\n            (:com.wsscode.pathom.connect/batch-items-ready\n              :com.wsscode.pathom.connect/batch-result-error\n              :com.wsscode.pathom.connect/batch-result-ready\n              :com.wsscode.pathom.connect/call-resolver\n              :com.wsscode.pathom.connect/call-resolver-batch\n              :com.wsscode.pathom.connect/call-resolver-with-cache\n              :com.wsscode.pathom.connect/compute-plan\n              :com.wsscode.pathom.connect/invalid-resolve-response\n              :com.wsscode.pathom.connect/merge-resolver-response\n              :com.wsscode.pathom.connect/resolver-error\n              :com.wsscode.pathom.connect/schedule-resolver\n              :com.wsscode.pathom.connect/waiting-resolver\n              :com.wsscode.pathom.core/parallel-sequence-loop\n              :com.wsscode.pathom.parser/watch-pending-timeout)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::duration\n                                ::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.connect/input-data\n                                :com.wsscode.pathom.connect/items-count\n                                :com.wsscode.pathom.connect/plan\n                                :com.wsscode.pathom.connect/sym\n                                :com.wsscode.pathom.connect/waiting-key\n                                :com.wsscode.pathom.core/error\n                                :com.wsscode.pathom.parser/external-wait-ignore-timeout\n                                :com.wsscode.pathom.parser/provides]))\n\n            :com.wsscode.pathom.parser/value-return\n            (-> x\n                (update-in [:response ::children key ::details] (fnil conj [])\n                  (select-keys row [::event\n                                    ::label\n                                    ::relative-timestamp\n                                    ::style]))\n                (update-in [:response ::children key] assoc ::duration (- relative-timestamp (get-in x [:response ::children key ::relative-timestamp]))))\n\n            (trace-tree-collect x row)))\n        {:visited  #{}\n         :response {}}\n        (get paths path))\n      :response))\n\n(defn trace->tree [trace]\n  (let [paths (->> trace compute-durations (group-by :com.wsscode.pathom.core/path))]\n    (trace->tree* paths [])))\n\n(defn compute-details-duration [x]\n  (let [res         (update x ::details #(vec (sort-by ::relative-timestamp %)))\n        last-detail (peek (::details res))\n        last-ts     (+ (::duration last-detail 0) (::relative-timestamp last-detail 0))]\n    (update res ::duration #(max (or % 0) (- last-ts (::relative-timestamp res 0))))))\n\n(defn normalize-tree-details [trace-tree]\n  (walk/postwalk\n    (fn [x]\n      (cond-> x\n        (and (map? x) (contains? x ::details))\n        (compute-details-duration)))\n    trace-tree))\n\n(defn compute-d3-tree [{::keys                        [relative-timestamp duration children details]\n                        :com.wsscode.pathom.core/keys [path]\n                        :keys                         [key]}]\n  (cond-> {:start    relative-timestamp\n           :path     path\n           :duration (or duration 0)\n           :details  (mapv (fn [{::keys [relative-timestamp duration event]\n                                 :as    row}]\n                             (let [details (->> (dissoc row ::relative-timestamp ::timestamp ::duration ::event)\n                                                (into {} (map (fn [[k v]] [(keyword (name k)) v]))))]\n                               (merge {:event    (name event)\n                                       :duration (or duration 0)\n                                       :start    relative-timestamp}\n                                      details)))\n                       details)}\n    key (assoc :name (str key))\n    children (assoc :children\n                    (into [] (map (comp compute-d3-tree second) children)))))\n\n(defn trace->viz [trace]\n  (-> trace trace->tree normalize-tree-details compute-d3-tree\n      (assoc :hint \"Query\")))\n\n(defn wrap-parser-trace [parser]\n  (fn wrap-parser-trace-internal [env tx]\n    (if (some #{:com.wsscode.pathom/trace} tx)\n      (let [trace*       (or (::trace* env) (atom []))\n            env'         (assoc env ::trace* trace*)\n            parser-trace (trace-enter env' {::event ::trace-plugin})]\n        (let-chan [res (parser env' tx)]\n          (trace-leave env' parser-trace {::event ::trace-plugin})\n          (trace env' {::event ::trace-done})\n          (assoc res :com.wsscode.pathom/trace (trace->viz @trace*))))\n      (parser env tx))))\n\n(def trace-plugin\n  {:com.wsscode.pathom.core/wrap-parser\n   wrap-parser-trace\n\n   :com.wsscode.pathom.connect/register\n   [{:com.wsscode.pathom.connect/sym     `trace\n     :com.wsscode.pathom.connect/output  [:com.wsscode.pathom/trace]\n     :com.wsscode.pathom.connect/resolve (fn [env _] {:com.wsscode.pathom/trace nil})}]})\n\n(when p.misc/INCLUDE_SPECS\n  (s/fdef trace\n    :args (s/cat :env map? :event (s/keys :opt [::event]))))\n"]}