{"version":3,"sources":["com/wsscode/spec_inspec.cljc"],"mappings":";;;AAGA,AAAA,AAAOA,AAAgBC;AAAvB,AACE,AAAI,AAACC,AAAmBD;AAAGA;;AAA3B;;;AAEF,AAAA,AAAOE,AAAeF;AAAtB,AACE,AAAI,AAACG,AAAkBH;AAAGA;;AAA1B;;;AAEF,AAAA,AAAOI,AAAoBC;AAA3B,AACE,AAAI,AAAK,AAACC,AAAKD,AACN,AAAAE,AAAS,AAACC,AAAMH;AACvBA;;AAFF;;;AAIF;;;AAAA,AAAMI,AAEHJ;AAFH,AAGE,AAAI,AAACK,AAAU,AAACC,AAAYN;AAC1B,AAACO,AAAOP;;AADV;;;AAGF;;;AAAA,AAAMQ,AAEHC;AAFH,AAGE,AAAI,AAAK,AAACR,AAAKQ,AACN,AAAA,AAAA,AAACC,AAAE,AAACP,AAAMM;AACjB,AAACE,AAAOF;;AACRA;;;AAEJ;;;AAAA,AAAMG,AAEHZ;;AAFH,AAGE,AAAMa,AAAE,AAAAC,AAAI,AAACV,AAAUJ;AAAf,AAAA,AAAAc;AAAAA;;AAAA,AAAAA,AACI,AAACjB,AAAcG;AADnB,AAAA,AAAAc;AAAAA;;AAEI,AAACf,AAAmBC;;;;AAFhC,AAGE,AAAMe,AAAS,AAACP,AAAWK;AAA3B,AACE,AAAI,AAACjB,AAAmBmB;AACtB,AAAOA;;;;AACPA;;;;;AAER;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAAH,AAAI,AAAI,AAACI,AAAWD,AAAGvB;AAAvB,AAAA,AAAAoB;AAAAA;;AACI,AAAI,AAACN,AAAW,AAACJ,AAAUa,AAAIvB;;;AAErC;;;AAAA,AAAMyB,AAEHC,AAASH;;AAFZ,AAGE,AAAAI,AAAW,AAACE,AAAIH,AAASH;AAAzB,AAAA,AAAAI;AAAA,AAAAA,AAASC;AAAT,AACEA;;AACA,AAAAE,AAAkB,AAAI,AAACR,AAAYC,AAAGvB;AAAtC,AAAA,AAAA8B;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAOL;AAASK;;;;;AADlB;;;;;;AAGJ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiBC,AAAQlC,AAC1BmC","names":["com.wsscode.spec-inspec/accept-keyword","x","cljs.core/qualified-keyword?","com.wsscode.spec-inspec/accept-symbol","cljs.core/qualified-symbol?","com.wsscode.spec-inspec/accept-symbol-call","spec","cljs.core/seq?","cljs.core/Symbol","cljs.core/first","com.wsscode.spec-inspec/safe-form","cljs.core/contains?","cljs.spec.alpha/registry","cljs.spec.alpha/form","com.wsscode.spec-inspec/form->spec","and-spec","cljs.core._EQ_","cljs.core/second","com.wsscode.spec-inspec/spec->root-sym","f","or__4131__auto__","spec-def","com.wsscode.spec-inspec/parent-spec","k","cljs.spec.alpha/get-spec","com.wsscode.spec-inspec/registry-lookup","registry","temp__5718__auto__","c","cljs.core.get","temp__5720__auto__","parent","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.core/map?","cljs.core/any?"],"sourcesContent":["(ns com.wsscode.spec-inspec\n  (:require [clojure.spec.alpha :as s]))\n\n(defn- accept-keyword [x]\n  (if (qualified-keyword? x) x))\n\n(defn- accept-symbol [x]\n  (if (qualified-symbol? x) x))\n\n(defn- accept-symbol-call [spec]\n  (if (and (seq? spec)\n           (symbol? (first spec)))\n    spec))\n\n(defn safe-form\n  \"Return the spec form or nil.\"\n  [spec]\n  (if (contains? (s/registry) spec)\n    (s/form spec)))\n\n(defn form->spec\n  \"Return the spec, or first spec when input is a s/and.\"\n  [and-spec]\n  (if (and (seq? and-spec)\n           (= (first and-spec) `s/and))\n    (second and-spec)\n    and-spec))\n\n(defn spec->root-sym\n  \"Determine the main spec symbol from a spec form.\"\n  [spec]\n  (let [f (or (safe-form spec)\n              (accept-symbol spec)\n              (accept-symbol-call spec))]\n    (let [spec-def (form->spec f)]\n      (if (qualified-keyword? spec-def)\n        (recur spec-def)\n        spec-def))))\n\n(defn parent-spec\n  \"Look up for the parent coercer using the spec hierarchy.\"\n  [k]\n  (or (-> (s/get-spec k) accept-keyword)\n      (-> (form->spec (safe-form k)) accept-keyword)))\n\n(defn registry-lookup\n  \"Look for the key in registry, if not found try key spec parent recursively.\"\n  [registry k]\n  (if-let [c (get registry k)]\n    c\n    (when-let [parent (-> (parent-spec k) accept-keyword)]\n      (recur registry parent))))\n\n(s/fdef registry-lookup\n  :args (s/cat :registry map? :k qualified-keyword?)\n  :ret any?)\n"]}